
CANable_STM32F072C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  0000c254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a860  0800a860  0000c254  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a860  0800a860  0000c254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800a868  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fa8  20000254  0800aabc  0000c254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031fc  0800aabc  0000d1fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b6  00000000  00000000  0000c27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f55  00000000  00000000  0001e732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00022688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a66  00000000  00000000  000234d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efa4  00000000  00000000  00023f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018475  00000000  00000000  00042eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f0a  00000000  00000000  0005b34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  000f029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f35fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000254 	.word	0x20000254
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a624 	.word	0x0800a624

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000258 	.word	0x20000258
 8000104:	0800a624 	.word	0x0800a624

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <CAN_SendMessage>:
HAL_StatusTypeDef can_status; // make it global for debugger window
/*
 * Description: Send available Tx queue
 */
int CAN_SendMessage(CAN_MsgStruct *msg)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint32_t CAN_Tx_Mailboxes; // indicates which tx mailbox was used.
	CanTxMsgTypeDef *ptr;

	if(msg->txPtr.cnt_Handle) // send available message
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000250:	2b00      	cmp	r3, #0
 8000252:	d021      	beq.n	8000298 <CAN_SendMessage+0x54>
	{
		ptr = &msg->txQueue[msg->txPtr.index_OUT];
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025c:	015b      	lsls	r3, r3, #5
 800025e:	18d3      	adds	r3, r2, r3
 8000260:	60fb      	str	r3, [r7, #12]
		can_status = HAL_CAN_AddTxMessage(msg->hcan, &ptr->header, ptr->data, &CAN_Tx_Mailboxes);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68f9      	ldr	r1, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	3318      	adds	r3, #24
 800026c:	001a      	movs	r2, r3
 800026e:	2308      	movs	r3, #8
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f001 fdf0 	bl	8001e56 <HAL_CAN_AddTxMessage>
 8000276:	0003      	movs	r3, r0
 8000278:	001a      	movs	r2, r3
 800027a:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <CAN_SendMessage+0x60>)
 800027c:	701a      	strb	r2, [r3, #0]
		if (can_status == HAL_OK)
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <CAN_SendMessage+0x60>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d108      	bne.n	8000298 <CAN_SendMessage+0x54>
		{
			RingBuff_Ptr_Output(&msg->txPtr, msg->txQueueSize); // increment queue ptr
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3330      	adds	r3, #48	@ 0x30
 800028a:	001a      	movs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000290:	0019      	movs	r1, r3
 8000292:	0010      	movs	r0, r2
 8000294:	f000 fc39 	bl	8000b0a <RingBuff_Ptr_Output>
		}
	}

	return msg->txPtr.cnt_Handle; // if no more message to handle then 0 will be returned
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b004      	add	sp, #16
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000270 	.word	0x20000270

080002a8 <CAN_DataAvailable>:
 * Description: msgToParse points to available message
 * Input:
 * Output: true if data available, false if no new data
 */
bool CAN_DataAvailable(CAN_MsgStruct *msg)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if(msg->rxPtr.cnt_Handle)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d015      	beq.n	80002e4 <CAN_DataAvailable+0x3c>
	{
		msg->msgToParse = &msg->rxQueue[msg->rxPtr.index_OUT];
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6859      	ldr	r1, [r3, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	0013      	movs	r3, r2
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	189b      	adds	r3, r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	18ca      	adds	r2, r1, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	60da      	str	r2, [r3, #12]
		RingBuff_Ptr_Output(&msg->rxPtr, msg->rxQueueSize); // increment output buffer ptr
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3310      	adds	r3, #16
 80002d2:	001a      	movs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	0019      	movs	r1, r3
 80002da:	0010      	movs	r0, r2
 80002dc:	f000 fc15 	bl	8000b0a <RingBuff_Ptr_Output>
		return true;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <CAN_DataAvailable+0x3e>
	}

	return false;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	0018      	movs	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b002      	add	sp, #8
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <CAN_SetFilter>:
function: Set CAN filter to pass all ID's
input: hcan instance
output: none
*/
void CAN_SetFilter(CAN_MsgStruct *msg)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	static CAN_FilterTypeDef sFilterConfig;

	if(msg->hcan == &hcan)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <CAN_SetFilter+0x8c>)
 80002fe:	429a      	cmp	r2, r3
 8000300:	d102      	bne.n	8000308 <CAN_SetFilter+0x18>
	{
		sFilterConfig.FilterBank = 0;
 8000302:	4b1f      	ldr	r3, [pc, #124]	@ (8000380 <CAN_SetFilter+0x90>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
	}

	sFilterConfig.FilterMode             = CAN_FILTERMODE_IDMASK;
 8000308:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <CAN_SetFilter+0x90>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale            = CAN_FILTERSCALE_32BIT;
 800030e:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <CAN_SetFilter+0x90>)
 8000310:	2201      	movs	r2, #1
 8000312:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh           = 0x0000;
 8000314:	4b1a      	ldr	r3, [pc, #104]	@ (8000380 <CAN_SetFilter+0x90>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow            = 0x0000;
 800031a:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <CAN_SetFilter+0x90>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh       = 0x0000;
 8000320:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <CAN_SetFilter+0x90>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow        = 0x0000;
 8000326:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <CAN_SetFilter+0x90>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment   = CAN_FILTER_FIFO0;
 800032c:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <CAN_SetFilter+0x90>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation       = ENABLE;
 8000332:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <CAN_SetFilter+0x90>)
 8000334:	2201      	movs	r2, #1
 8000336:	621a      	str	r2, [r3, #32]

	if(HAL_CAN_ConfigFilter(msg->hcan, &sFilterConfig) != HAL_OK)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a10      	ldr	r2, [pc, #64]	@ (8000380 <CAN_SetFilter+0x90>)
 800033e:	0011      	movs	r1, r2
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fc05 	bl	8001b50 <HAL_CAN_ConfigFilter>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <CAN_SetFilter+0x5e>
	{
		Error_Handler(); // Error_Handler should never be called, so we won't worry about handling these errors.
 800034a:	f001 f935 	bl	80015b8 <Error_Handler>
	}
	if(HAL_CAN_Start(msg->hcan) != HAL_OK)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	0018      	movs	r0, r3
 8000354:	f001 fcee 	bl	8001d34 <HAL_CAN_Start>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <CAN_SetFilter+0x70>
	{
		Error_Handler();
 800035c:	f001 f92c 	bl	80015b8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(msg->hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2103      	movs	r1, #3
 8000366:	0018      	movs	r0, r3
 8000368:	f001 ff72 	bl	8002250 <HAL_CAN_ActivateNotification>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <CAN_SetFilter+0x84>
	{
		Error_Handler();
 8000370:	f001 f922 	bl	80015b8 <Error_Handler>
	}
}
 8000374:	46c0      	nop			@ (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b002      	add	sp, #8
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20001ec0 	.word	0x20001ec0
 8000380:	20000274 	.word	0x20000274

08000384 <CAN_Mode_Set>:


#include "main.h"

int CAN_Mode_Set(uint8_t *data)
{
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	uint32_t mode;

	hal_status = HAL_CAN_DeInit(&hcan);
 800038c:	250b      	movs	r5, #11
 800038e:	197c      	adds	r4, r7, r5
 8000390:	4b36      	ldr	r3, [pc, #216]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fbb6 	bl	8001b04 <HAL_CAN_DeInit>
 8000398:	0003      	movs	r3, r0
 800039a:	7023      	strb	r3, [r4, #0]
	if(hal_status != HAL_OK)
 800039c:	197b      	adds	r3, r7, r5
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <CAN_Mode_Set+0x26>
	{
		return hal_status;
 80003a4:	197b      	adds	r3, r7, r5
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	e05c      	b.n	8000464 <CAN_Mode_Set+0xe0>
	}

	if(data[0] == 0)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d102      	bne.n	80003b8 <CAN_Mode_Set+0x34>
	{
		mode = CAN_MODE_NORMAL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e016      	b.n	80003e6 <CAN_Mode_Set+0x62>
	}
	else if(data[0] == 1)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d103      	bne.n	80003c8 <CAN_Mode_Set+0x44>
	{
		mode = CAN_MODE_LOOPBACK;
 80003c0:	2380      	movs	r3, #128	@ 0x80
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e00e      	b.n	80003e6 <CAN_Mode_Set+0x62>
	}
	else if(data[0] == 2)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d103      	bne.n	80003d8 <CAN_Mode_Set+0x54>
	{
		mode = CAN_MODE_SILENT;
 80003d0:	2380      	movs	r3, #128	@ 0x80
 80003d2:	061b      	lsls	r3, r3, #24
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e006      	b.n	80003e6 <CAN_Mode_Set+0x62>
	}
	else if(data[0] == 2)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d102      	bne.n	80003e6 <CAN_Mode_Set+0x62>
	{
		mode = CAN_MODE_SILENT_LOOPBACK;
 80003e0:	23c0      	movs	r3, #192	@ 0xc0
 80003e2:	061b      	lsls	r3, r3, #24
 80003e4:	60fb      	str	r3, [r7, #12]
	}

	hcan.Instance = CAN;
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <CAN_Mode_Set+0xe8>)
 80003e8:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <CAN_Mode_Set+0xec>)
 80003ea:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <CAN_Mode_Set+0xe8>)
 80003ee:	2206      	movs	r2, #6
 80003f0:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = mode;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <CAN_Mode_Set+0xe8>)
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <CAN_Mode_Set+0xe8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000400:	2290      	movs	r2, #144	@ 0x90
 8000402:	0312      	lsls	r2, r2, #12
 8000404:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000406:	4b19      	ldr	r3, [pc, #100]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000408:	2280      	movs	r2, #128	@ 0x80
 800040a:	03d2      	lsls	r2, r2, #15
 800040c:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000410:	2200      	movs	r2, #0
 8000412:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000416:	2200      	movs	r2, #0
 8000418:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <CAN_Mode_Set+0xe8>)
 800041c:	2200      	movs	r2, #0
 800041e:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000420:	4b12      	ldr	r3, [pc, #72]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000422:	2200      	movs	r2, #0
 8000424:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000428:	2200      	movs	r2, #0
 800042a:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <CAN_Mode_Set+0xe8>)
 800042e:	2200      	movs	r2, #0
 8000430:	775a      	strb	r2, [r3, #29]

	hal_status = HAL_CAN_Init(&hcan);
 8000432:	250b      	movs	r5, #11
 8000434:	197c      	adds	r4, r7, r5
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fa65 	bl	8001908 <HAL_CAN_Init>
 800043e:	0003      	movs	r3, r0
 8000440:	7023      	strb	r3, [r4, #0]
	if(hal_status != HAL_OK)
 8000442:	197b      	adds	r3, r7, r5
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <CAN_Mode_Set+0xcc>
	{
		return hal_status;
 800044a:	197b      	adds	r3, r7, r5
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	e009      	b.n	8000464 <CAN_Mode_Set+0xe0>
	}

	hal_status = HAL_CAN_Start(&hcan); // start the CAN module
 8000450:	250b      	movs	r5, #11
 8000452:	197c      	adds	r4, r7, r5
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <CAN_Mode_Set+0xe8>)
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fc6c 	bl	8001d34 <HAL_CAN_Start>
 800045c:	0003      	movs	r3, r0
 800045e:	7023      	strb	r3, [r4, #0]

	return hal_status;
 8000460:	197b      	adds	r3, r7, r5
 8000462:	781b      	ldrb	r3, [r3, #0]
}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	b004      	add	sp, #16
 800046a:	bdb0      	pop	{r4, r5, r7, pc}
 800046c:	20001ec0 	.word	0x20001ec0
 8000470:	40006400 	.word	0x40006400

08000474 <LED_Green_Toggle>:

#include "main.h"

// TX
void LED_Green_Toggle(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8000478:	2390      	movs	r3, #144	@ 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2101      	movs	r1, #1
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fc99 	bl	8002db6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_B0_Pin); // Jhoinrch
 8000484:	2390      	movs	r3, #144	@ 0x90
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2101      	movs	r1, #1
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fc93 	bl	8002db6 <HAL_GPIO_TogglePin>
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <LED_Blue_Toggle>:

// RX
void LED_Blue_Toggle(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800049a:	2390      	movs	r3, #144	@ 0x90
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2102      	movs	r1, #2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fc88 	bl	8002db6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_B1_Pin); // Jhoinrch
 80004a6:	2390      	movs	r3, #144	@ 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2102      	movs	r1, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fc82 	bl	8002db6 <HAL_GPIO_TogglePin>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LED_Green>:

void LED_Green(bool state)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
#if defined (P_CAN_07e) || defined (CANABLE_V1_0_PRO)
	if(state)
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00e      	beq.n	80004ea <LED_Green+0x32>
	{
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET); // On
 80004cc:	2390      	movs	r3, #144	@ 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2200      	movs	r2, #0
 80004d2:	2101      	movs	r1, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fc51 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_B0_Pin, GPIO_PIN_RESET); // On // Jhoinrch
 80004da:	2390      	movs	r3, #144	@ 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fc4a 	bl	8002d7c <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET); // Off
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_B0_Pin, GPIO_PIN_SET); // Off // Jhoinrch
	}
#endif
}
 80004e8:	e00d      	b.n	8000506 <LED_Green+0x4e>
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET); // Off
 80004ea:	2390      	movs	r3, #144	@ 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	2101      	movs	r1, #1
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fc42 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_B0_Pin, GPIO_PIN_SET); // Off // Jhoinrch
 80004f8:	2390      	movs	r3, #144	@ 0x90
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fc3b 	bl	8002d7c <HAL_GPIO_WritePin>
}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}

0800050e <LED_Blue>:

void LED_Blue(bool state)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	0002      	movs	r2, r0
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	701a      	strb	r2, [r3, #0]
#if defined (P_CAN_07e) || defined (CANABLE_V1_0_PRO)
	if(state)
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00e      	beq.n	8000540 <LED_Blue+0x32>
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); // On
 8000522:	2390      	movs	r3, #144	@ 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fc26 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_B1_Pin, GPIO_PIN_RESET); // On // Jhoinrch
 8000530:	2390      	movs	r3, #144	@ 0x90
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fc1f 	bl	8002d7c <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); // Off
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_B1_Pin, GPIO_PIN_SET); // Off // Jhoinrch
	}
#endif
}
 800053e:	e00d      	b.n	800055c <LED_Blue+0x4e>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); // Off
 8000540:	2390      	movs	r3, #144	@ 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2201      	movs	r2, #1
 8000546:	2102      	movs	r1, #2
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fc17 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_B1_Pin, GPIO_PIN_SET); // Off // Jhoinrch
 800054e:	2390      	movs	r3, #144	@ 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2201      	movs	r2, #1
 8000554:	2102      	movs	r1, #2
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fc10 	bl	8002d7c <HAL_GPIO_WritePin>
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LED_Green_Off>:

void LED_Green_Off(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
#if defined (P_CAN_07e) || defined (CANABLE_V1_0_PRO)
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET); // Off
 8000568:	2390      	movs	r3, #144	@ 0x90
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2201      	movs	r2, #1
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc03 	bl	8002d7c <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET); // Off
#endif
}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <LED_Blue_Off>:

void LED_Blue_Off(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
#if defined (P_CAN_07e) || defined (CANABLE_V1_0_PRO)
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); // Off
 8000580:	2390      	movs	r3, #144	@ 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fbf7 	bl	8002d7c <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); // Off
#endif
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "main.h"


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	CanRxMsgTypeDef *ptr;

	if(hcan == can_msg.hcan)
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d126      	bne.n	80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
	{
		ptr = &can_msg.rxQueue[can_msg.rxPtr.index_IN];
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005a8:	6859      	ldr	r1, [r3, #4]
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005ac:	691a      	ldr	r2, [r3, #16]
 80005ae:	0013      	movs	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	18cb      	adds	r3, r1, r3
 80005b8:	60fb      	str	r3, [r7, #12]
		hal_status = HAL_CAN_GetRxMessage(can_msg.hcan, CAN_RX_FIFO0, &ptr->header, ptr->data);
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	331c      	adds	r3, #28
 80005c4:	250b      	movs	r5, #11
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	2100      	movs	r1, #0
 80005ca:	f001 fd16 	bl	8001ffa <HAL_CAN_GetRxMessage>
 80005ce:	0003      	movs	r3, r0
 80005d0:	7023      	strb	r3, [r4, #0]
		if(hal_status == HAL_OK)
 80005d2:	197b      	adds	r3, r7, r5
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10c      	bne.n	80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			RingBuff_Ptr_Input(&can_msg.rxPtr, can_msg.rxQueueSize);
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fa4e 	bl	8000a84 <RingBuff_Ptr_Input>
			TimerCallbackRepetitionStart(&timerCallback, LED_Blue_Toggle, 20, 2); // blip LED
 80005e8:	4906      	ldr	r1, [pc, #24]	@ (8000604 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80005ea:	4807      	ldr	r0, [pc, #28]	@ (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80005ec:	2302      	movs	r3, #2
 80005ee:	2214      	movs	r2, #20
 80005f0:	f000 fb2d 	bl	8000c4e <TimerCallbackRepetitionStart>
		}
	}
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b004      	add	sp, #16
 80005fa:	bdb0      	pop	{r4, r5, r7, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000018 	.word	0x20000018
 8000604:	08000497 	.word	0x08000497
 8000608:	20001cbc 	.word	0x20001cbc

0800060c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(hcan == can_msg.hcan)
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	d109      	bne.n	8000632 <HAL_CAN_TxMailbox0CompleteCallback+0x26>
	{
		TimerCallbackRepetitionStart(&timerCallback, LED_Green_Toggle, 20, 2); // blip LED
 800061e:	4908      	ldr	r1, [pc, #32]	@ (8000640 <HAL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000622:	2302      	movs	r3, #2
 8000624:	2214      	movs	r2, #20
 8000626:	f000 fb12 	bl	8000c4e <TimerCallbackRepetitionStart>
		CAN_SendMessage(&can_msg);
 800062a:	4b04      	ldr	r3, [pc, #16]	@ (800063c <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff fe09 	bl	8000244 <CAN_SendMessage>
	}
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	20000008 	.word	0x20000008
 8000640:	08000475 	.word	0x08000475
 8000644:	20001cbc 	.word	0x20001cbc

08000648 <PollingInit>:
	.txQueue = usbTxQueue,
	.txQueueSize = USB_QUEUE_SIZE
};

void PollingInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	CAN_SetFilter(&can_msg);
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <PollingInit+0x5c>)
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fe4e 	bl	80002f0 <CAN_SetFilter>

	// blink the green LED 3 times to indicate it is up and running.
	TimerCallbackRegisterOnly(&timerCallback, LED_Green_Toggle);
 8000654:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <PollingInit+0x60>)
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <PollingInit+0x64>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fa79 	bl	8000b52 <TimerCallbackRegisterOnly>
	TimerCallbackRepetitionStart(&timerCallback, LED_Green_Toggle, 500, 6);
 8000660:	23fa      	movs	r3, #250	@ 0xfa
 8000662:	005a      	lsls	r2, r3, #1
 8000664:	4910      	ldr	r1, [pc, #64]	@ (80006a8 <PollingInit+0x60>)
 8000666:	4811      	ldr	r0, [pc, #68]	@ (80006ac <PollingInit+0x64>)
 8000668:	2306      	movs	r3, #6
 800066a:	f000 faf0 	bl	8000c4e <TimerCallbackRepetitionStart>
	TimerCallbackRegister2nd(&timerCallback, LED_Blue_Toggle, LED_Green_Off); // be sure LED goes to off state
 800066e:	4a10      	ldr	r2, [pc, #64]	@ (80006b0 <PollingInit+0x68>)
 8000670:	4910      	ldr	r1, [pc, #64]	@ (80006b4 <PollingInit+0x6c>)
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <PollingInit+0x64>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fabb 	bl	8000bf0 <TimerCallbackRegister2nd>

	TimerCallbackRegisterOnly(&timerCallback, LED_Blue_Toggle);
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <PollingInit+0x6c>)
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <PollingInit+0x64>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fa66 	bl	8000b52 <TimerCallbackRegisterOnly>
	TimerCallbackRegister2nd(&timerCallback, LED_Blue_Toggle, LED_Blue_Off); // be sure LED goes to off state
 8000686:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <PollingInit+0x70>)
 8000688:	490a      	ldr	r1, [pc, #40]	@ (80006b4 <PollingInit+0x6c>)
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <PollingInit+0x64>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faaf 	bl	8000bf0 <TimerCallbackRegister2nd>
#if defined (P_CAN_07e) || defined (CANABLE_V1_0_PRO)
	LED_Green(false);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff10 	bl	80004b8 <LED_Green>
	LED_Blue(false);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff38 	bl	800050e <LED_Blue>
#endif
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000008 	.word	0x20000008
 80006a8:	08000475 	.word	0x08000475
 80006ac:	20001cbc 	.word	0x20001cbc
 80006b0:	08000565 	.word	0x08000565
 80006b4:	08000497 	.word	0x08000497
 80006b8:	0800057d 	.word	0x0800057d

080006bc <PollingRoutine>:

void PollingRoutine(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    TimerCallbackPoll(&timerCallback);
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <PollingRoutine+0x2c>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fb87 	bl	8000dd6 <TimerCallbackPoll>

    USB_Parse(&usb_msg);
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <PollingRoutine+0x30>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f812 	bl	80006f4 <USB_Parse>
    CAN_Parse(&can_msg);
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <PollingRoutine+0x34>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8c6 	bl	8000864 <CAN_Parse>

    USB_SendMessage(&usb_msg);
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <PollingRoutine+0x30>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fc7e 	bl	8000fdc <USB_SendMessage>
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	20001cbc 	.word	0x20001cbc
 80006ec:	2000004c 	.word	0x2000004c
 80006f0:	20000008 	.word	0x20000008

080006f4 <USB_Parse>:

/*
 * Description: USB message:<id><na><na><size><data>...
 */
void USB_Parse(USB_MsgStruct *msg)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0c4      	sub	sp, #272	@ 0x110
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	int status = -1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	425b      	negs	r3, r3
 8000700:	2286      	movs	r2, #134	@ 0x86
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	18ba      	adds	r2, r7, r2
 8000706:	6013      	str	r3, [r2, #0]
	USB_Data_t usbData = {0};
 8000708:	4b50      	ldr	r3, [pc, #320]	@ (800084c <USB_Parse+0x158>)
 800070a:	2288      	movs	r2, #136	@ 0x88
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	189b      	adds	r3, r3, r2
 8000710:	19db      	adds	r3, r3, r7
 8000712:	0018      	movs	r0, r3
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f009 fb06 	bl	8009d2c <memset>

	if(USB_DataAvailable(msg))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fd15 	bl	8001152 <USB_DataAvailable>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d100      	bne.n	800072e <USB_Parse+0x3a>
 800072c:	e08a      	b.n	8000844 <USB_Parse+0x150>
	{
		switch(msg->msgToParse->Status.id)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b30      	cmp	r3, #48	@ 0x30
 8000736:	d051      	beq.n	80007dc <USB_Parse+0xe8>
 8000738:	db5c      	blt.n	80007f4 <USB_Parse+0x100>
 800073a:	2b95      	cmp	r3, #149	@ 0x95
 800073c:	dc5a      	bgt.n	80007f4 <USB_Parse+0x100>
 800073e:	2b80      	cmp	r3, #128	@ 0x80
 8000740:	db58      	blt.n	80007f4 <USB_Parse+0x100>
 8000742:	3b80      	subs	r3, #128	@ 0x80
 8000744:	2b15      	cmp	r3, #21
 8000746:	d855      	bhi.n	80007f4 <USB_Parse+0x100>
 8000748:	009a      	lsls	r2, r3, #2
 800074a:	4b41      	ldr	r3, [pc, #260]	@ (8000850 <USB_Parse+0x15c>)
 800074c:	18d3      	adds	r3, r2, r3
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	469f      	mov	pc, r3
		{
		case CMD_MESSAGE:
			USB_to_CAN_Send(&can_msg, msg->msgToParse->Status.data);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	1d1a      	adds	r2, r3, #4
 8000758:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <USB_Parse+0x160>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fd19 	bl	8001194 <USB_to_CAN_Send>
			break;
 8000762:	e04d      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_BAUD:
			status = CAN_BTR_Set(&can_msg, msg->msgToParse->Status.data);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	1d1a      	adds	r2, r3, #4
 800076a:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <USB_Parse+0x160>)
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8fe 	bl	8000970 <CAN_BTR_Set>
 8000774:	0003      	movs	r3, r0
 8000776:	2286      	movs	r2, #134	@ 0x86
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	18ba      	adds	r2, r7, r2
 800077c:	6013      	str	r3, [r2, #0]
			break;
 800077e:	e03f      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_HARDWARE:
			SendStringInfo(CMD_HARDWARE, (char*)Hardware);
 8000780:	4b35      	ldr	r3, [pc, #212]	@ (8000858 <USB_Parse+0x164>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	2093      	movs	r0, #147	@ 0x93
 8000788:	f000 f93a 	bl	8000a00 <SendStringInfo>
			status = -1;
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	2286      	movs	r2, #134	@ 0x86
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	18ba      	adds	r2, r7, r2
 8000796:	6013      	str	r3, [r2, #0]
			break;
 8000798:	e032      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_VERSION:
			SendStringInfo(CMD_VERSION, (char*)Version);
 800079a:	4b30      	ldr	r3, [pc, #192]	@ (800085c <USB_Parse+0x168>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	0019      	movs	r1, r3
 80007a0:	2092      	movs	r0, #146	@ 0x92
 80007a2:	f000 f92d 	bl	8000a00 <SendStringInfo>
			status = -1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	425b      	negs	r3, r3
 80007aa:	2286      	movs	r2, #134	@ 0x86
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	18ba      	adds	r2, r7, r2
 80007b0:	6013      	str	r3, [r2, #0]
			break;
 80007b2:	e025      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_FREQUENCY:
			APB1_Frequency_Get();
 80007b4:	f000 f8bc 	bl	8000930 <APB1_Frequency_Get>
			status = -1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	2286      	movs	r2, #134	@ 0x86
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	18ba      	adds	r2, r7, r2
 80007c2:	6013      	str	r3, [r2, #0]
			break;
 80007c4:	e01c      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_CAN_BTR:
			CAN_BTR_Get(&can_msg);
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <USB_Parse+0x160>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 f85f 	bl	800088c <CAN_BTR_Get>
			status = -1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	425b      	negs	r3, r3
 80007d2:	2286      	movs	r2, #134	@ 0x86
 80007d4:	0052      	lsls	r2, r2, #1
 80007d6:	18ba      	adds	r2, r7, r2
 80007d8:	6013      	str	r3, [r2, #0]
			break;
 80007da:	e011      	b.n	8000800 <USB_Parse+0x10c>
		case CMD_CAN_MODE:
			status = CAN_Mode_Set(msg->msgToParse->Status.data);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fdce 	bl	8000384 <CAN_Mode_Set>
 80007e8:	0003      	movs	r3, r0
 80007ea:	2286      	movs	r2, #134	@ 0x86
 80007ec:	0052      	lsls	r2, r2, #1
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	6013      	str	r3, [r2, #0]
			break;
 80007f2:	e005      	b.n	8000800 <USB_Parse+0x10c>
		default:
			status = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	2286      	movs	r2, #134	@ 0x86
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	18ba      	adds	r2, r7, r2
 80007fc:	6013      	str	r3, [r2, #0]
			break;
 80007fe:	46c0      	nop			@ (mov r8, r8)
		}

		if(status == -1) // do not ACK/NAK
 8000800:	2286      	movs	r2, #134	@ 0x86
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	18bb      	adds	r3, r7, r2
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	d01a      	beq.n	8000842 <USB_Parse+0x14e>
		{
			return;
		}
		else if(status != 0)
 800080c:	18bb      	adds	r3, r7, r2
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <USB_Parse+0x130>
		{
			usbData.Status.id = CMD_NAK; // NAK PC
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <USB_Parse+0x158>)
 8000816:	2288      	movs	r2, #136	@ 0x88
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	189b      	adds	r3, r3, r2
 800081c:	19db      	adds	r3, r3, r7
 800081e:	2215      	movs	r2, #21
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e006      	b.n	8000832 <USB_Parse+0x13e>
		}
		else
		{
			usbData.Status.id = CMD_ACK; // ACK PC
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <USB_Parse+0x158>)
 8000826:	2288      	movs	r2, #136	@ 0x88
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	189b      	adds	r3, r3, r2
 800082c:	19db      	adds	r3, r3, r7
 800082e:	2206      	movs	r2, #6
 8000830:	701a      	strb	r2, [r3, #0]
		}

		USB_AddTxBuffer(&usb_msg, &usbData);
 8000832:	230c      	movs	r3, #12
 8000834:	18fa      	adds	r2, r7, r3
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <USB_Parse+0x16c>)
 8000838:	0011      	movs	r1, r2
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fc04 	bl	8001048 <USB_AddTxBuffer>
 8000840:	e000      	b.n	8000844 <USB_Parse+0x150>
			return;
 8000842:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000844:	46bd      	mov	sp, r7
 8000846:	b044      	add	sp, #272	@ 0x110
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	fffffefc 	.word	0xfffffefc
 8000850:	0800a6ac 	.word	0x0800a6ac
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004
 8000860:	2000004c 	.word	0x2000004c

08000864 <CAN_Parse>:

void CAN_Parse(CAN_MsgStruct *msg)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if(CAN_DataAvailable(msg))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fd1a 	bl	80002a8 <CAN_DataAvailable>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d004      	beq.n	8000882 <CAN_Parse+0x1e>
	{
		CAN_to_USB_Send(msg, CAN1_NODE);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fce5 	bl	800124c <CAN_to_USB_Send>
	}
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <CAN_BTR_Get>:

void CAN_BTR_Get(CAN_MsgStruct *msg)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b0c5      	sub	sp, #276	@ 0x114
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	USB_Data_t usb_data = {0};
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <CAN_BTR_Get+0x9c>)
 8000896:	2488      	movs	r4, #136	@ 0x88
 8000898:	0064      	lsls	r4, r4, #1
 800089a:	191b      	adds	r3, r3, r4
 800089c:	19db      	adds	r3, r3, r7
 800089e:	0018      	movs	r0, r3
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f009 fa40 	bl	8009d2c <memset>
	uint32_t btrValue = READ_REG(msg->hcan->Instance->BTR);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	2086      	movs	r0, #134	@ 0x86
 80008b6:	0040      	lsls	r0, r0, #1
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	6013      	str	r3, [r2, #0]

	usb_data.Status.id = CMD_CAN_BTR;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <CAN_BTR_Get+0x9c>)
 80008be:	0021      	movs	r1, r4
 80008c0:	185b      	adds	r3, r3, r1
 80008c2:	19db      	adds	r3, r3, r7
 80008c4:	2291      	movs	r2, #145	@ 0x91
 80008c6:	701a      	strb	r2, [r3, #0]
	usb_data.Status.data[0] = btrValue >> 24 & 0xFF;
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	0e1b      	lsrs	r3, r3, #24
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <CAN_BTR_Get+0x9c>)
 80008d2:	185b      	adds	r3, r3, r1
 80008d4:	19db      	adds	r3, r3, r7
 80008d6:	711a      	strb	r2, [r3, #4]
	usb_data.Status.data[1] = btrValue >> 16 & 0xFF;
 80008d8:	183b      	adds	r3, r7, r0
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	0c1b      	lsrs	r3, r3, #16
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <CAN_BTR_Get+0x9c>)
 80008e2:	185b      	adds	r3, r3, r1
 80008e4:	19db      	adds	r3, r3, r7
 80008e6:	715a      	strb	r2, [r3, #5]
	usb_data.Status.data[2] = btrValue >> 8 & 0xFF;
 80008e8:	183b      	adds	r3, r7, r0
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <CAN_BTR_Get+0x9c>)
 80008f2:	185b      	adds	r3, r3, r1
 80008f4:	19db      	adds	r3, r3, r7
 80008f6:	719a      	strb	r2, [r3, #6]
	usb_data.Status.data[3] = btrValue & 0xFF;
 80008f8:	183b      	adds	r3, r7, r0
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <CAN_BTR_Get+0x9c>)
 8000900:	185b      	adds	r3, r3, r1
 8000902:	19db      	adds	r3, r3, r7
 8000904:	71da      	strb	r2, [r3, #7]

	usb_data.Status.size = 4;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <CAN_BTR_Get+0x9c>)
 8000908:	185b      	adds	r3, r3, r1
 800090a:	19db      	adds	r3, r3, r7
 800090c:	2204      	movs	r2, #4
 800090e:	70da      	strb	r2, [r3, #3]

	USB_AddTxBuffer(&usb_msg, &usb_data);
 8000910:	230c      	movs	r3, #12
 8000912:	18fa      	adds	r2, r7, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <CAN_BTR_Get+0xa0>)
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fb95 	bl	8001048 <USB_AddTxBuffer>
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b045      	add	sp, #276	@ 0x114
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	fffffefc 	.word	0xfffffefc
 800092c:	2000004c 	.word	0x2000004c

08000930 <APB1_Frequency_Get>:

void APB1_Frequency_Get(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
	uint32_t freq;
	char str[16] = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	2310      	movs	r3, #16
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f009 f9f4 	bl	8009d2c <memset>
	freq = HAL_RCC_GetPCLK1Freq();
 8000944:	f004 fd70 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8000948:	0003      	movs	r3, r0
 800094a:	617b      	str	r3, [r7, #20]

	sprintf(str, "%ld", freq);
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4907      	ldr	r1, [pc, #28]	@ (800096c <APB1_Frequency_Get+0x3c>)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	0018      	movs	r0, r3
 8000954:	f009 f9c8 	bl	8009ce8 <siprintf>
	SendStringInfo(CMD_FREQUENCY, str);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	0019      	movs	r1, r3
 800095c:	2094      	movs	r0, #148	@ 0x94
 800095e:	f000 f84f 	bl	8000a00 <SendStringInfo>
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b006      	add	sp, #24
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	0800a658 	.word	0x0800a658

08000970 <CAN_BTR_Set>:

int CAN_BTR_Set(CAN_MsgStruct *msg, uint8_t *data)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	uint32_t btrValue = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]

	btrValue = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]; // parse the BTR data
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	061a      	lsls	r2, r3, #24
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	431a      	orrs	r2, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	3302      	adds	r3, #2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	4313      	orrs	r3, r2
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	3203      	adds	r2, #3
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]

	// some of these snippets were copied from HAL_CAN_Init()
	HAL_CAN_DeInit(msg->hcan);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f8ac 	bl	8001b04 <HAL_CAN_DeInit>

	if (msg->hcan->State == HAL_CAN_STATE_RESET)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2220      	movs	r2, #32
 80009b2:	5c9b      	ldrb	r3, [r3, r2]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d104      	bne.n	80009c4 <CAN_BTR_Set+0x54>
	{
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(msg->hcan);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fe24 	bl	800160c <HAL_CAN_MspInit>
	}

	/* Set the bit timing register */
	WRITE_REG(msg->hcan->Instance->BTR, (uint32_t)(btrValue));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	61da      	str	r2, [r3, #28]

	/* Initialize the error code */
	msg->hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Initialize the CAN state */
	msg->hcan->State = HAL_CAN_STATE_READY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2220      	movs	r2, #32
 80009dc:	2101      	movs	r1, #1
 80009de:	5499      	strb	r1, [r3, r2]

	hal_status = HAL_CAN_Start(msg->hcan); // start the CAN module
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	250b      	movs	r5, #11
 80009e6:	197c      	adds	r4, r7, r5
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 f9a3 	bl	8001d34 <HAL_CAN_Start>
 80009ee:	0003      	movs	r3, r0
 80009f0:	7023      	strb	r3, [r4, #0]

	return hal_status;
 80009f2:	197b      	adds	r3, r7, r5
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a00 <SendStringInfo>:

void SendStringInfo(uint8_t cmd, char *msg)
{
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b0c2      	sub	sp, #264	@ 0x108
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <SendStringInfo+0x74>)
 8000a0c:	2484      	movs	r4, #132	@ 0x84
 8000a0e:	0064      	lsls	r4, r4, #1
 8000a10:	191b      	adds	r3, r3, r4
 8000a12:	19db      	adds	r3, r3, r7
 8000a14:	701a      	strb	r2, [r3, #0]
	USB_Data_t usb_data = {0};
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <SendStringInfo+0x78>)
 8000a18:	191b      	adds	r3, r3, r4
 8000a1a:	19db      	adds	r3, r3, r7
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f009 f981 	bl	8009d2c <memset>

	sprintf((char*)usb_data.Status.data, "%s\r\n", msg);
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4913      	ldr	r1, [pc, #76]	@ (8000a7c <SendStringInfo+0x7c>)
 8000a2e:	2508      	movs	r5, #8
 8000a30:	197b      	adds	r3, r7, r5
 8000a32:	3304      	adds	r3, #4
 8000a34:	0018      	movs	r0, r3
 8000a36:	f009 f957 	bl	8009ce8 <siprintf>

	usb_data.Status.id = cmd;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <SendStringInfo+0x78>)
 8000a3c:	191b      	adds	r3, r3, r4
 8000a3e:	19db      	adds	r3, r3, r7
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <SendStringInfo+0x74>)
 8000a42:	1912      	adds	r2, r2, r4
 8000a44:	19d2      	adds	r2, r2, r7
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	701a      	strb	r2, [r3, #0]
	usb_data.Status.size = strlen((char*)usb_data.Status.data);
 8000a4a:	197b      	adds	r3, r7, r5
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fb5a 	bl	8000108 <strlen>
 8000a54:	0003      	movs	r3, r0
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <SendStringInfo+0x78>)
 8000a5a:	191b      	adds	r3, r3, r4
 8000a5c:	19db      	adds	r3, r3, r7
 8000a5e:	70da      	strb	r2, [r3, #3]

	USB_AddTxBuffer(&usb_msg, &usb_data);
 8000a60:	197a      	adds	r2, r7, r5
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <SendStringInfo+0x80>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 faee 	bl	8001048 <USB_AddTxBuffer>
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b042      	add	sp, #264	@ 0x108
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	fffffeff 	.word	0xfffffeff
 8000a78:	ffffff00 	.word	0xffffff00
 8000a7c:	0800a65c 	.word	0x0800a65c
 8000a80:	2000004c 	.word	0x2000004c

08000a84 <RingBuff_Ptr_Input>:
	ptr->cnt_Handle = 0;
	ptr->cnt_OverFlow = 0;
}

int RingBuff_Ptr_Input(RING_BUFF_STRUCT *ptr, uint32_t bufferSize)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	int status = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
	ptr->index_IN++;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	601a      	str	r2, [r3, #0]
	if (ptr->index_IN >= bufferSize)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d804      	bhi.n	8000ab0 <RingBuff_Ptr_Input+0x2c>
	{
		ptr->index_IN = 0;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
		status = 1; // roll over occurred
 8000aac:	2301      	movs	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
	}

	ptr->cnt_Handle++;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
	if (ptr->index_IN == ptr->index_OUT)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d11c      	bne.n	8000b00 <RingBuff_Ptr_Input+0x7c>
	{
		ptr->cnt_OverFlow++;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
		if (ptr->cnt_OverFlow > RING_BUFF_OVERFLOW_SIZE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	2b64      	cmp	r3, #100	@ 0x64
 8000ad6:	d902      	bls.n	8000ade <RingBuff_Ptr_Input+0x5a>
			ptr->cnt_OverFlow = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
		if (ptr->index_IN == 0)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <RingBuff_Ptr_Input+0x6c>
		{
			ptr->index_OUT = bufferSize - 1;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	e004      	b.n	8000afa <RingBuff_Ptr_Input+0x76>
		}
		else
		{
			ptr->index_OUT = ptr->index_IN - 1;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1e5a      	subs	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	605a      	str	r2, [r3, #4]
		}
		ptr->cnt_Handle = 1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	609a      	str	r2, [r3, #8]
	}

	return status;
 8000b00:	68fb      	ldr	r3, [r7, #12]
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <RingBuff_Ptr_Output>:

int RingBuff_Ptr_Output(RING_BUFF_STRUCT *ptr, uint32_t bufferSize)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	int status = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]

	if (ptr->cnt_Handle)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d013      	beq.n	8000b48 <RingBuff_Ptr_Output+0x3e>
	{
		ptr->index_OUT++;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]
		if (ptr->index_OUT >= bufferSize)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d804      	bhi.n	8000b3e <RingBuff_Ptr_Output+0x34>
		{
			ptr->index_OUT = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
			status = 1; // roll over occurred
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
		}
		ptr->cnt_Handle--;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
	}

	return status;
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <TimerCallbackRegisterOnly>:
 * 				To start a timer to shut down after a time use TimerCallbackTimeoutStart
 * 				To start a regular timer use TimerCallbackTimerStart. You can have it repeat or no repeat.
 *
 */
int TimerCallbackRegisterOnly(TimerCallbackStruct *timer, TimerCallback callback)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

    while(timer->Instance[i].callback != 0)
 8000b64:	e018      	b.n	8000b98 <TimerCallbackRegisterOnly+0x46>
    {
		if(timer->Instance[i].callback == callback)
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	0192      	lsls	r2, r2, #6
 8000b70:	58d3      	ldr	r3, [r2, r3]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d102      	bne.n	8000b7e <TimerCallbackRegisterOnly+0x2c>
		{
			return -1;// Callback already defined
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	e034      	b.n	8000be8 <TimerCallbackRegisterOnly+0x96>
		}

		if(i == MAX_TIMER_CALLBACK)
 8000b7e:	230f      	movs	r3, #15
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d101      	bne.n	8000b8c <TimerCallbackRegisterOnly+0x3a>
		{
			return 0;// Maximum timers reached
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e02d      	b.n	8000be8 <TimerCallbackRegisterOnly+0x96>
		}
		i++;// next
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	3201      	adds	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
    while(timer->Instance[i].callback != 0)
 8000b98:	200f      	movs	r0, #15
 8000b9a:	183b      	adds	r3, r7, r0
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	0192      	lsls	r2, r2, #6
 8000ba2:	58d3      	ldr	r3, [r2, r3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1de      	bne.n	8000b66 <TimerCallbackRegisterOnly+0x14>
	};

    timer->Instance[i].callback = callback;
 8000ba8:	183b      	adds	r3, r7, r0
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0192      	lsls	r2, r2, #6
 8000bb0:	6839      	ldr	r1, [r7, #0]
 8000bb2:	50d1      	str	r1, [r2, r3]

    timer->Instance[i].timerRepetitionEnable = false;
 8000bb4:	183b      	adds	r3, r7, r0
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	019b      	lsls	r3, r3, #6
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
    timer->Instance[i].timerEnabled = false;
 8000bc4:	183b      	adds	r3, r7, r0
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	2131      	movs	r1, #49	@ 0x31
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	18d3      	adds	r3, r2, r3
 8000bd0:	185b      	adds	r3, r3, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]

    timer->timerLastIndex = i + 1; // save number of callbacks registered
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	0019      	movs	r1, r3
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	50d1      	str	r1, [r2, r3]

    return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b004      	add	sp, #16
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TimerCallbackRegister2nd>:
 * 				Use TimerCallbackRegister2ndDisable to disable the 2nd callback at any time.
 * 				Note - The primary callback has to be registered first, otherwise the 2nd callback will not be registered.
 *
 */
int TimerCallbackRegister2nd(TimerCallbackStruct *timer, TimerCallback callback, TimerCallback callback2)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

	while(timer->Instance[i].callback != callback)
 8000c00:	e00b      	b.n	8000c1a <TimerCallbackRegister2nd+0x2a>
	{
		if(i == timer->timerLastIndex)
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58d2      	ldr	r2, [r2, r3]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d101      	bne.n	8000c14 <TimerCallbackRegister2nd+0x24>
		{
			return 1;// callback not found
 8000c10:	2301      	movs	r3, #1
 8000c12:	e018      	b.n	8000c46 <TimerCallbackRegister2nd+0x56>
		}
		i++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
	while(timer->Instance[i].callback != callback)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	0192      	lsls	r2, r2, #6
 8000c20:	58d3      	ldr	r3, [r2, r3]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d1ec      	bne.n	8000c02 <TimerCallbackRegister2nd+0x12>
	};

	timer->Instance[i].callback2 = callback2;
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	18d3      	adds	r3, r2, r3
 8000c30:	3308      	adds	r3, #8
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
	timer->Instance[i].timerCallback2Enabled = true;
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	019b      	lsls	r3, r3, #6
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	3304      	adds	r3, #4
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]

	return i;
 8000c44:	697b      	ldr	r3, [r7, #20]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b006      	add	sp, #24
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <TimerCallbackRepetitionStart>:
 * 				use a even number to end with the LED Off, else use an odd number to end with the LED on.
 *				So to blink the LED 3 times, use 6 for the repetition.
 *
 */
int TimerCallbackRepetitionStart(TimerCallbackStruct *timer, TimerCallback callback, uint32_t time, uint32_t repetition)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
    uint8_t i = 0;
 8000c5c:	2317      	movs	r3, #23
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]

    while(timer->Instance[i].callback != callback)
 8000c64:	e010      	b.n	8000c88 <TimerCallbackRepetitionStart+0x3a>
    {
        if( i == timer->timerLastIndex)
 8000c66:	2317      	movs	r3, #23
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	68f9      	ldr	r1, [r7, #12]
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	58cb      	ldr	r3, [r1, r3]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d101      	bne.n	8000c7c <TimerCallbackRepetitionStart+0x2e>
        {
            return 1;// callback not found
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e041      	b.n	8000d00 <TimerCallbackRepetitionStart+0xb2>
        }
        i++;
 8000c7c:	2117      	movs	r1, #23
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
    while(timer->Instance[i].callback != callback)
 8000c88:	2017      	movs	r0, #23
 8000c8a:	183b      	adds	r3, r7, r0
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	0192      	lsls	r2, r2, #6
 8000c92:	58d3      	ldr	r3, [r2, r3]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d1e5      	bne.n	8000c66 <TimerCallbackRepetitionStart+0x18>
    };

    timer->Instance[i].timerRepetitionValue = repetition;
 8000c9a:	183b      	adds	r3, r7, r0
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	331c      	adds	r3, #28
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	601a      	str	r2, [r3, #0]
    timer->Instance[i].timerRepetitionTick = 0;
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	18d3      	adds	r3, r2, r3
 8000cb4:	3320      	adds	r3, #32
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
    timer->Instance[i].timerRepetitionEnable = true;
 8000cba:	183b      	adds	r3, r7, r0
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

    timer->Instance[i].timerValue = time;
 8000cca:	183b      	adds	r3, r7, r0
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	3334      	adds	r3, #52	@ 0x34
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
    timer->Instance[i].timerRepeat = true;
 8000cda:	183b      	adds	r3, r7, r0
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	213c      	movs	r1, #60	@ 0x3c
 8000ce2:	019b      	lsls	r3, r3, #6
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	185b      	adds	r3, r3, r1
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
    timer->Instance[i].timerEnabled = true;
 8000cec:	183b      	adds	r3, r7, r0
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	2131      	movs	r1, #49	@ 0x31
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	18d3      	adds	r3, r2, r3
 8000cf8:	185b      	adds	r3, r3, r1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]

    return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b006      	add	sp, #24
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <TimerCallbackTick>:
 * input: timer instance
 * output: n/a
 * return: n/a
 */
void TimerCallbackTick(TimerCallbackStruct *timer)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

	while(i != timer->timerLastIndex) // iterate through all arrays
 8000d14:	e053      	b.n	8000dbe <TimerCallbackTick+0xb6>
	{
        if (timer->Instance[i].callback != 0)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	0192      	lsls	r2, r2, #6
 8000d1c:	58d3      	ldr	r3, [r2, r3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d04a      	beq.n	8000db8 <TimerCallbackTick+0xb0>
        {
            if (timer->Instance[i].timerTimeoutEnable) // check if shutdown is enabled
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	019b      	lsls	r3, r3, #6
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	330c      	adds	r3, #12
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <TimerCallbackTick+0x44>
            {
                timer->Instance[i].timerTimeoutTick += 1; // increment the timerShutDownCount
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	3314      	adds	r3, #20
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	18cb      	adds	r3, r1, r3
 8000d48:	3314      	adds	r3, #20
 8000d4a:	601a      	str	r2, [r3, #0]
            }

            if (timer->Instance[i].timerEnabled) // check if callback is enabled.
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2131      	movs	r1, #49	@ 0x31
 8000d52:	019b      	lsls	r3, r3, #6
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	185b      	adds	r3, r3, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00d      	beq.n	8000d7a <TimerCallbackTick+0x72>
            {
            	timer->Instance[i].timerTick += 1; // increment the timerCount
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	019b      	lsls	r3, r3, #6
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	3338      	adds	r3, #56	@ 0x38
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	18cb      	adds	r3, r1, r3
 8000d74:	3338      	adds	r3, #56	@ 0x38
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e01e      	b.n	8000db8 <TimerCallbackTick+0xb0>
            }
            // added 7-14-2025
            else if (timer->Instance[i].timerEventCounterEnable) // check if InputCounter is enabled.
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2124      	movs	r1, #36	@ 0x24
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	18d3      	adds	r3, r2, r3
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d015      	beq.n	8000db8 <TimerCallbackTick+0xb0>
            {
            	if(timer->Instance[i].timerEventCounterTriggered)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2130      	movs	r1, #48	@ 0x30
 8000d92:	019b      	lsls	r3, r3, #6
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	185b      	adds	r3, r3, r1
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00c      	beq.n	8000db8 <TimerCallbackTick+0xb0>
            	{
            		timer->Instance[i].timerTick += 1; // increment the timerCount
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	18d3      	adds	r3, r2, r3
 8000da6:	3338      	adds	r3, #56	@ 0x38
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	18cb      	adds	r3, r1, r3
 8000db4:	3338      	adds	r3, #56	@ 0x38
 8000db6:	601a      	str	r2, [r3, #0]
            	}
            }
        }
		i++;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
	while(i != timer->timerLastIndex) // iterate through all arrays
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	58d2      	ldr	r2, [r2, r3]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d1a4      	bne.n	8000d16 <TimerCallbackTick+0xe>
	}
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <TimerCallbackPoll>:
 * input: timer instance
 * output: n/a
 * return: n/a
 */
void TimerCallbackPoll(TimerCallbackStruct *timer)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	int i = 0; // the array pointer
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]

	while(i != timer->timerLastIndex)
 8000de2:	e0ee      	b.n	8000fc2 <TimerCallbackPoll+0x1ec>
	{
	    if(timer->Instance[i].timerTimeoutEnable == 1) // check for shutdown first
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	330c      	adds	r3, #12
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d032      	beq.n	8000e5a <TimerCallbackPoll+0x84>
	    {
	        if(timer->Instance[i].timerTimeoutTick >= timer[i].Instance[i].timerTimeoutValue)
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	019b      	lsls	r3, r3, #6
 8000dfa:	18d3      	adds	r3, r2, r3
 8000dfc:	3314      	adds	r3, #20
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	0013      	movs	r3, r2
 8000e04:	01db      	lsls	r3, r3, #7
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	189a      	adds	r2, r3, r2
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	019b      	lsls	r3, r3, #6
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	3310      	adds	r3, #16
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d31d      	bcc.n	8000e5a <TimerCallbackPoll+0x84>
	        {
	        	timer->Instance[i].timerTimeoutTick = 0;
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	019b      	lsls	r3, r3, #6
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	3314      	adds	r3, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
	        	timer->Instance[i].timerEnabled = 0; // disable timer
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2131      	movs	r1, #49	@ 0x31
 8000e32:	019b      	lsls	r3, r3, #6
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	185b      	adds	r3, r3, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]

	        	if(timer->Instance[i].timerCallback2Enabled)// new 12-25-2022
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	18d3      	adds	r3, r2, r3
 8000e44:	3304      	adds	r3, #4
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <TimerCallbackPoll+0x84>
	        	{
	        		timer->Instance[i].callback2();// jump to secondary callback function
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	18d3      	adds	r3, r2, r3
 8000e54:	3308      	adds	r3, #8
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4798      	blx	r3
	        	}
	        }
	    }
	    // added 7-14-2025
	    if(timer->Instance[i].timerEventCounterEnable)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2124      	movs	r1, #36	@ 0x24
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	18d3      	adds	r3, r2, r3
 8000e64:	185b      	adds	r3, r3, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d022      	beq.n	8000eb2 <TimerCallbackPoll+0xdc>
	    {
	    	if(timer->Instance[i].timerTick >= timer->Instance[i].timerEventCounterTimeout)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	3338      	adds	r3, #56	@ 0x38
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	18cb      	adds	r3, r1, r3
 8000e80:	3328      	adds	r3, #40	@ 0x28
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d314      	bcc.n	8000eb2 <TimerCallbackPoll+0xdc>
	    	{
	    		timer->Instance[i].timerEventCounterEnable = 0;
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2124      	movs	r1, #36	@ 0x24
 8000e8e:	019b      	lsls	r3, r3, #6
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	185b      	adds	r3, r3, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	    		timer->Instance[i].timerEventCounterTriggered = 0;
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2130      	movs	r1, #48	@ 0x30
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	185b      	adds	r3, r3, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
	    		timer->Instance[i].callback();
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	0192      	lsls	r2, r2, #6
 8000eae:	58d3      	ldr	r3, [r2, r3]
 8000eb0:	4798      	blx	r3
	    	}
	    }

		if(timer->Instance[i].timerEnabled) // timer or repetition is enabled
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2131      	movs	r1, #49	@ 0x31
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	18d3      	adds	r3, r2, r3
 8000ebc:	185b      	adds	r3, r3, r1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d100      	bne.n	8000ec6 <TimerCallbackPoll+0xf0>
 8000ec4:	e07a      	b.n	8000fbc <TimerCallbackPoll+0x1e6>
		{
			if(timer->Instance[i].timerTick >= timer->Instance[i].timerValue)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	019b      	lsls	r3, r3, #6
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	3338      	adds	r3, #56	@ 0x38
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	019b      	lsls	r3, r3, #6
 8000ed8:	18cb      	adds	r3, r1, r3
 8000eda:	3334      	adds	r3, #52	@ 0x34
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d36c      	bcc.n	8000fbc <TimerCallbackPoll+0x1e6>
			{
				timer->Instance[i].timerTick = 0;// clear timer
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	019b      	lsls	r3, r3, #6
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	3338      	adds	r3, #56	@ 0x38
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
				timer->Instance[i].callback();// jump to callback function
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	58d3      	ldr	r3, [r2, r3]
 8000ef8:	4798      	blx	r3
				if(timer->Instance[i].timerRepetitionEnable) // new 4-27-2022
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	3318      	adds	r3, #24
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d031      	beq.n	8000f6e <TimerCallbackPoll+0x198>
				{
				    if(++timer->Instance[i].timerRepetitionTick >= timer->Instance[i].timerRepetitionValue)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	019b      	lsls	r3, r3, #6
 8000f10:	18d3      	adds	r3, r2, r3
 8000f12:	3320      	adds	r3, #32
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	18cb      	adds	r3, r1, r3
 8000f20:	3320      	adds	r3, #32
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	18d3      	adds	r3, r2, r3
 8000f2c:	3320      	adds	r3, #32
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	18cb      	adds	r3, r1, r3
 8000f38:	331c      	adds	r3, #28
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d316      	bcc.n	8000f6e <TimerCallbackPoll+0x198>
				    {
				        timer->Instance[i].timerEnabled = 0; // disable timer
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2131      	movs	r1, #49	@ 0x31
 8000f46:	019b      	lsls	r3, r3, #6
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	185b      	adds	r3, r3, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

				        if(timer->Instance[i].timerCallback2Enabled) // new 12-25-2022
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	18d3      	adds	r3, r2, r3
 8000f58:	3304      	adds	r3, #4
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <TimerCallbackPoll+0x198>
						{
							timer->Instance[i].callback2();// jump to secondary callback function
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4798      	blx	r3
						}
				    }
				}
				if(timer->Instance[i].timerRepeat == TIMER_NO_REPEAT) // if no repeat then disable timer for this function
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	213c      	movs	r1, #60	@ 0x3c
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	18d3      	adds	r3, r2, r3
 8000f78:	185b      	adds	r3, r3, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4053      	eors	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <TimerCallbackPoll+0x1de>
				{
					timer->Instance[i].timerEnabled = 0; // disable timer
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2131      	movs	r1, #49	@ 0x31
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	18d3      	adds	r3, r2, r3
 8000f90:	185b      	adds	r3, r3, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

					if(timer->Instance[i].timerCallback2Enabled)// new 12-25-2022
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	019b      	lsls	r3, r3, #6
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <TimerCallbackPoll+0x1de>
					{
						timer->Instance[i].callback2();// jump to secondary callback function
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	019b      	lsls	r3, r3, #6
 8000fac:	18d3      	adds	r3, r2, r3
 8000fae:	3308      	adds	r3, #8
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4798      	blx	r3
					}
				}
				i++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
				return;// A callback function has been called so exit and re-enter at next array pointer. This avoids blocking.
 8000fba:	e00c      	b.n	8000fd6 <TimerCallbackPoll+0x200>
			}
		}
		i++; // iterate until no more array.
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
	while(i != timer->timerLastIndex)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	58d2      	ldr	r2, [r2, r3]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d000      	beq.n	8000fd2 <TimerCallbackPoll+0x1fc>
 8000fd0:	e708      	b.n	8000de4 <TimerCallbackPoll+0xe>
	}
	i = 0;// resets to beginning of array
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
}
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <USB_SendMessage>:



// poll this to check if usb data is available to send
int USB_SendMessage(USB_MsgStruct *msg)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint8_t USB_Status = USBD_OK;
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

	if(msg->txPtr.cnt_Handle) // send available message
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <USB_SendMessage+0x60>
	{
		USB_Status = CDC_Transmit_FS(msg->txQueue[msg->txPtr.index_OUT].Byte.data, ID_AND_SIZE_LENGTH + msg->txQueue[msg->txPtr.index_OUT].Status.size);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	0018      	movs	r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	78db      	ldrb	r3, [r3, #3]
 8001010:	3304      	adds	r3, #4
 8001012:	b29b      	uxth	r3, r3
 8001014:	000d      	movs	r5, r1
 8001016:	187c      	adds	r4, r7, r1
 8001018:	0019      	movs	r1, r3
 800101a:	f008 f9ab 	bl	8009374 <CDC_Transmit_FS>
 800101e:	0003      	movs	r3, r0
 8001020:	7023      	strb	r3, [r4, #0]
		if (USB_Status == USBD_OK) // make sure data was sent before incrementing pointer
 8001022:	197b      	adds	r3, r7, r5
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <USB_SendMessage+0x60>
		{
			RingBuff_Ptr_Output(&msg->txPtr, msg->txQueueSize); // increment output buffer ptr
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3328      	adds	r3, #40	@ 0x28
 800102e:	001a      	movs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	0019      	movs	r1, r3
 8001036:	0010      	movs	r0, r2
 8001038:	f7ff fd67 	bl	8000b0a <RingBuff_Ptr_Output>
		}
	}
	return msg->txPtr.cnt_Handle; // if no more message to handle then 0 will be returned
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bdb0      	pop	{r4, r5, r7, pc}

08001048 <USB_AddTxBuffer>:

// adds data to USB Tx buffer
void USB_AddTxBuffer(USB_MsgStruct *msg, USB_Data_t *data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]

	memset(&msg->txQueue[msg->txPtr.index_IN], 0, sizeof(msg->txQueue[msg->txPtr.index_IN]));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1a      	ldr	r2, [r3, #32]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	0052      	lsls	r2, r2, #1
 8001066:	2100      	movs	r1, #0
 8001068:	0018      	movs	r0, r3
 800106a:	f008 fe5f 	bl	8009d2c <memset>
	for(i = 0; i < (ID_AND_SIZE_LENGTH + data->Status.size); i++)
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e010      	b.n	8001096 <USB_AddTxBuffer+0x4e>
	{
		msg->txQueue[msg->txPtr.index_IN].Byte.data[i] = data->Byte.data[i];
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	18cb      	adds	r3, r1, r3
 8001086:	7819      	ldrb	r1, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	1c0a      	adds	r2, r1, #0
 800108e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < (ID_AND_SIZE_LENGTH + data->Status.size); i++)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	3303      	adds	r3, #3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dde8      	ble.n	8001074 <USB_AddTxBuffer+0x2c>
	}
	msg->txQueue[msg->txPtr.index_IN].Status.size = data->Status.size;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1a      	ldr	r2, [r3, #32]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	78d2      	ldrb	r2, [r2, #3]
 80010b2:	70da      	strb	r2, [r3, #3]
	RingBuff_Ptr_Input(&msg->txPtr, msg->txQueueSize);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3328      	adds	r3, #40	@ 0x28
 80010b8:	001a      	movs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010be:	0019      	movs	r1, r3
 80010c0:	0010      	movs	r0, r2
 80010c2:	f7ff fcdf 	bl	8000a84 <RingBuff_Ptr_Input>
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}

080010ce <USB_AddRxBuffer>:

// add data to USB Rx buffer
void USB_AddRxBuffer(USB_MsgStruct *msg, uint8_t *data, uint32_t size)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

	memset(&msg->rxQueue[msg->rxPtr.index_IN], 0, sizeof(msg->rxQueue[msg->rxPtr.index_IN]));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	2280      	movs	r2, #128	@ 0x80
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f008 fe1b 	bl	8009d2c <memset>
	for(i = 0; i < size; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e010      	b.n	800111e <USB_AddRxBuffer+0x50>
	{
		msg->rxQueue[msg->rxPtr.index_IN].Byte.data[i] = data[i];
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	18d1      	adds	r1, r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	18d2      	adds	r2, r2, r3
 800110e:	7809      	ldrb	r1, [r1, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	18d3      	adds	r3, r2, r3
 8001114:	1c0a      	adds	r2, r1, #0
 8001116:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < size; i++)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	d8ea      	bhi.n	80010fc <USB_AddRxBuffer+0x2e>
	}

	msg->rxQueue[msg->rxPtr.index_IN].Status.size = size;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	70da      	strb	r2, [r3, #3]

	RingBuff_Ptr_Input(&msg->rxPtr, msg->rxQueueSize);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	330c      	adds	r3, #12
 800113c:	001a      	movs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	0019      	movs	r1, r3
 8001144:	0010      	movs	r0, r2
 8001146:	f7ff fc9d 	bl	8000a84 <RingBuff_Ptr_Input>
}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b006      	add	sp, #24
 8001150:	bd80      	pop	{r7, pc}

08001152 <USB_DataAvailable>:
 * Check for USB Rx message
 * Input data: pointer to array to save data from Rx buffer
 * Output return 1 if data available, 0 if no data
 */
uint8_t USB_DataAvailable(USB_MsgStruct *msg)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	if(msg->rxPtr.cnt_Handle)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d012      	beq.n	8001188 <USB_DataAvailable+0x36>
	{
		msg->msgToParse = &msg->rxQueue[msg->rxPtr.index_OUT];
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	18d2      	adds	r2, r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	605a      	str	r2, [r3, #4]
		RingBuff_Ptr_Output(&msg->rxPtr, msg->rxQueueSize);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	330c      	adds	r3, #12
 8001176:	001a      	movs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0019      	movs	r1, r3
 800117e:	0010      	movs	r0, r2
 8001180:	f7ff fcc3 	bl	8000b0a <RingBuff_Ptr_Output>
		return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <USB_DataAvailable+0x38>
	}

	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <USB_to_CAN_Send>:
 * Input can msg: which CAN message to add data to
 * Input data: The USB data
 * Output none
 */
void USB_to_CAN_Send(CAN_MsgStruct *msg, uint8_t *data)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	UsbCanStruct usbCanStruct = {0};
 800119e:	2408      	movs	r4, #8
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	0018      	movs	r0, r3
 80011a4:	2314      	movs	r3, #20
 80011a6:	001a      	movs	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	f008 fdbf 	bl	8009d2c <memset>
	CanTxMsgTypeDef *ptr;

	ptr = &msg->txQueue[msg->txPtr.index_IN];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	61fb      	str	r3, [r7, #28]

	// copy usb data to CAN structure
	memcpy(&usbCanStruct.array.data, data, CAN_DATA_SIZE);
 80011bc:	193a      	adds	r2, r7, r4
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	0010      	movs	r0, r2
 80011c2:	0019      	movs	r1, r3
 80011c4:	2311      	movs	r3, #17
 80011c6:	001a      	movs	r2, r3
 80011c8:	f008 fde4 	bl	8009d94 <memcpy>

	ptr->header.IDE = usbCanStruct.msgBytes.IDE;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	001a      	movs	r2, r3
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	609a      	str	r2, [r3, #8]

	if(usbCanStruct.msgBytes.IDE == CAN_ID_STD)
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <USB_to_CAN_Send+0x54>
	{
		ptr->header.StdId = usbCanStruct.msgBytes.ArbId;
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e004      	b.n	80011f2 <USB_to_CAN_Send+0x5e>
	}
	else
	{
		ptr->header.ExtId = usbCanStruct.msgBytes.ArbId;
 80011e8:	2308      	movs	r3, #8
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	605a      	str	r2, [r3, #4]
	}
	ptr->header.RTR = usbCanStruct.msgBytes.RTR;// RTR
 80011f2:	2008      	movs	r0, #8
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	07db      	lsls	r3, r3, #31
 80011fa:	0fdb      	lsrs	r3, r3, #31
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	001a      	movs	r2, r3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	60da      	str	r2, [r3, #12]
	ptr->header.DLC = usbCanStruct.msgBytes.DLC;//
 8001204:	183b      	adds	r3, r7, r0
 8001206:	7a1b      	ldrb	r3, [r3, #8]
 8001208:	001a      	movs	r2, r3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]

	memcpy(&ptr->data, &usbCanStruct.dataBytes.array, 8);
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3318      	adds	r3, #24
 8001212:	0019      	movs	r1, r3
 8001214:	183b      	adds	r3, r7, r0
 8001216:	2209      	movs	r2, #9
 8001218:	0008      	movs	r0, r1
 800121a:	189b      	adds	r3, r3, r2
 800121c:	2208      	movs	r2, #8
 800121e:	0019      	movs	r1, r3
 8001220:	f008 fdb8 	bl	8009d94 <memcpy>
	RingBuff_Ptr_Input(&msg->txPtr, msg->txQueueSize);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3330      	adds	r3, #48	@ 0x30
 8001228:	001a      	movs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122e:	0019      	movs	r1, r3
 8001230:	0010      	movs	r0, r2
 8001232:	f7ff fc27 	bl	8000a84 <RingBuff_Ptr_Input>

	CAN_SendMessage(&can_msg); // try sending
 8001236:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <USB_to_CAN_Send+0xb4>)
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff f803 	bl	8000244 <CAN_SendMessage>
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b009      	add	sp, #36	@ 0x24
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	20000008 	.word	0x20000008

0800124c <CAN_to_USB_Send>:

// just the opposite, copy CAN to USB data
void CAN_to_USB_Send(CAN_MsgStruct *msg, uint8_t node)
{
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b0c9      	sub	sp, #292	@ 0x124
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	000a      	movs	r2, r1
 8001256:	4b4c      	ldr	r3, [pc, #304]	@ (8001388 <CAN_to_USB_Send+0x13c>)
 8001258:	2590      	movs	r5, #144	@ 0x90
 800125a:	006d      	lsls	r5, r5, #1
 800125c:	195b      	adds	r3, r3, r5
 800125e:	19db      	adds	r3, r3, r7
 8001260:	701a      	strb	r2, [r3, #0]
	UsbCanStruct usbCanStruct = {0};
 8001262:	2484      	movs	r4, #132	@ 0x84
 8001264:	0064      	lsls	r4, r4, #1
 8001266:	193b      	adds	r3, r7, r4
 8001268:	0018      	movs	r0, r3
 800126a:	2314      	movs	r3, #20
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f008 fd5c 	bl	8009d2c <memset>
	USB_Data_t usbMsgTemp = {0};
 8001274:	4b45      	ldr	r3, [pc, #276]	@ (800138c <CAN_to_USB_Send+0x140>)
 8001276:	195b      	adds	r3, r3, r5
 8001278:	19db      	adds	r3, r3, r7
 800127a:	0018      	movs	r0, r3
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	001a      	movs	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	f008 fd52 	bl	8009d2c <memset>
	CanRxMsgTypeDef *ptr = msg->msgToParse;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	218e      	movs	r1, #142	@ 0x8e
 800128e:	0049      	lsls	r1, r1, #1
 8001290:	187a      	adds	r2, r7, r1
 8001292:	6013      	str	r3, [r2, #0]

	// convert PC message to CAN structure
	usbCanStruct.msgBytes.IDE = ptr->header.IDE & 0x0F;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	220f      	movs	r2, #15
 800129e:	4013      	ands	r3, r2
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	701a      	strb	r2, [r3, #0]

	if(usbCanStruct.msgBytes.IDE == CAN_STD_ID)
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <CAN_to_USB_Send+0x6e>
	{
		usbCanStruct.msgBytes.ArbId = ptr->header.StdId;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	e008      	b.n	80012cc <CAN_to_USB_Send+0x80>
	}
	else
	{
		usbCanStruct.msgBytes.ArbId = ptr->header.ExtId;
 80012ba:	238e      	movs	r3, #142	@ 0x8e
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	2384      	movs	r3, #132	@ 0x84
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	605a      	str	r2, [r3, #4]
	}

	usbCanStruct.msgBytes.RTR = ptr->header.RTR & 0x0F;
 80012cc:	268e      	movs	r6, #142	@ 0x8e
 80012ce:	0076      	lsls	r6, r6, #1
 80012d0:	19bb      	adds	r3, r7, r6
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	1c1a      	adds	r2, r3, #0
 80012d8:	2301      	movs	r3, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	2484      	movs	r4, #132	@ 0x84
 80012e0:	0064      	lsls	r4, r4, #1
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2101      	movs	r1, #1
 80012e6:	400a      	ands	r2, r1
 80012e8:	0010      	movs	r0, r2
 80012ea:	785a      	ldrb	r2, [r3, #1]
 80012ec:	2101      	movs	r1, #1
 80012ee:	438a      	bics	r2, r1
 80012f0:	1c11      	adds	r1, r2, #0
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	430a      	orrs	r2, r1
 80012f6:	705a      	strb	r2, [r3, #1]
	usbCanStruct.msgBytes.Node = node;
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <CAN_to_USB_Send+0x13c>)
 80012fa:	2590      	movs	r5, #144	@ 0x90
 80012fc:	006d      	lsls	r5, r5, #1
 80012fe:	195b      	adds	r3, r3, r5
 8001300:	19db      	adds	r3, r3, r7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	220f      	movs	r2, #15
 8001306:	4013      	ands	r3, r2
 8001308:	b2da      	uxtb	r2, r3
 800130a:	193b      	adds	r3, r7, r4
 800130c:	210f      	movs	r1, #15
 800130e:	400a      	ands	r2, r1
 8001310:	0010      	movs	r0, r2
 8001312:	789a      	ldrb	r2, [r3, #2]
 8001314:	210f      	movs	r1, #15
 8001316:	438a      	bics	r2, r1
 8001318:	1c11      	adds	r1, r2, #0
 800131a:	1c02      	adds	r2, r0, #0
 800131c:	430a      	orrs	r2, r1
 800131e:	709a      	strb	r2, [r3, #2]
	usbCanStruct.msgBytes.DLC = ptr->header.DLC & 0x0F;
 8001320:	19bb      	adds	r3, r7, r6
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	220f      	movs	r2, #15
 800132a:	4013      	ands	r3, r2
 800132c:	b2da      	uxtb	r2, r3
 800132e:	193b      	adds	r3, r7, r4
 8001330:	721a      	strb	r2, [r3, #8]

	memcpy(&usbCanStruct.dataBytes.array, ptr->data, 8);
 8001332:	19bb      	adds	r3, r7, r6
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	331c      	adds	r3, #28
 8001338:	0019      	movs	r1, r3
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2209      	movs	r2, #9
 800133e:	189b      	adds	r3, r3, r2
 8001340:	2208      	movs	r2, #8
 8001342:	0018      	movs	r0, r3
 8001344:	f008 fd26 	bl	8009d94 <memcpy>

	// copy CAN message structure to USB message structure
	usbMsgTemp.Status.id = CMD_MESSAGE;
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <CAN_to_USB_Send+0x140>)
 800134a:	195b      	adds	r3, r3, r5
 800134c:	19db      	adds	r3, r3, r7
 800134e:	2280      	movs	r2, #128	@ 0x80
 8001350:	701a      	strb	r2, [r3, #0]
	usbMsgTemp.Status.size = CAN_DATA_SIZE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <CAN_to_USB_Send+0x140>)
 8001354:	195b      	adds	r3, r3, r5
 8001356:	19db      	adds	r3, r3, r7
 8001358:	2211      	movs	r2, #17
 800135a:	70da      	strb	r2, [r3, #3]
	memcpy(&usbMsgTemp.Status.data, &usbCanStruct.array.data, CAN_DATA_SIZE);
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <CAN_to_USB_Send+0x140>)
 800135e:	195b      	adds	r3, r3, r5
 8001360:	19db      	adds	r3, r3, r7
 8001362:	193a      	adds	r2, r7, r4
 8001364:	3304      	adds	r3, #4
 8001366:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001368:	c313      	stmia	r3!, {r0, r1, r4}
 800136a:	6811      	ldr	r1, [r2, #0]
 800136c:	6019      	str	r1, [r3, #0]
 800136e:	7912      	ldrb	r2, [r2, #4]
 8001370:	711a      	strb	r2, [r3, #4]

	USB_AddTxBuffer(&usb_msg, &usbMsgTemp);
 8001372:	2308      	movs	r3, #8
 8001374:	18fa      	adds	r2, r7, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <CAN_to_USB_Send+0x144>)
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fe64 	bl	8001048 <USB_AddTxBuffer>
}
 8001380:	46c0      	nop			@ (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b049      	add	sp, #292	@ 0x124
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	fffffee3 	.word	0xfffffee3
 800138c:	fffffee8 	.word	0xfffffee8
 8001390:	2000004c 	.word	0x2000004c

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f000 fa52 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f80b 	bl	80013b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f000 f8a8 	bl	80014f4 <MX_GPIO_Init>
  MX_CAN_Init();
 80013a4:	f000 f86e 	bl	8001484 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 80013a8:	f007 ff56 	bl	8009258 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PollingInit();
 80013ac:	f7ff f94c 	bl	8000648 <PollingInit>
  while (1)
  {
	  PollingRoutine();
 80013b0:	f7ff f984 	bl	80006bc <PollingRoutine>
 80013b4:	e7fc      	b.n	80013b0 <main+0x1c>

080013b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b099      	sub	sp, #100	@ 0x64
 80013ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013bc:	242c      	movs	r4, #44	@ 0x2c
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	0018      	movs	r0, r3
 80013c2:	2334      	movs	r3, #52	@ 0x34
 80013c4:	001a      	movs	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f008 fcb0 	bl	8009d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	231c      	movs	r3, #28
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	0018      	movs	r0, r3
 80013d2:	2310      	movs	r3, #16
 80013d4:	001a      	movs	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f008 fca8 	bl	8009d2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	003b      	movs	r3, r7
 80013de:	0018      	movs	r0, r3
 80013e0:	231c      	movs	r3, #28
 80013e2:	001a      	movs	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f008 fca1 	bl	8009d2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80013ea:	0021      	movs	r1, r4
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2222      	movs	r2, #34	@ 0x22
 80013f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2201      	movs	r2, #1
 80013fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2210      	movs	r2, #16
 8001402:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2202      	movs	r2, #2
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	0212      	lsls	r2, r2, #8
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	0352      	lsls	r2, r2, #13
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	187b      	adds	r3, r7, r1
 8001422:	0018      	movs	r0, r3
 8001424:	f003 fb24 	bl	8004a70 <HAL_RCC_OscConfig>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800142c:	f000 f8c4 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	211c      	movs	r1, #28
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2202      	movs	r2, #2
 800143c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2101      	movs	r1, #1
 800144e:	0018      	movs	r0, r3
 8001450:	f003 fe94 	bl	800517c <HAL_RCC_ClockConfig>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001458:	f000 f8ae 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800145c:	003b      	movs	r3, r7
 800145e:	2280      	movs	r2, #128	@ 0x80
 8001460:	0292      	lsls	r2, r2, #10
 8001462:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001464:	003b      	movs	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	003b      	movs	r3, r7
 800146c:	0018      	movs	r0, r3
 800146e:	f003 fff1 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001476:	f000 f89f 	bl	80015b8 <Error_Handler>
  }
}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b019      	add	sp, #100	@ 0x64
 8001480:	bd90      	pop	{r4, r7, pc}
	...

08001484 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_CAN_Init+0x68>)
 800148a:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <MX_CAN_Init+0x6c>)
 800148c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_CAN_Init+0x68>)
 8001490:	2206      	movs	r2, #6
 8001492:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_CAN_Init+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_CAN_Init+0x68>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_CAN_Init+0x68>)
 80014a2:	2290      	movs	r2, #144	@ 0x90
 80014a4:	0312      	lsls	r2, r2, #12
 80014a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_CAN_Init+0x68>)
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	03d2      	lsls	r2, r2, #15
 80014ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_CAN_Init+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <MX_CAN_Init+0x68>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_CAN_Init+0x68>)
 80014be:	2200      	movs	r2, #0
 80014c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <MX_CAN_Init+0x68>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_CAN_Init+0x68>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <MX_CAN_Init+0x68>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <MX_CAN_Init+0x68>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 fa16 	bl	8001908 <HAL_CAN_Init>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014e0:	f000 f86a 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	20001ec0 	.word	0x20001ec0
 80014f0:	40006400 	.word	0x40006400

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	240c      	movs	r4, #12
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	0018      	movs	r0, r3
 8001500:	2314      	movs	r3, #20
 8001502:	001a      	movs	r2, r3
 8001504:	2100      	movs	r1, #0
 8001506:	f008 fc11 	bl	8009d2c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0289      	lsls	r1, r1, #10
 8001514:	430a      	orrs	r2, r1
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	02c9      	lsls	r1, r1, #11
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <MX_GPIO_Init+0xbc>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	02db      	lsls	r3, r3, #11
 800153c:	4013      	ands	r3, r2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001542:	2390      	movs	r3, #144	@ 0x90
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	2200      	movs	r2, #0
 8001548:	2103      	movs	r1, #3
 800154a:	0018      	movs	r0, r3
 800154c:	f001 fc16 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B0_Pin|LED_B1_Pin, GPIO_PIN_RESET);
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <MX_GPIO_Init+0xc0>)
 8001552:	2200      	movs	r2, #0
 8001554:	2103      	movs	r1, #3
 8001556:	0018      	movs	r0, r3
 8001558:	f001 fc10 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin;
 800155c:	193b      	adds	r3, r7, r4
 800155e:	2203      	movs	r2, #3
 8001560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	2201      	movs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	193b      	adds	r3, r7, r4
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	193b      	adds	r3, r7, r4
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	193a      	adds	r2, r7, r4
 8001576:	2390      	movs	r3, #144	@ 0x90
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f001 f9ad 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B0_Pin LED_B1_Pin */
  GPIO_InitStruct.Pin = LED_B0_Pin|LED_B1_Pin;
 8001582:	0021      	movs	r1, r4
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2203      	movs	r2, #3
 8001588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2201      	movs	r2, #1
 800158e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	187b      	adds	r3, r7, r1
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <MX_GPIO_Init+0xc0>)
 80015a0:	0019      	movs	r1, r3
 80015a2:	0010      	movs	r0, r2
 80015a4:	f001 f99a 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b009      	add	sp, #36	@ 0x24
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	e7fd      	b.n	80015c0 <Error_Handler+0x8>

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x44>)
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_MspInit+0x44>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x44>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2201      	movs	r2, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x44>)
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_MspInit+0x44>)
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	0549      	lsls	r1, r1, #21
 80015ec:	430a      	orrs	r2, r1
 80015ee:	61da      	str	r2, [r3, #28]
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_MspInit+0x44>)
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	4013      	ands	r3, r2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08b      	sub	sp, #44	@ 0x2c
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	2414      	movs	r4, #20
 8001616:	193b      	adds	r3, r7, r4
 8001618:	0018      	movs	r0, r3
 800161a:	2314      	movs	r3, #20
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f008 fb84 	bl	8009d2c <memset>
  if(hcan->Instance==CAN)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_CAN_MspInit+0xa0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d13a      	bne.n	80016a4 <HAL_CAN_MspInit+0x98>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	0489      	lsls	r1, r1, #18
 8001638:	430a      	orrs	r2, r1
 800163a:	61da      	str	r2, [r3, #28]
 800163c:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	049b      	lsls	r3, r3, #18
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	02c9      	lsls	r1, r1, #11
 8001654:	430a      	orrs	r2, r1
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_CAN_MspInit+0xa4>)
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	02db      	lsls	r3, r3, #11
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	22c0      	movs	r2, #192	@ 0xc0
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	0021      	movs	r1, r4
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2202      	movs	r2, #2
 8001674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2203      	movs	r2, #3
 8001680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2204      	movs	r2, #4
 8001686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	187b      	adds	r3, r7, r1
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_CAN_MspInit+0xa8>)
 800168c:	0019      	movs	r1, r3
 800168e:	0010      	movs	r0, r2
 8001690:	f001 f924 	bl	80028dc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	201e      	movs	r0, #30
 800169a:	f001 f8dd 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800169e:	201e      	movs	r0, #30
 80016a0:	f001 f8ef 	bl	8002882 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80016a4:	46c0      	nop			@ (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b00b      	add	sp, #44	@ 0x2c
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	40006400 	.word	0x40006400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000400 	.word	0x48000400

080016b8 <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_CAN_MspDeInit+0x3c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10f      	bne.n	80016ea <HAL_CAN_MspDeInit+0x32>
  {
    /* USER CODE BEGIN CAN_MspDeInit 0 */

    /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80016ca:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_CAN_MspDeInit+0x40>)
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_CAN_MspDeInit+0x40>)
 80016d0:	490a      	ldr	r1, [pc, #40]	@ (80016fc <HAL_CAN_MspDeInit+0x44>)
 80016d2:	400a      	ands	r2, r1
 80016d4:	61da      	str	r2, [r3, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80016d6:	23c0      	movs	r3, #192	@ 0xc0
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_CAN_MspDeInit+0x48>)
 80016dc:	0019      	movs	r1, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	f001 fa74 	bl	8002bcc <HAL_GPIO_DeInit>

    /* CAN interrupt DeInit */
    HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 80016e4:	201e      	movs	r0, #30
 80016e6:	f001 f8dc 	bl	80028a2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN_MspDeInit 1 */

    /* USER CODE END CAN_MspDeInit 1 */
  }

}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	40006400 	.word	0x40006400
 80016f8:	40021000 	.word	0x40021000
 80016fc:	fdffffff 	.word	0xfdffffff
 8001700:	48000400 	.word	0x48000400

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8d0 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TimerCallbackTick(&timerCallback);
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <SysTick_Handler+0x18>)
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff fae8 	bl	8000d08 <TimerCallbackTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	20001cbc 	.word	0x20001cbc

08001744 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <CEC_CAN_IRQHandler+0x14>)
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fdaa 	bl	80022a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	20001ec0 	.word	0x20001ec0

0800175c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <USB_IRQHandler+0x14>)
 8001762:	0018      	movs	r0, r3
 8001764:	f001 fc5c 	bl	8003020 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	20002bb8 	.word	0x20002bb8

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f008 faca 	bl	8009d3c <__errno>
 80017a8:	0003      	movs	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	425b      	negs	r3, r3
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	18d2      	adds	r2, r2, r3
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <_sbrk+0x64>)
 80017c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b006      	add	sp, #24
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20004000 	.word	0x20004000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20001ee8 	.word	0x20001ee8
 80017dc:	20003200 	.word	0x20003200

080017e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f0:	f7ff fff6 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	@ (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	@ (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800181a:	f008 fa95 	bl	8009d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff fdb9 	bl	8001394 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001830:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 8001834:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001838:	200031fc 	.word	0x200031fc

0800183c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_COMP_IRQHandler>
	...

08001840 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_Init+0x24>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_Init+0x24>)
 800184a:	2110      	movs	r1, #16
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f809 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001856:	f7ff feb5 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_InitTick+0x5c>)
 8001872:	681c      	ldr	r4, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_InitTick+0x60>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	0019      	movs	r1, r3
 800187a:	23fa      	movs	r3, #250	@ 0xfa
 800187c:	0098      	lsls	r0, r3, #2
 800187e:	f7fe fc55 	bl	800012c <__udivsi3>
 8001882:	0003      	movs	r3, r0
 8001884:	0019      	movs	r1, r3
 8001886:	0020      	movs	r0, r4
 8001888:	f7fe fc50 	bl	800012c <__udivsi3>
 800188c:	0003      	movs	r3, r0
 800188e:	0018      	movs	r0, r3
 8001890:	f001 f817 	bl	80028c2 <HAL_SYSTICK_Config>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e00f      	b.n	80018bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d80b      	bhi.n	80018ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	2301      	movs	r3, #1
 80018a6:	425b      	negs	r3, r3
 80018a8:	2200      	movs	r2, #0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 ffd4 	bl	8002858 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_InitTick+0x64>)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b003      	add	sp, #12
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	20000088 	.word	0x20000088
 80018c8:	20000090 	.word	0x20000090
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	001a      	movs	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	18d2      	adds	r2, r2, r3
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_IncTick+0x20>)
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	20000090 	.word	0x20000090
 80018f0:	20001eec 	.word	0x20001eec

080018f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	20001eec 	.word	0x20001eec

08001908 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0f0      	b.n	8001afc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2220      	movs	r2, #32
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fe6f 	bl	800160c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193e:	f7ff ffd9 	bl	80018f4 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001946:	e013      	b.n	8001970 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001948:	f7ff ffd4 	bl	80018f4 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d90c      	bls.n	8001970 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	0292      	lsls	r2, r2, #10
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	2105      	movs	r1, #5
 800196a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0c5      	b.n	8001afc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d0e5      	beq.n	8001948 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2102      	movs	r1, #2
 8001988:	438a      	bics	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff ffb2 	bl	80018f4 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001994:	e013      	b.n	80019be <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001996:	f7ff ffad 	bl	80018f4 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b0a      	cmp	r3, #10
 80019a2:	d90c      	bls.n	80019be <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	0292      	lsls	r2, r2, #10
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	2105      	movs	r1, #5
 80019b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e09e      	b.n	8001afc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1e5      	bne.n	8001996 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e1b      	ldrb	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2180      	movs	r1, #128	@ 0x80
 80019f0:	438a      	bics	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e5b      	ldrb	r3, [r3, #25]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2140      	movs	r1, #64	@ 0x40
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2140      	movs	r1, #64	@ 0x40
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7e9b      	ldrb	r3, [r3, #26]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2120      	movs	r1, #32
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2120      	movs	r1, #32
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7edb      	ldrb	r3, [r3, #27]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2108      	movs	r1, #8
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e007      	b.n	8001a9c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2108      	movs	r1, #8
 8001a98:	438a      	bics	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7f5b      	ldrb	r3, [r3, #29]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2104      	movs	r1, #4
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e007      	b.n	8001ac6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	0011      	movs	r1, r2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e018      	b.n	8001b48 <HAL_CAN_DeInit+0x44>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 f951 	bl	8001dc0 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fdc9 	bl	80016b8 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2180      	movs	r1, #128	@ 0x80
 8001b32:	0209      	lsls	r1, r1, #8
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b60:	2013      	movs	r0, #19
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	2120      	movs	r1, #32
 8001b68:	5c52      	ldrb	r2, [r2, r1]
 8001b6a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	18bb      	adds	r3, r7, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d004      	beq.n	8001b80 <HAL_CAN_ConfigFilter+0x30>
 8001b76:	18bb      	adds	r3, r7, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d000      	beq.n	8001b80 <HAL_CAN_ConfigFilter+0x30>
 8001b7e:	e0cd      	b.n	8001d1c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	58d3      	ldr	r3, [r2, r3]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	2387      	movs	r3, #135	@ 0x87
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	58d3      	ldr	r3, [r2, r3]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	2387      	movs	r3, #135	@ 0x87
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d129      	bne.n	8001c1a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	2383      	movs	r3, #131	@ 0x83
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	58d3      	ldr	r3, [r2, r3]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	43d2      	mvns	r2, r2
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	2383      	movs	r3, #131	@ 0x83
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bf0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3248      	adds	r2, #72	@ 0x48
 8001bf6:	00d2      	lsls	r2, r2, #3
 8001bf8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	3348      	adds	r3, #72	@ 0x48
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	18cb      	adds	r3, r1, r3
 8001c16:	3304      	adds	r3, #4
 8001c18:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d128      	bne.n	8001c74 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	2383      	movs	r3, #131	@ 0x83
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	58d2      	ldr	r2, [r2, r3]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	0011      	movs	r1, r2
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	2383      	movs	r3, #131	@ 0x83
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c4a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3248      	adds	r2, #72	@ 0x48
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	3348      	adds	r3, #72	@ 0x48
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	18cb      	adds	r3, r1, r3
 8001c70:	3304      	adds	r3, #4
 8001c72:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10c      	bne.n	8001c96 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	2381      	movs	r3, #129	@ 0x81
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	58d3      	ldr	r3, [r2, r3]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	43d2      	mvns	r2, r2
 8001c88:	401a      	ands	r2, r3
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	2381      	movs	r3, #129	@ 0x81
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	50d1      	str	r1, [r2, r3]
 8001c94:	e00a      	b.n	8001cac <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	2381      	movs	r3, #129	@ 0x81
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	58d2      	ldr	r2, [r2, r3]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	2381      	movs	r3, #129	@ 0x81
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10c      	bne.n	8001cce <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	2385      	movs	r3, #133	@ 0x85
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	58d3      	ldr	r3, [r2, r3]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	43d2      	mvns	r2, r2
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	2385      	movs	r3, #133	@ 0x85
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	50d1      	str	r1, [r2, r3]
 8001ccc:	e00a      	b.n	8001ce4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	2385      	movs	r3, #133	@ 0x85
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	58d2      	ldr	r2, [r2, r3]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	0011      	movs	r1, r2
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	2385      	movs	r3, #133	@ 0x85
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10a      	bne.n	8001d02 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	2387      	movs	r3, #135	@ 0x87
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	58d2      	ldr	r2, [r2, r3]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	2387      	movs	r3, #135	@ 0x87
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	58d3      	ldr	r3, [r2, r3]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e007      	b.n	8001d2c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	02d2      	lsls	r2, r2, #11
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
  }
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b006      	add	sp, #24
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	5c9b      	ldrb	r3, [r3, r2]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d12f      	bne.n	8001da8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fdc8 	bl	80018f4 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d68:	e013      	b.n	8001d92 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d6a:	f7ff fdc3 	bl	80018f4 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b0a      	cmp	r3, #10
 8001d76:	d90c      	bls.n	8001d92 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	2280      	movs	r2, #128	@ 0x80
 8001d7e:	0292      	lsls	r2, r2, #10
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	2105      	movs	r1, #5
 8001d8c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e012      	b.n	8001db8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1e5      	bne.n	8001d6a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e007      	b.n	8001db8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	0312      	lsls	r2, r2, #12
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
  }
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	5c9b      	ldrb	r3, [r3, r2]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d134      	bne.n	8001e3e <HAL_CAN_Stop+0x7e>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff fd86 	bl	80018f4 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dec:	e013      	b.n	8001e16 <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dee:	f7ff fd81 	bl	80018f4 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d90c      	bls.n	8001e16 <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2280      	movs	r2, #128	@ 0x80
 8001e02:	0292      	lsls	r2, r2, #10
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	2105      	movs	r1, #5
 8001e10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e01b      	b.n	8001e4e <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0e5      	beq.n	8001dee <HAL_CAN_Stop+0x2e>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	438a      	bics	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e007      	b.n	8001e4e <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	0352      	lsls	r2, r2, #13
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
  }
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b004      	add	sp, #16
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b088      	sub	sp, #32
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e64:	201f      	movs	r0, #31
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	2120      	movs	r1, #32
 8001e6c:	5c52      	ldrb	r2, [r2, r1]
 8001e6e:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d004      	beq.n	8001e8a <HAL_CAN_AddTxMessage+0x34>
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d000      	beq.n	8001e8a <HAL_CAN_AddTxMessage+0x34>
 8001e88:	e0ab      	b.n	8001fe2 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	04db      	lsls	r3, r3, #19
 8001e90:	4013      	ands	r3, r2
 8001e92:	d10a      	bne.n	8001eaa <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	051b      	lsls	r3, r3, #20
 8001e9a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e9c:	d105      	bne.n	8001eaa <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ea6:	d100      	bne.n	8001eaa <HAL_CAN_AddTxMessage+0x54>
 8001ea8:	e092      	b.n	8001fd0 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	0e1b      	lsrs	r3, r3, #24
 8001eae:	2203      	movs	r2, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	3218      	adds	r2, #24
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	50d1      	str	r1, [r2, r3]
 8001ede:	e00f      	b.n	8001f00 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eea:	431a      	orrs	r2, r3
 8001eec:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001ef6:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	3218      	adds	r2, #24
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3318      	adds	r3, #24
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	18cb      	adds	r3, r1, r3
 8001f10:	3304      	adds	r3, #4
 8001f12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	7d1b      	ldrb	r3, [r3, #20]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d112      	bne.n	8001f42 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3318      	adds	r3, #24
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	18d3      	adds	r3, r2, r3
 8001f28:	3304      	adds	r3, #4
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3318      	adds	r3, #24
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	18cb      	adds	r3, r1, r3
 8001f3e:	3304      	adds	r3, #4
 8001f40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3307      	adds	r3, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	061a      	lsls	r2, r3, #24
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3306      	adds	r3, #6
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3305      	adds	r3, #5
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	0019      	movs	r1, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	23c6      	movs	r3, #198	@ 0xc6
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	0109      	lsls	r1, r1, #4
 8001f74:	1841      	adds	r1, r0, r1
 8001f76:	18cb      	adds	r3, r1, r3
 8001f78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3303      	adds	r3, #3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	061a      	lsls	r2, r3, #24
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3302      	adds	r3, #2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	23c4      	movs	r3, #196	@ 0xc4
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	0109      	lsls	r1, r1, #4
 8001faa:	1841      	adds	r1, r0, r1
 8001fac:	18cb      	adds	r3, r1, r3
 8001fae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	3218      	adds	r2, #24
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	58d2      	ldr	r2, [r2, r3]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	3218      	adds	r2, #24
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e010      	b.n	8001ff2 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	0392      	lsls	r2, r2, #14
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	02d2      	lsls	r2, r2, #11
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
  }
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b008      	add	sp, #32
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002008:	2017      	movs	r0, #23
 800200a:	183b      	adds	r3, r7, r0
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	2120      	movs	r1, #32
 8002010:	5c52      	ldrb	r2, [r2, r1]
 8002012:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002014:	0002      	movs	r2, r0
 8002016:	18bb      	adds	r3, r7, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d004      	beq.n	8002028 <HAL_CAN_GetRxMessage+0x2e>
 800201e:	18bb      	adds	r3, r7, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d000      	beq.n	8002028 <HAL_CAN_GetRxMessage+0x2e>
 8002026:	e107      	b.n	8002238 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	d117      	bne.n	800206a <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	0392      	lsls	r2, r2, #14
 8002042:	431a      	orrs	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0fd      	b.n	8002248 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2203      	movs	r2, #3
 8002054:	4013      	ands	r3, r2
 8002056:	d108      	bne.n	800206a <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	0392      	lsls	r2, r2, #14
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0ee      	b.n	8002248 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	321b      	adds	r2, #27
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	58d3      	ldr	r3, [r2, r3]
 8002076:	2204      	movs	r2, #4
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	321b      	adds	r2, #27
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	58d3      	ldr	r3, [r2, r3]
 8002092:	0d5b      	lsrs	r3, r3, #21
 8002094:	055b      	lsls	r3, r3, #21
 8002096:	0d5a      	lsrs	r2, r3, #21
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e00a      	b.n	80020b4 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	321b      	adds	r2, #27
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	58d3      	ldr	r3, [r2, r3]
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	321b      	adds	r2, #27
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	58d3      	ldr	r3, [r2, r3]
 80020c0:	2202      	movs	r2, #2
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	331b      	adds	r3, #27
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	18d3      	adds	r3, r2, r3
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	4013      	ands	r3, r2
 80020dc:	d003      	beq.n	80020e6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	e00b      	b.n	80020fe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	331b      	adds	r3, #27
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	18d3      	adds	r3, r2, r3
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	220f      	movs	r2, #15
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	331b      	adds	r3, #27
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	22ff      	movs	r2, #255	@ 0xff
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	331b      	adds	r3, #27
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	18d3      	adds	r3, r2, r3
 8002124:	3304      	adds	r3, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	0c1a      	lsrs	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	23dc      	movs	r3, #220	@ 0xdc
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	188a      	adds	r2, r1, r2
 8002140:	18d3      	adds	r3, r2, r3
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	23dc      	movs	r3, #220	@ 0xdc
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	188a      	adds	r2, r1, r2
 8002158:	18d3      	adds	r3, r2, r3
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0a1a      	lsrs	r2, r3, #8
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	23dc      	movs	r3, #220	@ 0xdc
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	188a      	adds	r2, r1, r2
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0c1a      	lsrs	r2, r3, #16
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3302      	adds	r3, #2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	23dc      	movs	r3, #220	@ 0xdc
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	188a      	adds	r2, r1, r2
 8002190:	18d3      	adds	r3, r2, r3
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0e1a      	lsrs	r2, r3, #24
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3303      	adds	r3, #3
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	23de      	movs	r3, #222	@ 0xde
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	188a      	adds	r2, r1, r2
 80021ac:	18d3      	adds	r3, r2, r3
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3304      	adds	r3, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	23de      	movs	r3, #222	@ 0xde
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	188a      	adds	r2, r1, r2
 80021c6:	18d3      	adds	r3, r2, r3
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0a1a      	lsrs	r2, r3, #8
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3305      	adds	r3, #5
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	23de      	movs	r3, #222	@ 0xde
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	188a      	adds	r2, r1, r2
 80021e2:	18d3      	adds	r3, r2, r3
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0c1a      	lsrs	r2, r3, #16
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3306      	adds	r3, #6
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	23de      	movs	r3, #222	@ 0xde
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	188a      	adds	r2, r1, r2
 80021fe:	18d3      	adds	r3, r2, r3
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e1a      	lsrs	r2, r3, #24
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	3307      	adds	r3, #7
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2120      	movs	r1, #32
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	e007      	b.n	8002234 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2120      	movs	r1, #32
 8002230:	430a      	orrs	r2, r1
 8002232:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e007      	b.n	8002248 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	2280      	movs	r2, #128	@ 0x80
 800223e:	02d2      	lsls	r2, r2, #11
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
  }
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b006      	add	sp, #24
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800225a:	200f      	movs	r0, #15
 800225c:	183b      	adds	r3, r7, r0
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	2120      	movs	r1, #32
 8002262:	5c52      	ldrb	r2, [r2, r1]
 8002264:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002266:	0002      	movs	r2, r0
 8002268:	18bb      	adds	r3, r7, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d003      	beq.n	8002278 <HAL_CAN_ActivateNotification+0x28>
 8002270:	18bb      	adds	r3, r7, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d109      	bne.n	800228c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6959      	ldr	r1, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e007      	b.n	800229c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	02d2      	lsls	r2, r2, #11
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
  }
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b004      	add	sp, #16
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d100      	bne.n	80022ea <HAL_CAN_IRQHandler+0x46>
 80022e8:	e084      	b.n	80023f4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	d024      	beq.n	800233c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe f981 	bl	800060c <HAL_CAN_TxMailbox0CompleteCallback>
 800230a:	e017      	b.n	800233c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d005      	beq.n	8002320 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	4313      	orrs	r3, r2
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	e00d      	b.n	800233c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2208      	movs	r2, #8
 8002324:	4013      	ands	r3, r2
 8002326:	d005      	beq.n	8002334 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	0152      	lsls	r2, r2, #5
 800232e:	4313      	orrs	r3, r2
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	e003      	b.n	800233c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f978 	bl	800262c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d028      	beq.n	8002398 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2280      	movs	r2, #128	@ 0x80
 800234c:	0052      	lsls	r2, r2, #1
 800234e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f955 	bl	800260c <HAL_CAN_TxMailbox1CompleteCallback>
 8002362:	e019      	b.n	8002398 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4013      	ands	r3, r2
 800236c:	d005      	beq.n	800237a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	2280      	movs	r2, #128	@ 0x80
 8002372:	0192      	lsls	r2, r2, #6
 8002374:	4313      	orrs	r3, r2
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
 8002378:	e00e      	b.n	8002398 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4013      	ands	r3, r2
 8002382:	d005      	beq.n	8002390 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	2280      	movs	r2, #128	@ 0x80
 8002388:	01d2      	lsls	r2, r2, #7
 800238a:	4313      	orrs	r3, r2
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	e003      	b.n	8002398 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f952 	bl	800263c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	025b      	lsls	r3, r3, #9
 800239e:	4013      	ands	r3, r2
 80023a0:	d028      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	0252      	lsls	r2, r2, #9
 80023aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4013      	ands	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f92f 	bl	800261c <HAL_CAN_TxMailbox2CompleteCallback>
 80023be:	e019      	b.n	80023f4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	2380      	movs	r3, #128	@ 0x80
 80023c4:	02db      	lsls	r3, r3, #11
 80023c6:	4013      	ands	r3, r2
 80023c8:	d005      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	2280      	movs	r2, #128	@ 0x80
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	e00e      	b.n	80023f4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	031b      	lsls	r3, r3, #12
 80023dc:	4013      	ands	r3, r2
 80023de:	d005      	beq.n	80023ec <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	2280      	movs	r2, #128	@ 0x80
 80023e4:	0252      	lsls	r2, r2, #9
 80023e6:	4313      	orrs	r3, r2
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ea:	e003      	b.n	80023f4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f92c 	bl	800264c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	2208      	movs	r2, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00c      	beq.n	8002416 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2210      	movs	r2, #16
 8002400:	4013      	ands	r3, r2
 8002402:	d008      	beq.n	8002416 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4313      	orrs	r3, r2
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2210      	movs	r2, #16
 8002414:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2204      	movs	r2, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d00b      	beq.n	8002436 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2208      	movs	r2, #8
 8002422:	4013      	ands	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2208      	movs	r2, #8
 800242c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f913 	bl	800265c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2203      	movs	r2, #3
 8002446:	4013      	ands	r3, r2
 8002448:	d003      	beq.n	8002452 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe f8a1 	bl	8000594 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2240      	movs	r2, #64	@ 0x40
 8002456:	4013      	ands	r3, r2
 8002458:	d00c      	beq.n	8002474 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2210      	movs	r2, #16
 800245e:	4013      	ands	r3, r2
 8002460:	d008      	beq.n	8002474 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	00d2      	lsls	r2, r2, #3
 8002468:	4313      	orrs	r3, r2
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2220      	movs	r2, #32
 8002478:	4013      	ands	r3, r2
 800247a:	d00b      	beq.n	8002494 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2208      	movs	r2, #8
 8002480:	4013      	ands	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f8f4 	bl	800267c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2210      	movs	r2, #16
 8002498:	4013      	ands	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2203      	movs	r2, #3
 80024a4:	4013      	ands	r3, r2
 80024a6:	d003      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 f8de 	bl	800266c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2210      	movs	r2, #16
 80024c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f8dd 	bl	800268c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	4013      	ands	r3, r2
 80024da:	d00b      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2208      	movs	r2, #8
 80024e0:	4013      	ands	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2208      	movs	r2, #8
 80024ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f8d4 	bl	800269c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	4013      	ands	r3, r2
 80024fc:	d100      	bne.n	8002500 <HAL_CAN_IRQHandler+0x25c>
 80024fe:	e074      	b.n	80025ea <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2204      	movs	r2, #4
 8002504:	4013      	ands	r3, r2
 8002506:	d100      	bne.n	800250a <HAL_CAN_IRQHandler+0x266>
 8002508:	e06b      	b.n	80025e2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800250a:	6a3a      	ldr	r2, [r7, #32]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d007      	beq.n	8002524 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800251a:	d003      	beq.n	8002524 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	2201      	movs	r2, #1
 8002520:	4313      	orrs	r3, r2
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002534:	d003      	beq.n	800253e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2202      	movs	r2, #2
 800253a:	4313      	orrs	r3, r2
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4013      	ands	r3, r2
 8002546:	d007      	beq.n	8002558 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2204      	movs	r2, #4
 800254c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800254e:	d003      	beq.n	8002558 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	2204      	movs	r2, #4
 8002554:	4313      	orrs	r3, r2
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002558:	6a3a      	ldr	r2, [r7, #32]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d03f      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2270      	movs	r2, #112	@ 0x70
 8002566:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002568:	d03b      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2270      	movs	r2, #112	@ 0x70
 800256e:	4013      	ands	r3, r2
 8002570:	2b60      	cmp	r3, #96	@ 0x60
 8002572:	d027      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x320>
 8002574:	d82c      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x32c>
 8002576:	2b50      	cmp	r3, #80	@ 0x50
 8002578:	d01f      	beq.n	80025ba <HAL_CAN_IRQHandler+0x316>
 800257a:	d829      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x32c>
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d017      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x30c>
 8002580:	d826      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x32c>
 8002582:	2b30      	cmp	r3, #48	@ 0x30
 8002584:	d00f      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x302>
 8002586:	d823      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x32c>
 8002588:	2b10      	cmp	r3, #16
 800258a:	d002      	beq.n	8002592 <HAL_CAN_IRQHandler+0x2ee>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d005      	beq.n	800259c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002590:	e01e      	b.n	80025d0 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	2208      	movs	r2, #8
 8002596:	4313      	orrs	r3, r2
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800259a:	e01a      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	2210      	movs	r2, #16
 80025a0:	4313      	orrs	r3, r2
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025a4:	e015      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	2220      	movs	r2, #32
 80025aa:	4313      	orrs	r3, r2
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ae:	e010      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	4313      	orrs	r3, r2
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025b8:	e00b      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	4313      	orrs	r3, r2
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c2:	e006      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	0052      	lsls	r2, r2, #1
 80025ca:	4313      	orrs	r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ce:	e000      	b.n	80025d2 <HAL_CAN_IRQHandler+0x32e>
            break;
 80025d0:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2170      	movs	r1, #112	@ 0x70
 80025de:	438a      	bics	r2, r1
 80025e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2204      	movs	r2, #4
 80025e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f854 	bl	80026ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b00a      	add	sp, #40	@ 0x28
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	0002      	movs	r2, r0
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80026ce:	d809      	bhi.n	80026e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	001a      	movs	r2, r3
 80026d6:	231f      	movs	r3, #31
 80026d8:	401a      	ands	r2, r3
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <__NVIC_EnableIRQ+0x30>)
 80026dc:	2101      	movs	r1, #1
 80026de:	4091      	lsls	r1, r2
 80026e0:	000a      	movs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
  }
}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	0002      	movs	r2, r0
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b7f      	cmp	r3, #127	@ 0x7f
 8002702:	d810      	bhi.n	8002726 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	001a      	movs	r2, r3
 800270a:	231f      	movs	r3, #31
 800270c:	4013      	ands	r3, r2
 800270e:	4908      	ldr	r1, [pc, #32]	@ (8002730 <__NVIC_DisableIRQ+0x40>)
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	0013      	movs	r3, r2
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800271a:	f3bf 8f4f 	dsb	sy
}
 800271e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002720:	f3bf 8f6f 	isb	sy
}
 8002724:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	0002      	movs	r2, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b7f      	cmp	r3, #127	@ 0x7f
 8002748:	d828      	bhi.n	800279c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800274a:	4a2f      	ldr	r2, [pc, #188]	@ (8002808 <__NVIC_SetPriority+0xd4>)
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b25b      	sxtb	r3, r3
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	33c0      	adds	r3, #192	@ 0xc0
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	589b      	ldr	r3, [r3, r2]
 800275a:	1dfa      	adds	r2, r7, #7
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	0011      	movs	r1, r2
 8002760:	2203      	movs	r2, #3
 8002762:	400a      	ands	r2, r1
 8002764:	00d2      	lsls	r2, r2, #3
 8002766:	21ff      	movs	r1, #255	@ 0xff
 8002768:	4091      	lsls	r1, r2
 800276a:	000a      	movs	r2, r1
 800276c:	43d2      	mvns	r2, r2
 800276e:	401a      	ands	r2, r3
 8002770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	22ff      	movs	r2, #255	@ 0xff
 8002778:	401a      	ands	r2, r3
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	2303      	movs	r3, #3
 8002782:	4003      	ands	r3, r0
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002788:	481f      	ldr	r0, [pc, #124]	@ (8002808 <__NVIC_SetPriority+0xd4>)
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b25b      	sxtb	r3, r3
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	430a      	orrs	r2, r1
 8002794:	33c0      	adds	r3, #192	@ 0xc0
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800279a:	e031      	b.n	8002800 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	4a1b      	ldr	r2, [pc, #108]	@ (800280c <__NVIC_SetPriority+0xd8>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0019      	movs	r1, r3
 80027a4:	230f      	movs	r3, #15
 80027a6:	400b      	ands	r3, r1
 80027a8:	3b08      	subs	r3, #8
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3306      	adds	r3, #6
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	3304      	adds	r3, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1dfa      	adds	r2, r7, #7
 80027b8:	7812      	ldrb	r2, [r2, #0]
 80027ba:	0011      	movs	r1, r2
 80027bc:	2203      	movs	r2, #3
 80027be:	400a      	ands	r2, r1
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	21ff      	movs	r1, #255	@ 0xff
 80027c4:	4091      	lsls	r1, r2
 80027c6:	000a      	movs	r2, r1
 80027c8:	43d2      	mvns	r2, r2
 80027ca:	401a      	ands	r2, r3
 80027cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	401a      	ands	r2, r3
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	0018      	movs	r0, r3
 80027dc:	2303      	movs	r3, #3
 80027de:	4003      	ands	r3, r0
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e4:	4809      	ldr	r0, [pc, #36]	@ (800280c <__NVIC_SetPriority+0xd8>)
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	001c      	movs	r4, r3
 80027ec:	230f      	movs	r3, #15
 80027ee:	4023      	ands	r3, r4
 80027f0:	3b08      	subs	r3, #8
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	430a      	orrs	r2, r1
 80027f6:	3306      	adds	r3, #6
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	18c3      	adds	r3, r0, r3
 80027fc:	3304      	adds	r3, #4
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b003      	add	sp, #12
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	045b      	lsls	r3, r3, #17
 8002820:	429a      	cmp	r2, r3
 8002822:	d301      	bcc.n	8002828 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002824:	2301      	movs	r3, #1
 8002826:	e010      	b.n	800284a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002828:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <SysTick_Config+0x44>)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	3a01      	subs	r2, #1
 800282e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002830:	2301      	movs	r3, #1
 8002832:	425b      	negs	r3, r3
 8002834:	2103      	movs	r1, #3
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ff7c 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <SysTick_Config+0x44>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <SysTick_Config+0x44>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	210f      	movs	r1, #15
 8002864:	187b      	adds	r3, r7, r1
 8002866:	1c02      	adds	r2, r0, #0
 8002868:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	187b      	adds	r3, r7, r1
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	0011      	movs	r1, r2
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff ff5d 	bl	8002734 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	0002      	movs	r2, r0
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ff11 	bl	80026bc <__NVIC_EnableIRQ>
}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	0002      	movs	r2, r0
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff1b 	bl	80026f0 <__NVIC_DisableIRQ>
}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff ff9f 	bl	8002810 <SysTick_Config>
 80028d2:	0003      	movs	r3, r0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ea:	e155      	b.n	8002b98 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4091      	lsls	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d100      	bne.n	8002904 <HAL_GPIO_Init+0x28>
 8002902:	e146      	b.n	8002b92 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	4013      	ands	r3, r2
 800290c:	2b01      	cmp	r3, #1
 800290e:	d005      	beq.n	800291c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002918:	2b02      	cmp	r3, #2
 800291a:	d130      	bne.n	800297e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	409a      	lsls	r2, r3
 800292a:	0013      	movs	r3, r2
 800292c:	43da      	mvns	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	409a      	lsls	r2, r3
 800293e:	0013      	movs	r3, r2
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002952:	2201      	movs	r2, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	43da      	mvns	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	2201      	movs	r2, #1
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
 8002970:	0013      	movs	r3, r2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2203      	movs	r2, #3
 8002984:	4013      	ands	r3, r2
 8002986:	2b03      	cmp	r3, #3
 8002988:	d017      	beq.n	80029ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	43da      	mvns	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	0013      	movs	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d123      	bne.n	8002a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	08da      	lsrs	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3208      	adds	r2, #8
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	58d3      	ldr	r3, [r2, r3]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2207      	movs	r2, #7
 80029d8:	4013      	ands	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	409a      	lsls	r2, r3
 80029e0:	0013      	movs	r3, r2
 80029e2:	43da      	mvns	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2107      	movs	r1, #7
 80029f2:	400b      	ands	r3, r1
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	409a      	lsls	r2, r3
 80029f8:	0013      	movs	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	6939      	ldr	r1, [r7, #16]
 8002a0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	409a      	lsls	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	23c0      	movs	r3, #192	@ 0xc0
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d100      	bne.n	8002a50 <HAL_GPIO_Init+0x174>
 8002a4e:	e0a0      	b.n	8002b92 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a50:	4b57      	ldr	r3, [pc, #348]	@ (8002bb0 <HAL_GPIO_Init+0x2d4>)
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <HAL_GPIO_Init+0x2d4>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	619a      	str	r2, [r3, #24]
 8002a5c:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <HAL_GPIO_Init+0x2d4>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_GPIO_Init+0x2d8>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	220f      	movs	r2, #15
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	43da      	mvns	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	2390      	movs	r3, #144	@ 0x90
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a47      	ldr	r2, [pc, #284]	@ (8002bb8 <HAL_GPIO_Init+0x2dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x1ea>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a46      	ldr	r2, [pc, #280]	@ (8002bbc <HAL_GPIO_Init+0x2e0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x1e6>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a45      	ldr	r2, [pc, #276]	@ (8002bc0 <HAL_GPIO_Init+0x2e4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x1e2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a44      	ldr	r2, [pc, #272]	@ (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x1de>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x1f0>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x1f0>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x1f0>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x1f0>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x1f0>
 8002aca:	2300      	movs	r3, #0
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	2103      	movs	r1, #3
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_GPIO_Init+0x2d8>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b37      	ldr	r3, [pc, #220]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	035b      	lsls	r3, r3, #13
 8002b02:	4013      	ands	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b14:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	029b      	lsls	r3, r3, #10
 8002b56:	4013      	ands	r3, r2
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	025b      	lsls	r3, r3, #9
 8002b80:	4013      	ands	r3, r2
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	1e13      	subs	r3, r2, #0
 8002ba2:	d000      	beq.n	8002ba6 <HAL_GPIO_Init+0x2ca>
 8002ba4:	e6a2      	b.n	80028ec <HAL_GPIO_Init+0x10>
  } 
}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b006      	add	sp, #24
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000c00 	.word	0x48000c00
 8002bc4:	48001000 	.word	0x48001000
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002bda:	e0b7      	b.n	8002d4c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	409a      	lsls	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <HAL_GPIO_DeInit+0x24>
 8002bee:	e0aa      	b.n	8002d46 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002bf0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d64 <HAL_GPIO_DeInit+0x198>)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	589b      	ldr	r3, [r3, r2]
 8002bfc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4013      	ands	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	2390      	movs	r3, #144	@ 0x90
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_DeInit+0x82>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	@ (8002d68 <HAL_GPIO_DeInit+0x19c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_DeInit+0x7e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a51      	ldr	r2, [pc, #324]	@ (8002d6c <HAL_GPIO_DeInit+0x1a0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_DeInit+0x7a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	@ (8002d70 <HAL_GPIO_DeInit+0x1a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_DeInit+0x76>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4f      	ldr	r2, [pc, #316]	@ (8002d74 <HAL_GPIO_DeInit+0x1a8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_DeInit+0x72>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_DeInit+0x84>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_DeInit+0x84>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_DeInit+0x84>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_DeInit+0x84>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_DeInit+0x84>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	2103      	movs	r1, #3
 8002c54:	400a      	ands	r2, r1
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d132      	bne.n	8002cc6 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c60:	4b45      	ldr	r3, [pc, #276]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43d9      	mvns	r1, r3
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43d9      	mvns	r1, r3
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_GPIO_DeInit+0x1ac>)
 8002c94:	400a      	ands	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_GPIO_DeInit+0x198>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	589a      	ldr	r2, [r3, r2]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	482a      	ldr	r0, [pc, #168]	@ (8002d64 <HAL_GPIO_DeInit+0x198>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	0052      	lsls	r2, r2, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	4091      	lsls	r1, r2
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	43d2      	mvns	r2, r2
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	58d3      	ldr	r3, [r2, r3]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	2107      	movs	r1, #7
 8002cec:	400a      	ands	r2, r1
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	210f      	movs	r1, #15
 8002cf2:	4091      	lsls	r1, r2
 8002cf4:	000a      	movs	r2, r1
 8002cf6:	43d1      	mvns	r1, r2
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	08d2      	lsrs	r2, r2, #3
 8002cfc:	4019      	ands	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	2103      	movs	r1, #3
 8002d10:	4091      	lsls	r1, r2
 8002d12:	000a      	movs	r2, r1
 8002d14:	43d2      	mvns	r2, r2
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2101      	movs	r1, #1
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4091      	lsls	r1, r2
 8002d26:	000a      	movs	r2, r1
 8002d28:	43d2      	mvns	r2, r2
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	0052      	lsls	r2, r2, #1
 8002d38:	2103      	movs	r1, #3
 8002d3a:	4091      	lsls	r1, r2
 8002d3c:	000a      	movs	r2, r1
 8002d3e:	43d2      	mvns	r2, r2
 8002d40:	401a      	ands	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	40da      	lsrs	r2, r3
 8002d52:	1e13      	subs	r3, r2, #0
 8002d54:	d000      	beq.n	8002d58 <HAL_GPIO_DeInit+0x18c>
 8002d56:	e741      	b.n	8002bdc <HAL_GPIO_DeInit+0x10>
  }
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	48001000 	.word	0x48001000
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	0008      	movs	r0, r1
 8002d86:	0011      	movs	r1, r2
 8002d88:	1cbb      	adds	r3, r7, #2
 8002d8a:	1c02      	adds	r2, r0, #0
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	1c7b      	adds	r3, r7, #1
 8002d90:	1c0a      	adds	r2, r1, #0
 8002d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d94:	1c7b      	adds	r3, r7, #1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9c:	1cbb      	adds	r3, r7, #2
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da4:	e003      	b.n	8002dae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	1cbb      	adds	r3, r7, #2
 8002dc2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dca:	1cbb      	adds	r3, r7, #2
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	041a      	lsls	r2, r3, #16
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	1cb9      	adds	r1, r7, #2
 8002dda:	8809      	ldrh	r1, [r1, #0]
 8002ddc:	400b      	ands	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e4      	b.n	8002fc8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a73      	ldr	r2, [pc, #460]	@ (8002fd0 <HAL_PCD_Init+0x1e4>)
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	23a4      	movs	r3, #164	@ 0xa4
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	2100      	movs	r1, #0
 8002e12:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f006 fc0a 	bl	8009630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd0 <HAL_PCD_Init+0x1e4>)
 8002e20:	2103      	movs	r1, #3
 8002e22:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f002 fc27 	bl	800567c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	230f      	movs	r3, #15
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e047      	b.n	8002ec8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e38:	200f      	movs	r0, #15
 8002e3a:	183b      	adds	r3, r7, r0
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	0013      	movs	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	18cb      	adds	r3, r1, r3
 8002e4a:	3311      	adds	r3, #17
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e50:	183b      	adds	r3, r7, r0
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	0013      	movs	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	18cb      	adds	r3, r1, r3
 8002e60:	3310      	adds	r3, #16
 8002e62:	183a      	adds	r2, r7, r0
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e68:	183b      	adds	r3, r7, r0
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	0013      	movs	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	18cb      	adds	r3, r1, r3
 8002e78:	3313      	adds	r3, #19
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	0013      	movs	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	189b      	adds	r3, r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	18cb      	adds	r3, r1, r3
 8002e8e:	3320      	adds	r3, #32
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	18cb      	adds	r3, r1, r3
 8002ea4:	3324      	adds	r3, #36	@ 0x24
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eaa:	183b      	adds	r3, r7, r0
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	2200      	movs	r2, #0
 8002ebc:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	210f      	movs	r1, #15
 8002ece:	187a      	adds	r2, r7, r1
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3b0      	bcc.n	8002e38 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e056      	b.n	8002f8c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ede:	240f      	movs	r4, #15
 8002ee0:	193b      	adds	r3, r7, r4
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	2352      	movs	r3, #82	@ 0x52
 8002ee8:	33ff      	adds	r3, #255	@ 0xff
 8002eea:	0019      	movs	r1, r3
 8002eec:	0013      	movs	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	18c3      	adds	r3, r0, r3
 8002ef6:	185b      	adds	r3, r3, r1
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	23a8      	movs	r3, #168	@ 0xa8
 8002f04:	0059      	lsls	r1, r3, #1
 8002f06:	0013      	movs	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	18c3      	adds	r3, r0, r3
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	193a      	adds	r2, r7, r4
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	2354      	movs	r3, #84	@ 0x54
 8002f20:	33ff      	adds	r3, #255	@ 0xff
 8002f22:	0019      	movs	r1, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	18c3      	adds	r3, r0, r3
 8002f2e:	185b      	adds	r3, r3, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	23b0      	movs	r3, #176	@ 0xb0
 8002f3c:	0059      	lsls	r1, r3, #1
 8002f3e:	0013      	movs	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	18c3      	adds	r3, r0, r3
 8002f48:	185b      	adds	r3, r3, r1
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	23b2      	movs	r3, #178	@ 0xb2
 8002f56:	0059      	lsls	r1, r3, #1
 8002f58:	0013      	movs	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	18c3      	adds	r3, r0, r3
 8002f62:	185b      	adds	r3, r3, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	23b4      	movs	r3, #180	@ 0xb4
 8002f70:	0059      	lsls	r1, r3, #1
 8002f72:	0013      	movs	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	18c3      	adds	r3, r0, r3
 8002f7c:	185b      	adds	r3, r3, r1
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	3201      	adds	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	791b      	ldrb	r3, [r3, #4]
 8002f90:	220f      	movs	r2, #15
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3a1      	bcc.n	8002ede <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	f002 fb84 	bl	80056b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_PCD_Init+0x1e4>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7a9b      	ldrb	r3, [r3, #10]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d103      	bne.n	8002fc6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f001 fd1f 	bl	8004a04 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b005      	add	sp, #20
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	00000291 	.word	0x00000291

08002fd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	23a4      	movs	r3, #164	@ 0xa4
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_Start+0x18>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e014      	b.n	8003016 <HAL_PCD_Start+0x42>
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	23a4      	movs	r3, #164	@ 0xa4
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f002 fb28 	bl	8005650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f004 fb1d 	bl	8007644 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	23a4      	movs	r3, #164	@ 0xa4
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	2100      	movs	r1, #0
 8003012:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f004 fb1f 	bl	8007670 <USB_ReadInterrupts>
 8003032:	0003      	movs	r3, r0
 8003034:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	4013      	ands	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fb60 	bl	8003708 <PCD_EP_ISR_Handler>

    return;
 8003048:	e11d      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4013      	ands	r3, r2
 8003052:	d015      	beq.n	8003080 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2244      	movs	r2, #68	@ 0x44
 800305a:	5a9b      	ldrh	r3, [r3, r2]
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	498a      	ldr	r1, [pc, #552]	@ (800328c <HAL_PCD_IRQHandler+0x26c>)
 8003064:	400a      	ands	r2, r1
 8003066:	b291      	uxth	r1, r2
 8003068:	2244      	movs	r2, #68	@ 0x44
 800306a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f006 fb69 	bl	8009746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2100      	movs	r1, #0
 8003078:	0018      	movs	r0, r3
 800307a:	f000 f915 	bl	80032a8 <HAL_PCD_SetAddress>

    return;
 800307e:	e102      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	01db      	lsls	r3, r3, #7
 8003086:	4013      	ands	r3, r2
 8003088:	d00c      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2244      	movs	r2, #68	@ 0x44
 8003090:	5a9b      	ldrh	r3, [r3, r2]
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	497d      	ldr	r1, [pc, #500]	@ (8003290 <HAL_PCD_IRQHandler+0x270>)
 800309a:	400a      	ands	r2, r1
 800309c:	b291      	uxth	r1, r2
 800309e:	2244      	movs	r2, #68	@ 0x44
 80030a0:	5299      	strh	r1, [r3, r2]

    return;
 80030a2:	e0f0      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00c      	beq.n	80030c8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2244      	movs	r2, #68	@ 0x44
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4975      	ldr	r1, [pc, #468]	@ (8003294 <HAL_PCD_IRQHandler+0x274>)
 80030be:	400a      	ands	r2, r1
 80030c0:	b291      	uxth	r1, r2
 80030c2:	2244      	movs	r2, #68	@ 0x44
 80030c4:	5299      	strh	r1, [r3, r2]

    return;
 80030c6:	e0de      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	015b      	lsls	r3, r3, #5
 80030ce:	4013      	ands	r3, r2
 80030d0:	d038      	beq.n	8003144 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2240      	movs	r2, #64	@ 0x40
 80030d8:	5a9b      	ldrh	r3, [r3, r2]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2104      	movs	r1, #4
 80030e2:	438a      	bics	r2, r1
 80030e4:	b291      	uxth	r1, r2
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2108      	movs	r1, #8
 80030fa:	438a      	bics	r2, r1
 80030fc:	b291      	uxth	r1, r2
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	23b2      	movs	r3, #178	@ 0xb2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d109      	bne.n	8003122 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	23b2      	movs	r3, #178	@ 0xb2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	2100      	movs	r1, #0
 8003116:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2100      	movs	r1, #0
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fc9b 	bl	8004a58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f006 fb4f 	bl	80097c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2244      	movs	r2, #68	@ 0x44
 8003130:	5a9b      	ldrh	r3, [r3, r2]
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4957      	ldr	r1, [pc, #348]	@ (8003298 <HAL_PCD_IRQHandler+0x278>)
 800313a:	400a      	ands	r2, r1
 800313c:	b291      	uxth	r1, r2
 800313e:	2244      	movs	r2, #68	@ 0x44
 8003140:	5299      	strh	r1, [r3, r2]

    return;
 8003142:	e0a0      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d028      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2240      	movs	r2, #64	@ 0x40
 8003154:	5a9b      	ldrh	r3, [r3, r2]
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2108      	movs	r1, #8
 800315e:	430a      	orrs	r2, r1
 8003160:	b291      	uxth	r1, r2
 8003162:	2240      	movs	r2, #64	@ 0x40
 8003164:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2244      	movs	r2, #68	@ 0x44
 800316c:	5a9b      	ldrh	r3, [r3, r2]
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4949      	ldr	r1, [pc, #292]	@ (800329c <HAL_PCD_IRQHandler+0x27c>)
 8003176:	400a      	ands	r2, r1
 8003178:	b291      	uxth	r1, r2
 800317a:	2244      	movs	r2, #68	@ 0x44
 800317c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	5a9b      	ldrh	r3, [r3, r2]
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2104      	movs	r1, #4
 800318e:	430a      	orrs	r2, r1
 8003190:	b291      	uxth	r1, r2
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f006 faf9 	bl	8009790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800319e:	e072      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	4013      	ands	r3, r2
 80031a6:	d046      	beq.n	8003236 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2244      	movs	r2, #68	@ 0x44
 80031ae:	5a9b      	ldrh	r3, [r3, r2]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	438a      	bics	r2, r1
 80031ba:	b291      	uxth	r1, r2
 80031bc:	2244      	movs	r2, #68	@ 0x44
 80031be:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	23b2      	movs	r3, #178	@ 0xb2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d12f      	bne.n	800322c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2240      	movs	r2, #64	@ 0x40
 80031d2:	5a9b      	ldrh	r3, [r3, r2]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2104      	movs	r1, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	b291      	uxth	r1, r2
 80031e0:	2240      	movs	r2, #64	@ 0x40
 80031e2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2240      	movs	r2, #64	@ 0x40
 80031ea:	5a9b      	ldrh	r3, [r3, r2]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2108      	movs	r1, #8
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b291      	uxth	r1, r2
 80031f8:	2240      	movs	r2, #64	@ 0x40
 80031fa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	23b2      	movs	r3, #178	@ 0xb2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	2101      	movs	r1, #1
 8003204:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2254      	movs	r2, #84	@ 0x54
 800320c:	5a9b      	ldrh	r3, [r3, r2]
 800320e:	b29b      	uxth	r3, r3
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	223c      	movs	r2, #60	@ 0x3c
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	23b3      	movs	r3, #179	@ 0xb3
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2101      	movs	r1, #1
 8003224:	0018      	movs	r0, r3
 8003226:	f001 fc17 	bl	8004a58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800322a:	e02c      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	0018      	movs	r0, r3
 8003230:	f006 faae 	bl	8009790 <HAL_PCD_SuspendCallback>
    return;
 8003234:	e027      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d010      	beq.n	8003262 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2244      	movs	r2, #68	@ 0x44
 8003246:	5a9b      	ldrh	r3, [r3, r2]
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4914      	ldr	r1, [pc, #80]	@ (80032a0 <HAL_PCD_IRQHandler+0x280>)
 8003250:	400a      	ands	r2, r1
 8003252:	b291      	uxth	r1, r2
 8003254:	2244      	movs	r2, #68	@ 0x44
 8003256:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0018      	movs	r0, r3
 800325c:	f006 fa64 	bl	8009728 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003260:	e011      	b.n	8003286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d00c      	beq.n	8003286 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2244      	movs	r2, #68	@ 0x44
 8003272:	5a9b      	ldrh	r3, [r3, r2]
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	490a      	ldr	r1, [pc, #40]	@ (80032a4 <HAL_PCD_IRQHandler+0x284>)
 800327c:	400a      	ands	r2, r1
 800327e:	b291      	uxth	r1, r2
 8003280:	2244      	movs	r2, #68	@ 0x44
 8003282:	5299      	strh	r1, [r3, r2]

    return;
 8003284:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	fffffbff 	.word	0xfffffbff
 8003290:	ffffbfff 	.word	0xffffbfff
 8003294:	ffffdfff 	.word	0xffffdfff
 8003298:	ffffefff 	.word	0xffffefff
 800329c:	fffff7ff 	.word	0xfffff7ff
 80032a0:	fffffdff 	.word	0xfffffdff
 80032a4:	fffffeff 	.word	0xfffffeff

080032a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	000a      	movs	r2, r1
 80032b2:	1cfb      	adds	r3, r7, #3
 80032b4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	23a4      	movs	r3, #164	@ 0xa4
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	5cd3      	ldrb	r3, [r2, r3]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_PCD_SetAddress+0x1e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e016      	b.n	80032f4 <HAL_PCD_SetAddress+0x4c>
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	23a4      	movs	r3, #164	@ 0xa4
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	2101      	movs	r1, #1
 80032ce:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1cfa      	adds	r2, r7, #3
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	1cfb      	adds	r3, r7, #3
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	0019      	movs	r1, r3
 80032e2:	0010      	movs	r0, r2
 80032e4:	f004 f99a 	bl	800761c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	23a4      	movs	r3, #164	@ 0xa4
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	2100      	movs	r1, #0
 80032f0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	000c      	movs	r4, r1
 8003306:	0010      	movs	r0, r2
 8003308:	0019      	movs	r1, r3
 800330a:	1cfb      	adds	r3, r7, #3
 800330c:	1c22      	adds	r2, r4, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	003b      	movs	r3, r7
 8003312:	1c02      	adds	r2, r0, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	1c0a      	adds	r2, r1, #0
 800331a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800331c:	230b      	movs	r3, #11
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003324:	1cfb      	adds	r3, r7, #3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b25b      	sxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0f      	bge.n	800334e <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332e:	1cfb      	adds	r3, r7, #3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2207      	movs	r2, #7
 8003334:	401a      	ands	r2, r3
 8003336:	0013      	movs	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	189b      	adds	r3, r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3310      	adds	r3, #16
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	18d3      	adds	r3, r2, r3
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
 800334c:	e00f      	b.n	800336e <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334e:	1cfb      	adds	r3, r7, #3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2207      	movs	r2, #7
 8003354:	401a      	ands	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	189b      	adds	r3, r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	3351      	adds	r3, #81	@ 0x51
 8003360:	33ff      	adds	r3, #255	@ 0xff
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2207      	movs	r2, #7
 8003374:	4013      	ands	r3, r2
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800337c:	003b      	movs	r3, r7
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1cba      	adds	r2, r7, #2
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800338c:	1cbb      	adds	r3, r7, #2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d102      	bne.n	800339a <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	23a4      	movs	r3, #164	@ 0xa4
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_EP_Open+0xae>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e013      	b.n	80033d2 <HAL_PCD_EP_Open+0xd6>
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	23a4      	movs	r3, #164	@ 0xa4
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	2101      	movs	r1, #1
 80033b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	0011      	movs	r1, r2
 80033bc:	0018      	movs	r0, r3
 80033be:	f002 f993 	bl	80056e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	23a4      	movs	r3, #164	@ 0xa4
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	2100      	movs	r1, #0
 80033ca:	54d1      	strb	r1, [r2, r3]

  return ret;
 80033cc:	230b      	movs	r3, #11
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b005      	add	sp, #20
 80033d8:	bd90      	pop	{r4, r7, pc}

080033da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	000a      	movs	r2, r1
 80033e4:	1cfb      	adds	r3, r7, #3
 80033e6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033e8:	1cfb      	adds	r3, r7, #3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da0f      	bge.n	8003412 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2207      	movs	r2, #7
 80033f8:	401a      	ands	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	3310      	adds	r3, #16
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	705a      	strb	r2, [r3, #1]
 8003410:	e00f      	b.n	8003432 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003412:	1cfb      	adds	r3, r7, #3
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2207      	movs	r2, #7
 8003418:	401a      	ands	r2, r3
 800341a:	0013      	movs	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	189b      	adds	r3, r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3351      	adds	r3, #81	@ 0x51
 8003424:	33ff      	adds	r3, #255	@ 0xff
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	1cfb      	adds	r3, r7, #3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2207      	movs	r2, #7
 8003438:	4013      	ands	r3, r2
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	23a4      	movs	r3, #164	@ 0xa4
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_PCD_EP_Close+0x76>
 800344c:	2302      	movs	r3, #2
 800344e:	e011      	b.n	8003474 <HAL_PCD_EP_Close+0x9a>
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	23a4      	movs	r3, #164	@ 0xa4
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	2101      	movs	r1, #1
 8003458:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f002 fce8 	bl	8005e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	23a4      	movs	r3, #164	@ 0xa4
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	2100      	movs	r1, #0
 8003470:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	200b      	movs	r0, #11
 800348a:	183b      	adds	r3, r7, r0
 800348c:	1c0a      	adds	r2, r1, #0
 800348e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	0001      	movs	r1, r0
 8003492:	187b      	adds	r3, r7, r1
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2207      	movs	r2, #7
 8003498:	401a      	ands	r2, r3
 800349a:	0013      	movs	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	3351      	adds	r3, #81	@ 0x51
 80034a4:	33ff      	adds	r3, #255	@ 0xff
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2207      	movs	r2, #7
 80034ca:	4013      	ands	r3, r2
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	0011      	movs	r1, r2
 80034da:	0018      	movs	r0, r3
 80034dc:	f002 fe6c 	bl	80061b8 <USB_EPStartXfer>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	000a      	movs	r2, r1
 80034f4:	1cfb      	adds	r3, r7, #3
 80034f6:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034f8:	1cfb      	adds	r3, r7, #3
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2207      	movs	r2, #7
 80034fe:	401a      	ands	r2, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	23b6      	movs	r3, #182	@ 0xb6
 8003504:	0059      	lsls	r1, r3, #1
 8003506:	0013      	movs	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	189b      	adds	r3, r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	18c3      	adds	r3, r0, r3
 8003510:	185b      	adds	r3, r3, r1
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	200b      	movs	r0, #11
 800352a:	183b      	adds	r3, r7, r0
 800352c:	1c0a      	adds	r2, r1, #0
 800352e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003530:	183b      	adds	r3, r7, r0
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2207      	movs	r2, #7
 8003536:	401a      	ands	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	189b      	adds	r3, r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	3310      	adds	r3, #16
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2224      	movs	r2, #36	@ 0x24
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2201      	movs	r2, #1
 800356c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356e:	183b      	adds	r3, r7, r0
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	b2da      	uxtb	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f002 fe17 	bl	80061b8 <USB_EPStartXfer>

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b006      	add	sp, #24
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	000a      	movs	r2, r1
 800359e:	1cfb      	adds	r3, r7, #3
 80035a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035a2:	1cfb      	adds	r3, r7, #3
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2207      	movs	r2, #7
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	7912      	ldrb	r2, [r2, #4]
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e046      	b.n	8003644 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b6:	1cfb      	adds	r3, r7, #3
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da0f      	bge.n	80035e0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	1cfb      	adds	r3, r7, #3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2207      	movs	r2, #7
 80035c6:	401a      	ands	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3310      	adds	r3, #16
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	705a      	strb	r2, [r3, #1]
 80035de:	e00d      	b.n	80035fc <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035e0:	1cfb      	adds	r3, r7, #3
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	0013      	movs	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	3351      	adds	r3, #81	@ 0x51
 80035ee:	33ff      	adds	r3, #255	@ 0xff
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	18d3      	adds	r3, r2, r3
 80035f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003602:	1cfb      	adds	r3, r7, #3
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	23a4      	movs	r3, #164	@ 0xa4
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_SetStall+0x8c>
 800361c:	2302      	movs	r3, #2
 800361e:	e011      	b.n	8003644 <HAL_PCD_EP_SetStall+0xb0>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	23a4      	movs	r3, #164	@ 0xa4
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	2101      	movs	r1, #1
 8003628:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f003 fef0 	bl	8007418 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	23a4      	movs	r3, #164	@ 0xa4
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	2100      	movs	r1, #0
 8003640:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	000a      	movs	r2, r1
 8003656:	1cfb      	adds	r3, r7, #3
 8003658:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800365a:	1cfb      	adds	r3, r7, #3
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	220f      	movs	r2, #15
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	7912      	ldrb	r2, [r2, #4]
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e048      	b.n	8003700 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800366e:	1cfb      	adds	r3, r7, #3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b25b      	sxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	da0f      	bge.n	8003698 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003678:	1cfb      	adds	r3, r7, #3
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2207      	movs	r2, #7
 800367e:	401a      	ands	r2, r3
 8003680:	0013      	movs	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	189b      	adds	r3, r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3310      	adds	r3, #16
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	705a      	strb	r2, [r3, #1]
 8003696:	e00f      	b.n	80036b8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003698:	1cfb      	adds	r3, r7, #3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2207      	movs	r2, #7
 800369e:	401a      	ands	r2, r3
 80036a0:	0013      	movs	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	3351      	adds	r3, #81	@ 0x51
 80036aa:	33ff      	adds	r3, #255	@ 0xff
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	18d3      	adds	r3, r2, r3
 80036b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036be:	1cfb      	adds	r3, r7, #3
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4013      	ands	r3, r2
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	23a4      	movs	r3, #164	@ 0xa4
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_PCD_EP_ClrStall+0x90>
 80036d8:	2302      	movs	r3, #2
 80036da:	e011      	b.n	8003700 <HAL_PCD_EP_ClrStall+0xb4>
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	23a4      	movs	r3, #164	@ 0xa4
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	2101      	movs	r1, #1
 80036e4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f003 fee2 	bl	80074b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	23a4      	movs	r3, #164	@ 0xa4
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	2100      	movs	r1, #0
 80036fc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}

08003708 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b096      	sub	sp, #88	@ 0x58
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003710:	f000 fbea 	bl	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2048      	movs	r0, #72	@ 0x48
 800371a:	183b      	adds	r3, r7, r0
 800371c:	2144      	movs	r1, #68	@ 0x44
 800371e:	5a52      	ldrh	r2, [r2, r1]
 8003720:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003722:	183b      	adds	r3, r7, r0
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	244f      	movs	r4, #79	@ 0x4f
 800372a:	193b      	adds	r3, r7, r4
 800372c:	210f      	movs	r1, #15
 800372e:	400a      	ands	r2, r1
 8003730:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003732:	193b      	adds	r3, r7, r4
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d000      	beq.n	800373c <PCD_EP_ISR_Handler+0x34>
 800373a:	e18d      	b.n	8003a58 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800373c:	183b      	adds	r3, r7, r0
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2210      	movs	r2, #16
 8003742:	4013      	ands	r3, r2
 8003744:	d152      	bne.n	80037ec <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29a      	uxth	r2, r3
 800374e:	200e      	movs	r0, #14
 8003750:	183b      	adds	r3, r7, r0
 8003752:	49ba      	ldr	r1, [pc, #744]	@ (8003a3c <PCD_EP_ISR_Handler+0x334>)
 8003754:	400a      	ands	r2, r1
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	183a      	adds	r2, r7, r0
 800375e:	8812      	ldrh	r2, [r2, #0]
 8003760:	49b7      	ldr	r1, [pc, #732]	@ (8003a40 <PCD_EP_ISR_Handler+0x338>)
 8003762:	430a      	orrs	r2, r1
 8003764:	b292      	uxth	r2, r2
 8003766:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3310      	adds	r3, #16
 800376c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2250      	movs	r2, #80	@ 0x50
 8003774:	5a9b      	ldrh	r3, [r3, r2]
 8003776:	b29b      	uxth	r3, r3
 8003778:	001a      	movs	r2, r3
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	18d2      	adds	r2, r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	4aae      	ldr	r2, [pc, #696]	@ (8003a44 <PCD_EP_ISR_Handler+0x33c>)
 800378a:	4694      	mov	ip, r2
 800378c:	4463      	add	r3, ip
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	059b      	lsls	r3, r3, #22
 8003792:	0d9a      	lsrs	r2, r3, #22
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2100      	movs	r1, #0
 80037aa:	0018      	movs	r0, r3
 80037ac:	f005 ff9e 	bl	80096ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7b1b      	ldrb	r3, [r3, #12]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <PCD_EP_ISR_Handler+0xb6>
 80037ba:	f000 fb95 	bl	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <PCD_EP_ISR_Handler+0xc2>
 80037c6:	f000 fb8f 	bl	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7b1b      	ldrb	r3, [r3, #12]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2280      	movs	r2, #128	@ 0x80
 80037d2:	4252      	negs	r2, r2
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0011      	movs	r1, r2
 80037de:	224c      	movs	r2, #76	@ 0x4c
 80037e0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	731a      	strb	r2, [r3, #12]
 80037e8:	f000 fb7e 	bl	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3351      	adds	r3, #81	@ 0x51
 80037f0:	33ff      	adds	r3, #255	@ 0xff
 80037f2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	214c      	movs	r1, #76	@ 0x4c
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003800:	187b      	adds	r3, r7, r1
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	4013      	ands	r3, r2
 800380a:	d037      	beq.n	800387c <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2250      	movs	r2, #80	@ 0x50
 8003812:	5a9b      	ldrh	r3, [r3, r2]
 8003814:	b29b      	uxth	r3, r3
 8003816:	001a      	movs	r2, r3
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	18d2      	adds	r2, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d3      	adds	r3, r2, r3
 8003826:	4a88      	ldr	r2, [pc, #544]	@ (8003a48 <PCD_EP_ISR_Handler+0x340>)
 8003828:	4694      	mov	ip, r2
 800382a:	4463      	add	r3, ip
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	059b      	lsls	r3, r3, #22
 8003830:	0d9a      	lsrs	r2, r3, #22
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	22a6      	movs	r2, #166	@ 0xa6
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	1899      	adds	r1, r3, r2
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003848:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800384a:	b29b      	uxth	r3, r3
 800384c:	f003 ff68 	bl	8007720 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29a      	uxth	r2, r3
 8003858:	2010      	movs	r0, #16
 800385a:	183b      	adds	r3, r7, r0
 800385c:	497b      	ldr	r1, [pc, #492]	@ (8003a4c <PCD_EP_ISR_Handler+0x344>)
 800385e:	400a      	ands	r2, r1
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	183a      	adds	r2, r7, r0
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	2180      	movs	r1, #128	@ 0x80
 800386c:	430a      	orrs	r2, r1
 800386e:	b292      	uxth	r2, r2
 8003870:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0018      	movs	r0, r3
 8003876:	f005 ff03 	bl	8009680 <HAL_PCD_SetupStageCallback>
 800387a:	e335      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800387c:	234c      	movs	r3, #76	@ 0x4c
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2200      	movs	r2, #0
 8003882:	5e9b      	ldrsh	r3, [r3, r2]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db00      	blt.n	800388a <PCD_EP_ISR_Handler+0x182>
 8003888:	e32e      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29a      	uxth	r2, r3
 8003892:	201e      	movs	r0, #30
 8003894:	183b      	adds	r3, r7, r0
 8003896:	496d      	ldr	r1, [pc, #436]	@ (8003a4c <PCD_EP_ISR_Handler+0x344>)
 8003898:	400a      	ands	r2, r1
 800389a:	801a      	strh	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	2180      	movs	r1, #128	@ 0x80
 80038a6:	430a      	orrs	r2, r1
 80038a8:	b292      	uxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2250      	movs	r2, #80	@ 0x50
 80038b2:	5a9b      	ldrh	r3, [r3, r2]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	001a      	movs	r2, r3
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	18d2      	adds	r2, r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	4a60      	ldr	r2, [pc, #384]	@ (8003a48 <PCD_EP_ISR_Handler+0x340>)
 80038c8:	4694      	mov	ip, r2
 80038ca:	4463      	add	r3, ip
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	059b      	lsls	r3, r3, #22
 80038d0:	0d9a      	lsrs	r2, r3, #22
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01a      	beq.n	8003914 <PCD_EP_ISR_Handler+0x20c>
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ec:	6959      	ldr	r1, [r3, #20]
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f003 ff12 	bl	8007720 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	18d2      	adds	r2, r2, r3
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2100      	movs	r1, #0
 800390e:	0018      	movs	r0, r3
 8003910:	f005 fecb 	bl	80096aa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	214c      	movs	r1, #76	@ 0x4c
 800391a:	187b      	adds	r3, r7, r1
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003920:	187b      	adds	r3, r7, r1
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4013      	ands	r3, r2
 800392a:	d000      	beq.n	800392e <PCD_EP_ISR_Handler+0x226>
 800392c:	e2dc      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
 800392e:	187b      	adds	r3, r7, r1
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	23c0      	movs	r3, #192	@ 0xc0
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	401a      	ands	r2, r3
 8003938:	23c0      	movs	r3, #192	@ 0xc0
 800393a:	019b      	lsls	r3, r3, #6
 800393c:	429a      	cmp	r2, r3
 800393e:	d100      	bne.n	8003942 <PCD_EP_ISR_Handler+0x23a>
 8003940:	e2d2      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2250      	movs	r2, #80	@ 0x50
 800394e:	5a9b      	ldrh	r3, [r3, r2]
 8003950:	b29b      	uxth	r3, r3
 8003952:	001a      	movs	r2, r3
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	189b      	adds	r3, r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a48 <PCD_EP_ISR_Handler+0x340>)
 800395e:	4694      	mov	ip, r2
 8003960:	4463      	add	r3, ip
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	059b      	lsls	r3, r3, #22
 800396c:	0d9b      	lsrs	r3, r3, #22
 800396e:	b29a      	uxth	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <PCD_EP_ISR_Handler+0x286>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	b29b      	uxth	r3, r3
 8003982:	4a2f      	ldr	r2, [pc, #188]	@ (8003a40 <PCD_EP_ISR_Handler+0x338>)
 8003984:	4313      	orrs	r3, r2
 8003986:	b29a      	uxth	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e035      	b.n	80039fa <PCD_EP_ISR_Handler+0x2f2>
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b3e      	cmp	r3, #62	@ 0x3e
 8003994:	d817      	bhi.n	80039c6 <PCD_EP_ISR_Handler+0x2be>
 8003996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	647b      	str	r3, [r7, #68]	@ 0x44
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2201      	movs	r2, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	d002      	beq.n	80039ae <PCD_EP_ISR_Handler+0x2a6>
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	3301      	adds	r3, #1
 80039ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e019      	b.n	80039fa <PCD_EP_ISR_Handler+0x2f2>
 80039c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	221f      	movs	r2, #31
 80039d4:	4013      	ands	r3, r2
 80039d6:	d102      	bne.n	80039de <PCD_EP_ISR_Handler+0x2d6>
 80039d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039da:	3b01      	subs	r3, #1
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4a13      	ldr	r2, [pc, #76]	@ (8003a40 <PCD_EP_ISR_Handler+0x338>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	2012      	movs	r0, #18
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	4912      	ldr	r1, [pc, #72]	@ (8003a50 <PCD_EP_ISR_Handler+0x348>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	183a      	adds	r2, r7, r0
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	2180      	movs	r1, #128	@ 0x80
 8003a14:	0149      	lsls	r1, r1, #5
 8003a16:	404a      	eors	r2, r1
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	183a      	adds	r2, r7, r0
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0189      	lsls	r1, r1, #6
 8003a24:	404a      	eors	r2, r1
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	183a      	adds	r2, r7, r0
 8003a2e:	8812      	ldrh	r2, [r2, #0]
 8003a30:	4908      	ldr	r1, [pc, #32]	@ (8003a54 <PCD_EP_ISR_Handler+0x34c>)
 8003a32:	430a      	orrs	r2, r1
 8003a34:	b292      	uxth	r2, r2
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	e256      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	ffff8f0f 	.word	0xffff8f0f
 8003a40:	ffff8000 	.word	0xffff8000
 8003a44:	00000402 	.word	0x00000402
 8003a48:	00000406 	.word	0x00000406
 8003a4c:	00000f8f 	.word	0x00000f8f
 8003a50:	ffffbf8f 	.word	0xffffbf8f
 8003a54:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	204f      	movs	r0, #79	@ 0x4f
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	18d2      	adds	r2, r2, r3
 8003a68:	214c      	movs	r1, #76	@ 0x4c
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	8812      	ldrh	r2, [r2, #0]
 8003a6e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	5e9b      	ldrsh	r3, [r3, r2]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db00      	blt.n	8003a7c <PCD_EP_ISR_Handler+0x374>
 8003a7a:	e0fa      	b.n	8003c72 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	001a      	movs	r2, r3
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	244a      	movs	r4, #74	@ 0x4a
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	49d1      	ldr	r1, [pc, #836]	@ (8003dd8 <PCD_EP_ISR_Handler+0x6d0>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	001a      	movs	r2, r3
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	193a      	adds	r2, r7, r4
 8003aa8:	8812      	ldrh	r2, [r2, #0]
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	430a      	orrs	r2, r1
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ab2:	183b      	adds	r3, r7, r0
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	3351      	adds	r3, #81	@ 0x51
 8003ac0:	33ff      	adds	r3, #255	@ 0xff
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aca:	7b1b      	ldrb	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d125      	bne.n	8003b1c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2250      	movs	r2, #80	@ 0x50
 8003ad6:	5a9b      	ldrh	r3, [r3, r2]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	001a      	movs	r2, r3
 8003adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	18d2      	adds	r2, r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	4abc      	ldr	r2, [pc, #752]	@ (8003ddc <PCD_EP_ISR_Handler+0x6d4>)
 8003aec:	4694      	mov	ip, r2
 8003aee:	4463      	add	r3, ip
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	2450      	movs	r4, #80	@ 0x50
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	0592      	lsls	r2, r2, #22
 8003af8:	0d92      	lsrs	r2, r2, #22
 8003afa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d100      	bne.n	8003b06 <PCD_EP_ISR_Handler+0x3fe>
 8003b04:	e08d      	b.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	6959      	ldr	r1, [r3, #20]
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b10:	88da      	ldrh	r2, [r3, #6]
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f003 fe03 	bl	8007720 <USB_ReadPMA>
 8003b1a:	e082      	b.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1e:	78db      	ldrb	r3, [r3, #3]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d10c      	bne.n	8003b3e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b24:	2350      	movs	r3, #80	@ 0x50
 8003b26:	18fc      	adds	r4, r7, r3
 8003b28:	234c      	movs	r3, #76	@ 0x4c
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f9ec 	bl	8003f10 <HAL_PCD_EP_DB_Receive>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	8023      	strh	r3, [r4, #0]
 8003b3c:	e071      	b.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	001a      	movs	r2, r3
 8003b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	2052      	movs	r0, #82	@ 0x52
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	49a2      	ldr	r1, [pc, #648]	@ (8003de0 <PCD_EP_ISR_Handler+0x6d8>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	183a      	adds	r2, r7, r0
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	499d      	ldr	r1, [pc, #628]	@ (8003de4 <PCD_EP_ISR_Handler+0x6dc>)
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	b292      	uxth	r2, r2
 8003b72:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	001a      	movs	r2, r3
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	18d3      	adds	r3, r2, r3
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	001a      	movs	r2, r3
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	01db      	lsls	r3, r3, #7
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d024      	beq.n	8003bda <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2250      	movs	r2, #80	@ 0x50
 8003b96:	5a9b      	ldrh	r3, [r3, r2]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	18d2      	adds	r2, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	4a8f      	ldr	r2, [pc, #572]	@ (8003de8 <PCD_EP_ISR_Handler+0x6e0>)
 8003bac:	4694      	mov	ip, r2
 8003bae:	4463      	add	r3, ip
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	2450      	movs	r4, #80	@ 0x50
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	0592      	lsls	r2, r2, #22
 8003bb8:	0d92      	lsrs	r2, r2, #22
 8003bba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02e      	beq.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bca:	6959      	ldr	r1, [r3, #20]
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	891a      	ldrh	r2, [r3, #8]
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f003 fda4 	bl	8007720 <USB_ReadPMA>
 8003bd8:	e023      	b.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2250      	movs	r2, #80	@ 0x50
 8003be0:	5a9b      	ldrh	r3, [r3, r2]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	001a      	movs	r2, r3
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	18d2      	adds	r2, r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	18d3      	adds	r3, r2, r3
 8003bf4:	4a79      	ldr	r2, [pc, #484]	@ (8003ddc <PCD_EP_ISR_Handler+0x6d4>)
 8003bf6:	4694      	mov	ip, r2
 8003bf8:	4463      	add	r3, ip
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	2450      	movs	r4, #80	@ 0x50
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	0592      	lsls	r2, r2, #22
 8003c02:	0d92      	lsrs	r2, r2, #22
 8003c04:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	6959      	ldr	r1, [r3, #20]
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	895a      	ldrh	r2, [r3, #10]
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	f003 fd7f 	bl	8007720 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	2150      	movs	r1, #80	@ 0x50
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	18d2      	adds	r2, r2, r3
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	18d2      	adds	r2, r2, r3
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <PCD_EP_ISR_Handler+0x54c>
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d207      	bcs.n	8003c64 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f005 fd24 	bl	80096aa <HAL_PCD_DataOutStageCallback>
 8003c62:	e006      	b.n	8003c72 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f002 faa3 	bl	80061b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c72:	244c      	movs	r4, #76	@ 0x4c
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	2280      	movs	r2, #128	@ 0x80
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d100      	bne.n	8003c80 <PCD_EP_ISR_Handler+0x578>
 8003c7e:	e133      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c80:	204f      	movs	r0, #79	@ 0x4f
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	0013      	movs	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3310      	adds	r3, #16
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	18d3      	adds	r3, r2, r3
 8003c94:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	18d3      	adds	r3, r2, r3
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	2542      	movs	r5, #66	@ 0x42
 8003caa:	197b      	adds	r3, r7, r5
 8003cac:	494f      	ldr	r1, [pc, #316]	@ (8003dec <PCD_EP_ISR_Handler+0x6e4>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	197a      	adds	r2, r7, r5
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	494a      	ldr	r1, [pc, #296]	@ (8003df0 <PCD_EP_ISR_Handler+0x6e8>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d000      	beq.n	8003cd6 <PCD_EP_ISR_Handler+0x5ce>
 8003cd4:	e0af      	b.n	8003e36 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cde:	7b1b      	ldrb	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d100      	bne.n	8003ce6 <PCD_EP_ISR_Handler+0x5de>
 8003ce4:	e09f      	b.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ce6:	193b      	adds	r3, r7, r4
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	2240      	movs	r2, #64	@ 0x40
 8003cec:	4013      	ands	r3, r2
 8003cee:	d046      	beq.n	8003d7e <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d125      	bne.n	8003d44 <PCD_EP_ISR_Handler+0x63c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2250      	movs	r2, #80	@ 0x50
 8003d04:	5a9b      	ldrh	r3, [r3, r2]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	001a      	movs	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	00da      	lsls	r2, r3, #3
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	18d3      	adds	r3, r2, r3
 8003d1a:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <PCD_EP_ISR_Handler+0x6e0>)
 8003d1c:	4694      	mov	ip, r2
 8003d1e:	4463      	add	r3, ip
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	059b      	lsls	r3, r3, #22
 8003d2a:	0d9b      	lsrs	r3, r3, #22
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <PCD_EP_ISR_Handler+0x6e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	e070      	b.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
 8003d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d16c      	bne.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2250      	movs	r2, #80	@ 0x50
 8003d58:	5a9b      	ldrh	r3, [r3, r2]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00da      	lsls	r2, r3, #3
 8003d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6c:	18d3      	adds	r3, r2, r3
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <PCD_EP_ISR_Handler+0x6e0>)
 8003d70:	4694      	mov	ip, r2
 8003d72:	4463      	add	r3, ip
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	2200      	movs	r2, #0
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e053      	b.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	785b      	ldrb	r3, [r3, #1]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d133      	bne.n	8003df4 <PCD_EP_ISR_Handler+0x6ec>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2250      	movs	r2, #80	@ 0x50
 8003d98:	5a9b      	ldrh	r3, [r3, r2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	00da      	lsls	r2, r3, #3
 8003daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	4a0b      	ldr	r2, [pc, #44]	@ (8003ddc <PCD_EP_ISR_Handler+0x6d4>)
 8003db0:	4694      	mov	ip, r2
 8003db2:	4463      	add	r3, ip
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	059b      	lsls	r3, r3, #22
 8003dbe:	0d9b      	lsrs	r3, r3, #22
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <PCD_EP_ISR_Handler+0x6e8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e026      	b.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
 8003dd8:	00000f8f 	.word	0x00000f8f
 8003ddc:	00000406 	.word	0x00000406
 8003de0:	ffff8f8f 	.word	0xffff8f8f
 8003de4:	ffff80c0 	.word	0xffff80c0
 8003de8:	00000402 	.word	0x00000402
 8003dec:	ffff8f0f 	.word	0xffff8f0f
 8003df0:	ffff8000 	.word	0xffff8000
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d114      	bne.n	8003e26 <PCD_EP_ISR_Handler+0x71e>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2250      	movs	r2, #80	@ 0x50
 8003e02:	5a9b      	ldrh	r3, [r3, r2]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	001a      	movs	r2, r3
 8003e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00da      	lsls	r2, r3, #3
 8003e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e16:	18d3      	adds	r3, r2, r3
 8003e18:	4a3b      	ldr	r2, [pc, #236]	@ (8003f08 <PCD_EP_ISR_Handler+0x800>)
 8003e1a:	4694      	mov	ip, r2
 8003e1c:	4463      	add	r3, ip
 8003e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	2200      	movs	r2, #0
 8003e24:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f005 fc5c 	bl	80096ec <HAL_PCD_DataInStageCallback>
 8003e34:	e058      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e36:	234c      	movs	r3, #76	@ 0x4c
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	@ 0x80
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d149      	bne.n	8003ed8 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2250      	movs	r2, #80	@ 0x50
 8003e4a:	5a9b      	ldrh	r3, [r3, r2]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	001a      	movs	r2, r3
 8003e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	18d2      	adds	r2, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	18d3      	adds	r3, r2, r3
 8003e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <PCD_EP_ISR_Handler+0x804>)
 8003e60:	4694      	mov	ip, r2
 8003e62:	4463      	add	r3, ip
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	2140      	movs	r1, #64	@ 0x40
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	0592      	lsls	r2, r2, #22
 8003e6c:	0d92      	lsrs	r2, r2, #22
 8003e6e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d907      	bls.n	8003e8c <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	1ad2      	subs	r2, r2, r3
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	619a      	str	r2, [r3, #24]
 8003e8a:	e002      	b.n	8003e92 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d107      	bne.n	8003eaa <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f005 fc22 	bl	80096ec <HAL_PCD_DataInStageCallback>
 8003ea8:	e01e      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	2140      	movs	r1, #64	@ 0x40
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	18d2      	adds	r2, r2, r3
 8003eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	18d2      	adds	r2, r2, r3
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f002 f971 	bl	80061b8 <USB_EPStartXfer>
 8003ed6:	e007      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ed8:	234c      	movs	r3, #76	@ 0x4c
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f000 f930 	bl	8004148 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2244      	movs	r2, #68	@ 0x44
 8003eee:	5a9b      	ldrh	r3, [r3, r2]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da01      	bge.n	8003efc <PCD_EP_ISR_Handler+0x7f4>
 8003ef8:	f7ff fc0c 	bl	8003714 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b016      	add	sp, #88	@ 0x58
 8003f04:	bdb0      	pop	{r4, r5, r7, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	00000406 	.word	0x00000406
 8003f0c:	00000402 	.word	0x00000402

08003f10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	1dbb      	adds	r3, r7, #6
 8003f1c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f1e:	1dbb      	adds	r3, r7, #6
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	01db      	lsls	r3, r3, #7
 8003f26:	4013      	ands	r3, r2
 8003f28:	d100      	bne.n	8003f2c <HAL_PCD_EP_DB_Receive+0x1c>
 8003f2a:	e07d      	b.n	8004028 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2250      	movs	r2, #80	@ 0x50
 8003f32:	5a9b      	ldrh	r3, [r3, r2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	001a      	movs	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	18d2      	adds	r2, r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	4a7a      	ldr	r2, [pc, #488]	@ (8004130 <HAL_PCD_EP_DB_Receive+0x220>)
 8003f48:	4694      	mov	ip, r2
 8003f4a:	4463      	add	r3, ip
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	211a      	movs	r1, #26
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	0592      	lsls	r2, r2, #22
 8003f54:	0d92      	lsrs	r2, r2, #22
 8003f56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d307      	bcc.n	8003f74 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	1ad2      	subs	r2, r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	619a      	str	r2, [r3, #24]
 8003f72:	e002      	b.n	8003f7a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d121      	bne.n	8003fc6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	001a      	movs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	18d3      	adds	r3, r2, r3
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	2018      	movs	r0, #24
 8003f96:	183b      	adds	r3, r7, r0
 8003f98:	4966      	ldr	r1, [pc, #408]	@ (8004134 <HAL_PCD_EP_DB_Receive+0x224>)
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	183a      	adds	r2, r7, r0
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	2180      	movs	r1, #128	@ 0x80
 8003fa6:	0189      	lsls	r1, r1, #6
 8003fa8:	404a      	eors	r2, r1
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	183a      	adds	r2, r7, r0
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	495e      	ldr	r1, [pc, #376]	@ (8004138 <HAL_PCD_EP_DB_Receive+0x228>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2240      	movs	r2, #64	@ 0x40
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d01a      	beq.n	8004006 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	2016      	movs	r0, #22
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	4955      	ldr	r1, [pc, #340]	@ (800413c <HAL_PCD_EP_DB_Receive+0x22c>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18d3      	adds	r3, r2, r3
 8003ffa:	183a      	adds	r2, r7, r0
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	4950      	ldr	r1, [pc, #320]	@ (8004140 <HAL_PCD_EP_DB_Receive+0x230>)
 8004000:	430a      	orrs	r2, r1
 8004002:	b292      	uxth	r2, r2
 8004004:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004006:	241a      	movs	r4, #26
 8004008:	193b      	adds	r3, r7, r4
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d100      	bne.n	8004012 <HAL_PCD_EP_DB_Receive+0x102>
 8004010:	e086      	b.n	8004120 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6959      	ldr	r1, [r3, #20]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	891a      	ldrh	r2, [r3, #8]
 800401e:	193b      	adds	r3, r7, r4
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	f003 fb7d 	bl	8007720 <USB_ReadPMA>
 8004026:	e07b      	b.n	8004120 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2250      	movs	r2, #80	@ 0x50
 800402e:	5a9b      	ldrh	r3, [r3, r2]
 8004030:	b29b      	uxth	r3, r3
 8004032:	001a      	movs	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	18d2      	adds	r2, r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	18d3      	adds	r3, r2, r3
 8004042:	4a40      	ldr	r2, [pc, #256]	@ (8004144 <HAL_PCD_EP_DB_Receive+0x234>)
 8004044:	4694      	mov	ip, r2
 8004046:	4463      	add	r3, ip
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	211a      	movs	r1, #26
 800404c:	187b      	adds	r3, r7, r1
 800404e:	0592      	lsls	r2, r2, #22
 8004050:	0d92      	lsrs	r2, r2, #22
 8004052:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	187b      	adds	r3, r7, r1
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d307      	bcc.n	8004070 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	187b      	adds	r3, r7, r1
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	1ad2      	subs	r2, r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	619a      	str	r2, [r3, #24]
 800406e:	e002      	b.n	8004076 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d121      	bne.n	80040c2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	001a      	movs	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	18d3      	adds	r3, r2, r3
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29a      	uxth	r2, r3
 8004090:	201e      	movs	r0, #30
 8004092:	183b      	adds	r3, r7, r0
 8004094:	4927      	ldr	r1, [pc, #156]	@ (8004134 <HAL_PCD_EP_DB_Receive+0x224>)
 8004096:	400a      	ands	r2, r1
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	183b      	adds	r3, r7, r0
 800409c:	183a      	adds	r2, r7, r0
 800409e:	8812      	ldrh	r2, [r2, #0]
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	0189      	lsls	r1, r1, #6
 80040a4:	404a      	eors	r2, r1
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	001a      	movs	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	183a      	adds	r2, r7, r0
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	491f      	ldr	r1, [pc, #124]	@ (8004138 <HAL_PCD_EP_DB_Receive+0x228>)
 80040bc:	430a      	orrs	r2, r1
 80040be:	b292      	uxth	r2, r2
 80040c0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040c2:	1dbb      	adds	r3, r7, #6
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	4013      	ands	r3, r2
 80040ca:	d11a      	bne.n	8004102 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	001a      	movs	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	18d3      	adds	r3, r2, r3
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	201c      	movs	r0, #28
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	4916      	ldr	r1, [pc, #88]	@ (800413c <HAL_PCD_EP_DB_Receive+0x22c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	183a      	adds	r2, r7, r0
 80040f8:	8812      	ldrh	r2, [r2, #0]
 80040fa:	4911      	ldr	r1, [pc, #68]	@ (8004140 <HAL_PCD_EP_DB_Receive+0x230>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	b292      	uxth	r2, r2
 8004100:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004102:	241a      	movs	r4, #26
 8004104:	193b      	adds	r3, r7, r4
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6959      	ldr	r1, [r3, #20]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	895a      	ldrh	r2, [r3, #10]
 8004118:	193b      	adds	r3, r7, r4
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	f003 fb00 	bl	8007720 <USB_ReadPMA>
    }
  }

  return count;
 8004120:	231a      	movs	r3, #26
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	881b      	ldrh	r3, [r3, #0]
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b009      	add	sp, #36	@ 0x24
 800412c:	bd90      	pop	{r4, r7, pc}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	00000402 	.word	0x00000402
 8004134:	ffffbf8f 	.word	0xffffbf8f
 8004138:	ffff8080 	.word	0xffff8080
 800413c:	ffff8f8f 	.word	0xffff8f8f
 8004140:	ffff80c0 	.word	0xffff80c0
 8004144:	00000406 	.word	0x00000406

08004148 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b0a4      	sub	sp, #144	@ 0x90
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	1dbb      	adds	r3, r7, #6
 8004154:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	2240      	movs	r2, #64	@ 0x40
 800415c:	4013      	ands	r3, r2
 800415e:	d100      	bne.n	8004162 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004160:	e1e4      	b.n	800452c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2250      	movs	r2, #80	@ 0x50
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	b29b      	uxth	r3, r3
 800416c:	001a      	movs	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	18d2      	adds	r2, r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	4ad0      	ldr	r2, [pc, #832]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800417e:	4694      	mov	ip, r2
 8004180:	4463      	add	r3, ip
 8004182:	881a      	ldrh	r2, [r3, #0]
 8004184:	2188      	movs	r1, #136	@ 0x88
 8004186:	187b      	adds	r3, r7, r1
 8004188:	0592      	lsls	r2, r2, #22
 800418a:	0d92      	lsrs	r2, r2, #22
 800418c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	187b      	adds	r3, r7, r1
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d907      	bls.n	80041aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	619a      	str	r2, [r3, #24]
 80041a8:	e002      	b.n	80041b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d000      	beq.n	80041ba <HAL_PCD_EP_DB_Transmit+0x72>
 80041b8:	e0b5      	b.n	8004326 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d125      	bne.n	800420e <HAL_PCD_EP_DB_Transmit+0xc6>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2250      	movs	r2, #80	@ 0x50
 80041ce:	5a9b      	ldrh	r3, [r3, r2]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	001a      	movs	r2, r3
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	00da      	lsls	r2, r3, #3
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	4ab6      	ldr	r2, [pc, #728]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80041e6:	4694      	mov	ip, r2
 80041e8:	4463      	add	r3, ip
 80041ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	059b      	lsls	r3, r3, #22
 80041f4:	0d9b      	lsrs	r3, r3, #22
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	4ab0      	ldr	r2, [pc, #704]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	b29a      	uxth	r2, r3
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	e01b      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0xfe>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d117      	bne.n	8004246 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2250      	movs	r2, #80	@ 0x50
 8004222:	5a9b      	ldrh	r3, [r3, r2]
 8004224:	b29b      	uxth	r3, r3
 8004226:	001a      	movs	r2, r3
 8004228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422a:	189b      	adds	r3, r3, r2
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	00da      	lsls	r2, r3, #3
 8004234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	4aa1      	ldr	r2, [pc, #644]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800423a:	4694      	mov	ip, r2
 800423c:	4463      	add	r3, ip
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d125      	bne.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x158>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2250      	movs	r2, #80	@ 0x50
 8004260:	5a9b      	ldrh	r3, [r3, r2]
 8004262:	b29b      	uxth	r3, r3
 8004264:	001a      	movs	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	189b      	adds	r3, r3, r2
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	00da      	lsls	r2, r3, #3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	18d3      	adds	r3, r2, r3
 8004276:	4a94      	ldr	r2, [pc, #592]	@ (80044c8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004278:	4694      	mov	ip, r2
 800427a:	4463      	add	r3, ip
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	059b      	lsls	r3, r3, #22
 8004286:	0d9b      	lsrs	r3, r3, #22
 8004288:	b29a      	uxth	r2, r3
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4a8b      	ldr	r2, [pc, #556]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	b29a      	uxth	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e018      	b.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d114      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2250      	movs	r2, #80	@ 0x50
 80042ae:	5a9b      	ldrh	r3, [r3, r2]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	00da      	lsls	r2, r3, #3
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	4a80      	ldr	r2, [pc, #512]	@ (80044c8 <HAL_PCD_EP_DB_Transmit+0x380>)
 80042c6:	4694      	mov	ip, r2
 80042c8:	4463      	add	r3, ip
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2200      	movs	r2, #0
 80042d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0011      	movs	r1, r2
 80042da:	0018      	movs	r0, r3
 80042dc:	f005 fa06 	bl	80096ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	01db      	lsls	r3, r3, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	d100      	bne.n	80042ee <HAL_PCD_EP_DB_Transmit+0x1a6>
 80042ec:	e308      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	001a      	movs	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	2016      	movs	r0, #22
 8004302:	183b      	adds	r3, r7, r0
 8004304:	4971      	ldr	r1, [pc, #452]	@ (80044cc <HAL_PCD_EP_DB_Transmit+0x384>)
 8004306:	400a      	ands	r2, r1
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	001a      	movs	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	183a      	adds	r2, r7, r0
 800431a:	8812      	ldrh	r2, [r2, #0]
 800431c:	496c      	ldr	r1, [pc, #432]	@ (80044d0 <HAL_PCD_EP_DB_Transmit+0x388>)
 800431e:	430a      	orrs	r2, r1
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	e2ec      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	4013      	ands	r3, r2
 8004330:	d01a      	beq.n	8004368 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	001a      	movs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	208a      	movs	r0, #138	@ 0x8a
 8004346:	183b      	adds	r3, r7, r0
 8004348:	4960      	ldr	r1, [pc, #384]	@ (80044cc <HAL_PCD_EP_DB_Transmit+0x384>)
 800434a:	400a      	ands	r2, r1
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	001a      	movs	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	18d3      	adds	r3, r2, r3
 800435c:	183a      	adds	r2, r7, r0
 800435e:	8812      	ldrh	r2, [r2, #0]
 8004360:	495b      	ldr	r1, [pc, #364]	@ (80044d0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004362:	430a      	orrs	r2, r1
 8004364:	b292      	uxth	r2, r2
 8004366:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2224      	movs	r2, #36	@ 0x24
 800436c:	5c9b      	ldrb	r3, [r3, r2]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d000      	beq.n	8004374 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004372:	e2c5      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	2188      	movs	r1, #136	@ 0x88
 800437a:	187b      	adds	r3, r7, r1
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	18d2      	adds	r2, r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	187b      	adds	r3, r7, r1
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	18d2      	adds	r2, r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d30c      	bcc.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	218c      	movs	r1, #140	@ 0x8c
 80043a4:	187a      	adds	r2, r7, r1
 80043a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1ad2      	subs	r2, r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	621a      	str	r2, [r3, #32]
 80043b6:	e01a      	b.n	80043ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80043c0:	2388      	movs	r3, #136	@ 0x88
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	228c      	movs	r2, #140	@ 0x8c
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2224      	movs	r2, #36	@ 0x24
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]
 80043d4:	e00b      	b.n	80043ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2224      	movs	r2, #36	@ 0x24
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	228c      	movs	r2, #140	@ 0x8c
 80043e4:	18ba      	adds	r2, r7, r2
 80043e6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d000      	beq.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80043f6:	e06d      	b.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x38c>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2250      	movs	r2, #80	@ 0x50
 8004404:	5a9b      	ldrh	r3, [r3, r2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	001a      	movs	r2, r3
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	189b      	adds	r3, r3, r2
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	00da      	lsls	r2, r3, #3
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800441c:	4694      	mov	ip, r2
 800441e:	4463      	add	r3, ip
 8004420:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	059b      	lsls	r3, r3, #22
 800442a:	0d9b      	lsrs	r3, r3, #22
 800442c:	b29a      	uxth	r2, r3
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	238c      	movs	r3, #140	@ 0x8c
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <HAL_PCD_EP_DB_Transmit+0x306>
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	4a20      	ldr	r2, [pc, #128]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	e061      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800444e:	228c      	movs	r2, #140	@ 0x8c
 8004450:	18bb      	adds	r3, r7, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b3e      	cmp	r3, #62	@ 0x3e
 8004456:	d817      	bhi.n	8004488 <HAL_PCD_EP_DB_Transmit+0x340>
 8004458:	18bb      	adds	r3, r7, r2
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	18bb      	adds	r3, r7, r2
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2201      	movs	r2, #1
 8004466:	4013      	ands	r3, r2
 8004468:	d002      	beq.n	8004470 <HAL_PCD_EP_DB_Transmit+0x328>
 800446a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800446c:	3301      	adds	r3, #1
 800446e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29a      	uxth	r2, r3
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004478:	b29b      	uxth	r3, r3
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	b29b      	uxth	r3, r3
 800447e:	4313      	orrs	r3, r2
 8004480:	b29a      	uxth	r2, r3
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	e044      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004488:	228c      	movs	r2, #140	@ 0x8c
 800448a:	18bb      	adds	r3, r7, r2
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004492:	18bb      	adds	r3, r7, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	221f      	movs	r2, #31
 8004498:	4013      	ands	r3, r2
 800449a:	d102      	bne.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x35a>
 800449c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449e:	3b01      	subs	r3, #1
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4a03      	ldr	r2, [pc, #12]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e028      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044c0:	00000402 	.word	0x00000402
 80044c4:	ffff8000 	.word	0xffff8000
 80044c8:	00000406 	.word	0x00000406
 80044cc:	ffff8f8f 	.word	0xffff8f8f
 80044d0:	ffffc080 	.word	0xffffc080
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d11a      	bne.n	8004512 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2250      	movs	r2, #80	@ 0x50
 80044e8:	5a9b      	ldrh	r3, [r3, r2]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	001a      	movs	r2, r3
 80044ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f0:	189b      	adds	r3, r3, r2
 80044f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00da      	lsls	r2, r3, #3
 80044fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	4ad9      	ldr	r2, [pc, #868]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004500:	4694      	mov	ip, r2
 8004502:	4463      	add	r3, ip
 8004504:	643b      	str	r3, [r7, #64]	@ 0x40
 8004506:	238c      	movs	r3, #140	@ 0x8c
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b29a      	uxth	r2, r3
 800450e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004510:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6959      	ldr	r1, [r3, #20]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	891a      	ldrh	r2, [r3, #8]
 800451e:	238c      	movs	r3, #140	@ 0x8c
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f003 f8b1 	bl	800768c <USB_WritePMA>
 800452a:	e1e9      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2250      	movs	r2, #80	@ 0x50
 8004532:	5a9b      	ldrh	r3, [r3, r2]
 8004534:	b29b      	uxth	r3, r3
 8004536:	001a      	movs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	18d2      	adds	r2, r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	18d3      	adds	r3, r2, r3
 8004546:	4ac8      	ldr	r2, [pc, #800]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004548:	4694      	mov	ip, r2
 800454a:	4463      	add	r3, ip
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	2188      	movs	r1, #136	@ 0x88
 8004550:	187b      	adds	r3, r7, r1
 8004552:	0592      	lsls	r2, r2, #22
 8004554:	0d92      	lsrs	r2, r2, #22
 8004556:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	187b      	adds	r3, r7, r1
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d307      	bcc.n	8004574 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	187b      	adds	r3, r7, r1
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	1ad2      	subs	r2, r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	619a      	str	r2, [r3, #24]
 8004572:	e002      	b.n	800457a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <HAL_PCD_EP_DB_Transmit+0x43c>
 8004582:	e0bb      	b.n	80046fc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d125      	bne.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x490>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2250      	movs	r2, #80	@ 0x50
 8004598:	5a9b      	ldrh	r3, [r3, r2]
 800459a:	b29b      	uxth	r3, r3
 800459c:	001a      	movs	r2, r3
 800459e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a0:	189b      	adds	r3, r3, r2
 80045a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00da      	lsls	r2, r3, #3
 80045aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ac:	18d3      	adds	r3, r2, r3
 80045ae:	4aad      	ldr	r2, [pc, #692]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80045b0:	4694      	mov	ip, r2
 80045b2:	4463      	add	r3, ip
 80045b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	059b      	lsls	r3, r3, #22
 80045be:	0d9b      	lsrs	r3, r3, #22
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4aa7      	ldr	r2, [pc, #668]	@ (800486c <HAL_PCD_EP_DB_Transmit+0x724>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	e01b      	b.n	8004610 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d117      	bne.n	8004610 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2250      	movs	r2, #80	@ 0x50
 80045ec:	5a9b      	ldrh	r3, [r3, r2]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	001a      	movs	r2, r3
 80045f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f4:	189b      	adds	r3, r3, r2
 80045f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	00da      	lsls	r2, r3, #3
 80045fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	4a98      	ldr	r2, [pc, #608]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004604:	4694      	mov	ip, r2
 8004606:	4463      	add	r3, ip
 8004608:	663b      	str	r3, [r7, #96]	@ 0x60
 800460a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800460c:	2200      	movs	r2, #0
 800460e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	677b      	str	r3, [r7, #116]	@ 0x74
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12b      	bne.n	8004676 <HAL_PCD_EP_DB_Transmit+0x52e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2250      	movs	r2, #80	@ 0x50
 800462a:	5a9b      	ldrh	r3, [r3, r2]
 800462c:	b29b      	uxth	r3, r3
 800462e:	001a      	movs	r2, r3
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	189b      	adds	r3, r3, r2
 8004634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	00da      	lsls	r2, r3, #3
 800463c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463e:	18d3      	adds	r3, r2, r3
 8004640:	4a89      	ldr	r2, [pc, #548]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004642:	4694      	mov	ip, r2
 8004644:	4463      	add	r3, ip
 8004646:	2184      	movs	r1, #132	@ 0x84
 8004648:	187a      	adds	r2, r7, r1
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	187b      	adds	r3, r7, r1
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	059b      	lsls	r3, r3, #22
 8004656:	0d9b      	lsrs	r3, r3, #22
 8004658:	b29a      	uxth	r2, r3
 800465a:	187b      	adds	r3, r7, r1
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	187b      	adds	r3, r7, r1
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	4a80      	ldr	r2, [pc, #512]	@ (800486c <HAL_PCD_EP_DB_Transmit+0x724>)
 800466a:	4313      	orrs	r3, r2
 800466c:	b29a      	uxth	r2, r3
 800466e:	187b      	adds	r3, r7, r1
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e018      	b.n	80046a8 <HAL_PCD_EP_DB_Transmit+0x560>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d114      	bne.n	80046a8 <HAL_PCD_EP_DB_Transmit+0x560>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2250      	movs	r2, #80	@ 0x50
 8004684:	5a9b      	ldrh	r3, [r3, r2]
 8004686:	b29b      	uxth	r3, r3
 8004688:	001a      	movs	r2, r3
 800468a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468c:	189b      	adds	r3, r3, r2
 800468e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	00da      	lsls	r2, r3, #3
 8004696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004698:	18d3      	adds	r3, r2, r3
 800469a:	4a73      	ldr	r2, [pc, #460]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x720>)
 800469c:	4694      	mov	ip, r2
 800469e:	4463      	add	r3, ip
 80046a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046a4:	2200      	movs	r2, #0
 80046a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	0011      	movs	r1, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	f005 f81b 	bl	80096ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046b6:	1dbb      	adds	r3, r7, #6
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	2380      	movs	r3, #128	@ 0x80
 80046bc:	01db      	lsls	r3, r3, #7
 80046be:	4013      	ands	r3, r2
 80046c0:	d000      	beq.n	80046c4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80046c2:	e11d      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	001a      	movs	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	18d3      	adds	r3, r2, r3
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	2082      	movs	r0, #130	@ 0x82
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	4965      	ldr	r1, [pc, #404]	@ (8004870 <HAL_PCD_EP_DB_Transmit+0x728>)
 80046dc:	400a      	ands	r2, r1
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	001a      	movs	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	183a      	adds	r2, r7, r0
 80046f0:	8812      	ldrh	r2, [r2, #0]
 80046f2:	4960      	ldr	r1, [pc, #384]	@ (8004874 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80046f4:	430a      	orrs	r2, r1
 80046f6:	b292      	uxth	r2, r2
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e101      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046fc:	1dbb      	adds	r3, r7, #6
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	4013      	ands	r3, r2
 8004706:	d11a      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	001a      	movs	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29a      	uxth	r2, r3
 800471a:	204e      	movs	r0, #78	@ 0x4e
 800471c:	183b      	adds	r3, r7, r0
 800471e:	4954      	ldr	r1, [pc, #336]	@ (8004870 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004720:	400a      	ands	r2, r1
 8004722:	801a      	strh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	001a      	movs	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	183a      	adds	r2, r7, r0
 8004734:	8812      	ldrh	r2, [r2, #0]
 8004736:	494f      	ldr	r1, [pc, #316]	@ (8004874 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004738:	430a      	orrs	r2, r1
 800473a:	b292      	uxth	r2, r2
 800473c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2224      	movs	r2, #36	@ 0x24
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d000      	beq.n	800474a <HAL_PCD_EP_DB_Transmit+0x602>
 8004748:	e0da      	b.n	8004900 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	2188      	movs	r1, #136	@ 0x88
 8004750:	187b      	adds	r3, r7, r1
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	18d2      	adds	r2, r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	187b      	adds	r3, r7, r1
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	18d2      	adds	r2, r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d30c      	bcc.n	800478e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	218c      	movs	r1, #140	@ 0x8c
 800477a:	187a      	adds	r2, r7, r1
 800477c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	187b      	adds	r3, r7, r1
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e01a      	b.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8004796:	2388      	movs	r3, #136	@ 0x88
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	228c      	movs	r2, #140	@ 0x8c
 800479e:	18ba      	adds	r2, r7, r2
 80047a0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2224      	movs	r2, #36	@ 0x24
 80047a6:	2100      	movs	r1, #0
 80047a8:	5499      	strb	r1, [r3, r2]
 80047aa:	e00b      	b.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	228c      	movs	r2, #140	@ 0x8c
 80047b2:	18ba      	adds	r2, r7, r2
 80047b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2200      	movs	r2, #0
 80047ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	2100      	movs	r1, #0
 80047c2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d000      	beq.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80047d2:	e06d      	b.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x768>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2250      	movs	r2, #80	@ 0x50
 80047e0:	5a9b      	ldrh	r3, [r3, r2]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	001a      	movs	r2, r3
 80047e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e8:	189b      	adds	r3, r3, r2
 80047ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	00da      	lsls	r2, r3, #3
 80047f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f4:	18d3      	adds	r3, r2, r3
 80047f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x720>)
 80047f8:	4694      	mov	ip, r2
 80047fa:	4463      	add	r3, ip
 80047fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	059b      	lsls	r3, r3, #22
 8004806:	0d9b      	lsrs	r3, r3, #22
 8004808:	b29a      	uxth	r2, r3
 800480a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	238c      	movs	r3, #140	@ 0x8c
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8004818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4a13      	ldr	r2, [pc, #76]	@ (800486c <HAL_PCD_EP_DB_Transmit+0x724>)
 8004820:	4313      	orrs	r3, r2
 8004822:	b29a      	uxth	r2, r3
 8004824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e05e      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800482a:	228c      	movs	r2, #140	@ 0x8c
 800482c:	18bb      	adds	r3, r7, r2
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b3e      	cmp	r3, #62	@ 0x3e
 8004832:	d821      	bhi.n	8004878 <HAL_PCD_EP_DB_Transmit+0x730>
 8004834:	18bb      	adds	r3, r7, r2
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483c:	18bb      	adds	r3, r7, r2
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	4013      	ands	r3, r2
 8004844:	d002      	beq.n	800484c <HAL_PCD_EP_DB_Transmit+0x704>
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	3301      	adds	r3, #1
 800484a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29a      	uxth	r2, r3
 8004852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004854:	b29b      	uxth	r3, r3
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	b29b      	uxth	r3, r3
 800485a:	4313      	orrs	r3, r2
 800485c:	b29a      	uxth	r2, r3
 800485e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	e041      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004864:	00000402 	.word	0x00000402
 8004868:	00000406 	.word	0x00000406
 800486c:	ffff8000 	.word	0xffff8000
 8004870:	ffff8f8f 	.word	0xffff8f8f
 8004874:	ffffc080 	.word	0xffffc080
 8004878:	228c      	movs	r2, #140	@ 0x8c
 800487a:	18bb      	adds	r3, r7, r2
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004882:	18bb      	adds	r3, r7, r2
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	221f      	movs	r2, #31
 8004888:	4013      	ands	r3, r2
 800488a:	d102      	bne.n	8004892 <HAL_PCD_EP_DB_Transmit+0x74a>
 800488c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488e:	3b01      	subs	r3, #1
 8004890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29a      	uxth	r2, r3
 8004898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800489a:	b29b      	uxth	r3, r3
 800489c:	029b      	lsls	r3, r3, #10
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004958 <HAL_PCD_EP_DB_Transmit+0x810>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e01b      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d117      	bne.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2250      	movs	r2, #80	@ 0x50
 80048be:	5a9b      	ldrh	r3, [r3, r2]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	001a      	movs	r2, r3
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	00da      	lsls	r2, r3, #3
 80048d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d2:	18d3      	adds	r3, r2, r3
 80048d4:	4a21      	ldr	r2, [pc, #132]	@ (800495c <HAL_PCD_EP_DB_Transmit+0x814>)
 80048d6:	4694      	mov	ip, r2
 80048d8:	4463      	add	r3, ip
 80048da:	653b      	str	r3, [r7, #80]	@ 0x50
 80048dc:	238c      	movs	r3, #140	@ 0x8c
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6959      	ldr	r1, [r3, #20]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	895a      	ldrh	r2, [r3, #10]
 80048f4:	238c      	movs	r3, #140	@ 0x8c
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f002 fec6 	bl	800768c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	001a      	movs	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29a      	uxth	r2, r3
 8004912:	2014      	movs	r0, #20
 8004914:	183b      	adds	r3, r7, r0
 8004916:	4912      	ldr	r1, [pc, #72]	@ (8004960 <HAL_PCD_EP_DB_Transmit+0x818>)
 8004918:	400a      	ands	r2, r1
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	183b      	adds	r3, r7, r0
 800491e:	183a      	adds	r2, r7, r0
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	2110      	movs	r1, #16
 8004924:	404a      	eors	r2, r1
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	183b      	adds	r3, r7, r0
 800492a:	183a      	adds	r2, r7, r0
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	2120      	movs	r1, #32
 8004930:	404a      	eors	r2, r1
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	001a      	movs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	18d3      	adds	r3, r2, r3
 8004942:	183a      	adds	r2, r7, r0
 8004944:	8812      	ldrh	r2, [r2, #0]
 8004946:	4907      	ldr	r1, [pc, #28]	@ (8004964 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8004948:	430a      	orrs	r2, r1
 800494a:	b292      	uxth	r2, r2
 800494c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b024      	add	sp, #144	@ 0x90
 8004956:	bd80      	pop	{r7, pc}
 8004958:	ffff8000 	.word	0xffff8000
 800495c:	00000406 	.word	0x00000406
 8004960:	ffff8fbf 	.word	0xffff8fbf
 8004964:	ffff8080 	.word	0xffff8080

08004968 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	0008      	movs	r0, r1
 8004972:	0011      	movs	r1, r2
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	240a      	movs	r4, #10
 8004978:	193b      	adds	r3, r7, r4
 800497a:	1c02      	adds	r2, r0, #0
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	2308      	movs	r3, #8
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	1c0a      	adds	r2, r1, #0
 8004984:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004986:	0021      	movs	r1, r4
 8004988:	187b      	adds	r3, r7, r1
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	4013      	ands	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004996:	187b      	adds	r3, r7, r1
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	2207      	movs	r2, #7
 800499c:	401a      	ands	r2, r3
 800499e:	0013      	movs	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	3310      	adds	r3, #16
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	18d3      	adds	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e00b      	b.n	80049c8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049b0:	230a      	movs	r3, #10
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	881a      	ldrh	r2, [r3, #0]
 80049b6:	0013      	movs	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	3351      	adds	r3, #81	@ 0x51
 80049c0:	33ff      	adds	r3, #255	@ 0xff
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	18d3      	adds	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049c8:	2308      	movs	r3, #8
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	80da      	strh	r2, [r3, #6]
 80049e0:	e00b      	b.n	80049fa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2201      	movs	r2, #1
 80049e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b007      	add	sp, #28
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	23b4      	movs	r3, #180	@ 0xb4
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	2101      	movs	r1, #1
 8004a1a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	23b2      	movs	r3, #178	@ 0xb2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	2100      	movs	r1, #0
 8004a24:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2254      	movs	r2, #84	@ 0x54
 8004a2a:	5a9b      	ldrh	r3, [r3, r2]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b299      	uxth	r1, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2254      	movs	r2, #84	@ 0x54
 8004a38:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2254      	movs	r2, #84	@ 0x54
 8004a3e:	5a9b      	ldrh	r3, [r3, r2]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2202      	movs	r2, #2
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b299      	uxth	r1, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2254      	movs	r2, #84	@ 0x54
 8004a4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b004      	add	sp, #16
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	000a      	movs	r2, r1
 8004a62:	1cfb      	adds	r3, r7, #3
 8004a64:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f000 fb76 	bl	8005170 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d100      	bne.n	8004a90 <HAL_RCC_OscConfig+0x20>
 8004a8e:	e08e      	b.n	8004bae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a90:	4bc5      	ldr	r3, [pc, #788]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	220c      	movs	r2, #12
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d00e      	beq.n	8004aba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a9c:	4bc2      	ldr	r3, [pc, #776]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	220c      	movs	r2, #12
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d117      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x68>
 8004aa8:	4bbf      	ldr	r3, [pc, #764]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	23c0      	movs	r3, #192	@ 0xc0
 8004aae:	025b      	lsls	r3, r3, #9
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aba:	4bbb      	ldr	r3, [pc, #748]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d100      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x58>
 8004ac6:	e071      	b.n	8004bac <HAL_RCC_OscConfig+0x13c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d000      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x62>
 8004ad0:	e06c      	b.n	8004bac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f000 fb4c 	bl	8005170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_OscConfig+0x80>
 8004ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4bb0      	ldr	r3, [pc, #704]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	0249      	lsls	r1, r1, #9
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e02f      	b.n	8004b50 <HAL_RCC_OscConfig+0xe0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCC_OscConfig+0xa2>
 8004af8:	4bab      	ldr	r3, [pc, #684]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4baa      	ldr	r3, [pc, #680]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004afe:	49ab      	ldr	r1, [pc, #684]	@ (8004dac <HAL_RCC_OscConfig+0x33c>)
 8004b00:	400a      	ands	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	4ba8      	ldr	r3, [pc, #672]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4ba7      	ldr	r3, [pc, #668]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b0a:	49a9      	ldr	r1, [pc, #676]	@ (8004db0 <HAL_RCC_OscConfig+0x340>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e01e      	b.n	8004b50 <HAL_RCC_OscConfig+0xe0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d10e      	bne.n	8004b38 <HAL_RCC_OscConfig+0xc8>
 8004b1a:	4ba3      	ldr	r3, [pc, #652]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4ba2      	ldr	r3, [pc, #648]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b20:	2180      	movs	r1, #128	@ 0x80
 8004b22:	02c9      	lsls	r1, r1, #11
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	4b9f      	ldr	r3, [pc, #636]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b9e      	ldr	r3, [pc, #632]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	0249      	lsls	r1, r1, #9
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0xe0>
 8004b38:	4b9b      	ldr	r3, [pc, #620]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b9a      	ldr	r3, [pc, #616]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b3e:	499b      	ldr	r1, [pc, #620]	@ (8004dac <HAL_RCC_OscConfig+0x33c>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	4b98      	ldr	r3, [pc, #608]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b97      	ldr	r3, [pc, #604]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b4a:	4999      	ldr	r1, [pc, #612]	@ (8004db0 <HAL_RCC_OscConfig+0x340>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d014      	beq.n	8004b82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fc fecc 	bl	80018f4 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b62:	f7fc fec7 	bl	80018f4 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b64      	cmp	r3, #100	@ 0x64
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e2fd      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b74:	4b8c      	ldr	r3, [pc, #560]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	029b      	lsls	r3, r3, #10
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0xf2>
 8004b80:	e015      	b.n	8004bae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fc feb7 	bl	80018f4 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fc feb2 	bl	80018f4 <HAL_GetTick>
 8004b90:	0002      	movs	r2, r0
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e2e8      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b82      	ldr	r3, [pc, #520]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	029b      	lsls	r3, r3, #10
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x11c>
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d100      	bne.n	8004bba <HAL_RCC_OscConfig+0x14a>
 8004bb8:	e06c      	b.n	8004c94 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bba:	4b7b      	ldr	r3, [pc, #492]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bc4:	4b78      	ldr	r3, [pc, #480]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	220c      	movs	r2, #12
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d11f      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1a0>
 8004bd0:	4b75      	ldr	r3, [pc, #468]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	23c0      	movs	r3, #192	@ 0xc0
 8004bd6:	025b      	lsls	r3, r3, #9
 8004bd8:	401a      	ands	r2, r3
 8004bda:	2380      	movs	r3, #128	@ 0x80
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d116      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	4b71      	ldr	r3, [pc, #452]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x188>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e2bb      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	22f8      	movs	r2, #248	@ 0xf8
 8004bfe:	4393      	bics	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00da      	lsls	r2, r3, #3
 8004c08:	4b67      	ldr	r3, [pc, #412]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	e041      	b.n	8004c94 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d024      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c18:	4b63      	ldr	r3, [pc, #396]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b62      	ldr	r3, [pc, #392]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	430a      	orrs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fc fe66 	bl	80018f4 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fc fe61 	bl	80018f4 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e297      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	4b59      	ldr	r3, [pc, #356]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d0f1      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b57      	ldr	r3, [pc, #348]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	22f8      	movs	r2, #248	@ 0xf8
 8004c50:	4393      	bics	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00da      	lsls	r2, r3, #3
 8004c5a:	4b53      	ldr	r3, [pc, #332]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e018      	b.n	8004c94 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b51      	ldr	r3, [pc, #324]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b50      	ldr	r3, [pc, #320]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	438a      	bics	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fe41 	bl	80018f4 <HAL_GetTick>
 8004c72:	0003      	movs	r3, r0
 8004c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c78:	f7fc fe3c 	bl	80018f4 <HAL_GetTick>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e272      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	4b47      	ldr	r3, [pc, #284]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	4013      	ands	r3, r2
 8004c92:	d1f1      	bne.n	8004c78 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d019      	beq.n	8004cda <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	4b40      	ldr	r3, [pc, #256]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004caa:	4b3f      	ldr	r3, [pc, #252]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004cac:	2101      	movs	r1, #1
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb2:	f7fc fe1f 	bl	80018f4 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fc fe1a 	bl	80018f4 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e250      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d0f1      	beq.n	8004cbc <HAL_RCC_OscConfig+0x24c>
 8004cd8:	e018      	b.n	8004d0c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cda:	4b33      	ldr	r3, [pc, #204]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cde:	4b32      	ldr	r3, [pc, #200]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	438a      	bics	r2, r1
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce6:	f7fc fe05 	bl	80018f4 <HAL_GetTick>
 8004cea:	0003      	movs	r3, r0
 8004cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fc fe00 	bl	80018f4 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e236      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d02:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	2202      	movs	r2, #2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d1f1      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2204      	movs	r2, #4
 8004d12:	4013      	ands	r3, r2
 8004d14:	d100      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2a8>
 8004d16:	e0b5      	b.n	8004e84 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d18:	201f      	movs	r0, #31
 8004d1a:	183b      	adds	r3, r7, r0
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d20:	4b21      	ldr	r3, [pc, #132]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	055b      	lsls	r3, r3, #21
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d110      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	0549      	lsls	r1, r1, #21
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	055b      	lsls	r3, r3, #21
 8004d42:	4013      	ands	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d48:	183b      	adds	r3, r7, r0
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_RCC_OscConfig+0x344>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b16      	ldr	r3, [pc, #88]	@ (8004db4 <HAL_RCC_OscConfig+0x344>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <HAL_RCC_OscConfig+0x344>)
 8004d60:	2180      	movs	r1, #128	@ 0x80
 8004d62:	0049      	lsls	r1, r1, #1
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d68:	f7fc fdc4 	bl	80018f4 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fc fdbf 	bl	80018f4 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b64      	cmp	r3, #100	@ 0x64
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1f5      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <HAL_RCC_OscConfig+0x344>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10f      	bne.n	8004db8 <HAL_RCC_OscConfig+0x348>
 8004d98:	4b03      	ldr	r3, [pc, #12]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d9a:	6a1a      	ldr	r2, [r3, #32]
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <HAL_RCC_OscConfig+0x338>)
 8004d9e:	2101      	movs	r1, #1
 8004da0:	430a      	orrs	r2, r1
 8004da2:	621a      	str	r2, [r3, #32]
 8004da4:	e036      	b.n	8004e14 <HAL_RCC_OscConfig+0x3a4>
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	40021000 	.word	0x40021000
 8004dac:	fffeffff 	.word	0xfffeffff
 8004db0:	fffbffff 	.word	0xfffbffff
 8004db4:	40007000 	.word	0x40007000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x36a>
 8004dc0:	4bca      	ldr	r3, [pc, #808]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	4bc9      	ldr	r3, [pc, #804]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	621a      	str	r2, [r3, #32]
 8004dcc:	4bc7      	ldr	r3, [pc, #796]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	4bc6      	ldr	r3, [pc, #792]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	621a      	str	r2, [r3, #32]
 8004dd8:	e01c      	b.n	8004e14 <HAL_RCC_OscConfig+0x3a4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x38c>
 8004de2:	4bc2      	ldr	r3, [pc, #776]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004de4:	6a1a      	ldr	r2, [r3, #32]
 8004de6:	4bc1      	ldr	r3, [pc, #772]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004de8:	2104      	movs	r1, #4
 8004dea:	430a      	orrs	r2, r1
 8004dec:	621a      	str	r2, [r3, #32]
 8004dee:	4bbf      	ldr	r3, [pc, #764]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	4bbe      	ldr	r3, [pc, #760]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004df4:	2101      	movs	r1, #1
 8004df6:	430a      	orrs	r2, r1
 8004df8:	621a      	str	r2, [r3, #32]
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCC_OscConfig+0x3a4>
 8004dfc:	4bbb      	ldr	r3, [pc, #748]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	4bba      	ldr	r3, [pc, #744]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e02:	2101      	movs	r1, #1
 8004e04:	438a      	bics	r2, r1
 8004e06:	621a      	str	r2, [r3, #32]
 8004e08:	4bb8      	ldr	r3, [pc, #736]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	4bb7      	ldr	r3, [pc, #732]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e0e:	2104      	movs	r1, #4
 8004e10:	438a      	bics	r2, r1
 8004e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d014      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1c:	f7fc fd6a 	bl	80018f4 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e009      	b.n	8004e3a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fc fd65 	bl	80018f4 <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	4aaf      	ldr	r2, [pc, #700]	@ (80050f0 <HAL_RCC_OscConfig+0x680>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e19a      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3a:	4bac      	ldr	r3, [pc, #688]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x3b6>
 8004e44:	e013      	b.n	8004e6e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fc fd55 	bl	80018f4 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4e:	e009      	b.n	8004e64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fc fd50 	bl	80018f4 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4aa5      	ldr	r2, [pc, #660]	@ (80050f0 <HAL_RCC_OscConfig+0x680>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e185      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4ba1      	ldr	r3, [pc, #644]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e6e:	231f      	movs	r3, #31
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d105      	bne.n	8004e84 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e78:	4b9c      	ldr	r3, [pc, #624]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e7e:	499d      	ldr	r1, [pc, #628]	@ (80050f4 <HAL_RCC_OscConfig+0x684>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d063      	beq.n	8004f56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d12a      	bne.n	8004eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e96:	4b95      	ldr	r3, [pc, #596]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9a:	4b94      	ldr	r3, [pc, #592]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004ea2:	4b92      	ldr	r3, [pc, #584]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	4b91      	ldr	r3, [pc, #580]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fc fd21 	bl	80018f4 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004eb8:	f7fc fd1c 	bl	80018f4 <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e152      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004eca:	4b88      	ldr	r3, [pc, #544]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d0f1      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ed4:	4b85      	ldr	r3, [pc, #532]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	22f8      	movs	r2, #248	@ 0xf8
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	00da      	lsls	r2, r3, #3
 8004ee4:	4b81      	ldr	r3, [pc, #516]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eea:	e034      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	3305      	adds	r3, #5
 8004ef2:	d111      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004efa:	2104      	movs	r1, #4
 8004efc:	438a      	bics	r2, r1
 8004efe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f00:	4b7a      	ldr	r3, [pc, #488]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f04:	22f8      	movs	r2, #248	@ 0xf8
 8004f06:	4393      	bics	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	4b76      	ldr	r3, [pc, #472]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f12:	430a      	orrs	r2, r1
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f16:	e01e      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f18:	4b74      	ldr	r3, [pc, #464]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1c:	4b73      	ldr	r3, [pc, #460]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f1e:	2104      	movs	r1, #4
 8004f20:	430a      	orrs	r2, r1
 8004f22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f24:	4b71      	ldr	r3, [pc, #452]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f28:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f30:	f7fc fce0 	bl	80018f4 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f3a:	f7fc fcdb 	bl	80018f4 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e111      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f4c:	4b67      	ldr	r3, [pc, #412]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f50:	2202      	movs	r2, #2
 8004f52:	4013      	ands	r3, r2
 8004f54:	d1f1      	bne.n	8004f3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d05c      	beq.n	800501a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f60:	4b62      	ldr	r3, [pc, #392]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	220c      	movs	r2, #12
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	d00e      	beq.n	8004f8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f6c:	4b5f      	ldr	r3, [pc, #380]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	220c      	movs	r2, #12
 8004f72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d114      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f78:	4b5c      	ldr	r3, [pc, #368]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	23c0      	movs	r3, #192	@ 0xc0
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	401a      	ands	r2, r3
 8004f82:	23c0      	movs	r3, #192	@ 0xc0
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f8a:	4b58      	ldr	r3, [pc, #352]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4013      	ands	r3, r2
 8004f94:	d040      	beq.n	8005018 <HAL_RCC_OscConfig+0x5a8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d03c      	beq.n	8005018 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e0e6      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004faa:	4b50      	ldr	r3, [pc, #320]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fae:	4b4f      	ldr	r3, [pc, #316]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004fb0:	2180      	movs	r1, #128	@ 0x80
 8004fb2:	0249      	lsls	r1, r1, #9
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fc fc9c 	bl	80018f4 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc2:	f7fc fc97 	bl	80018f4 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0cd      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fd4:	4b45      	ldr	r3, [pc, #276]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x552>
 8004fe0:	e01b      	b.n	800501a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fe2:	4b42      	ldr	r3, [pc, #264]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe6:	4b41      	ldr	r3, [pc, #260]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8004fe8:	4943      	ldr	r1, [pc, #268]	@ (80050f8 <HAL_RCC_OscConfig+0x688>)
 8004fea:	400a      	ands	r2, r1
 8004fec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fc fc81 	bl	80018f4 <HAL_GetTick>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff8:	f7fc fc7c 	bl	80018f4 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0b2      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800500a:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 800500c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	4013      	ands	r3, r2
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x588>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005018:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d100      	bne.n	8005024 <HAL_RCC_OscConfig+0x5b4>
 8005022:	e0a4      	b.n	800516e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005024:	4b31      	ldr	r3, [pc, #196]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	220c      	movs	r2, #12
 800502a:	4013      	ands	r3, r2
 800502c:	2b08      	cmp	r3, #8
 800502e:	d100      	bne.n	8005032 <HAL_RCC_OscConfig+0x5c2>
 8005030:	e078      	b.n	8005124 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2b02      	cmp	r3, #2
 8005038:	d14c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b2b      	ldr	r3, [pc, #172]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005040:	492e      	ldr	r1, [pc, #184]	@ (80050fc <HAL_RCC_OscConfig+0x68c>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fc fc55 	bl	80018f4 <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005050:	f7fc fc50 	bl	80018f4 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e086      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005062:	4b22      	ldr	r3, [pc, #136]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	049b      	lsls	r3, r3, #18
 800506a:	4013      	ands	r3, r2
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506e:	4b1f      	ldr	r3, [pc, #124]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	220f      	movs	r2, #15
 8005074:	4393      	bics	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507c:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 800507e:	430a      	orrs	r2, r1
 8005080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005082:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <HAL_RCC_OscConfig+0x690>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	431a      	orrs	r2, r3
 8005096:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509c:	4b13      	ldr	r3, [pc, #76]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 80050a2:	2180      	movs	r1, #128	@ 0x80
 80050a4:	0449      	lsls	r1, r1, #17
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050aa:	f7fc fc23 	bl	80018f4 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fc fc1e 	bl	80018f4 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e054      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050c6:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	2380      	movs	r3, #128	@ 0x80
 80050cc:	049b      	lsls	r3, r3, #18
 80050ce:	4013      	ands	r3, r2
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x644>
 80050d2:	e04c      	b.n	800516e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <HAL_RCC_OscConfig+0x67c>)
 80050da:	4908      	ldr	r1, [pc, #32]	@ (80050fc <HAL_RCC_OscConfig+0x68c>)
 80050dc:	400a      	ands	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fc fc08 	bl	80018f4 <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e8:	e015      	b.n	8005116 <HAL_RCC_OscConfig+0x6a6>
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	40021000 	.word	0x40021000
 80050f0:	00001388 	.word	0x00001388
 80050f4:	efffffff 	.word	0xefffffff
 80050f8:	fffeffff 	.word	0xfffeffff
 80050fc:	feffffff 	.word	0xfeffffff
 8005100:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc fbf6 	bl	80018f4 <HAL_GetTick>
 8005108:	0002      	movs	r2, r0
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e02c      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005116:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <HAL_RCC_OscConfig+0x708>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	049b      	lsls	r3, r3, #18
 800511e:	4013      	ands	r3, r2
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x694>
 8005122:	e024      	b.n	800516e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e01f      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <HAL_RCC_OscConfig+0x708>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005136:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <HAL_RCC_OscConfig+0x708>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	23c0      	movs	r3, #192	@ 0xc0
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	401a      	ands	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	429a      	cmp	r2, r3
 800514a:	d10e      	bne.n	800516a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	220f      	movs	r2, #15
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d107      	bne.n	800516a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	23f0      	movs	r3, #240	@ 0xf0
 800515e:	039b      	lsls	r3, r3, #14
 8005160:	401a      	ands	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b008      	add	sp, #32
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0bf      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	4013      	ands	r3, r2
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d911      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b5e      	ldr	r3, [pc, #376]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4393      	bics	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b0:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d001      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0a6      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2202      	movs	r2, #2
 80051c8:	4013      	ands	r3, r2
 80051ca:	d015      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2204      	movs	r2, #4
 80051d2:	4013      	ands	r3, r2
 80051d4:	d006      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4b50      	ldr	r3, [pc, #320]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80051dc:	21e0      	movs	r1, #224	@ 0xe0
 80051de:	00c9      	lsls	r1, r1, #3
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e4:	4b4d      	ldr	r3, [pc, #308]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	22f0      	movs	r2, #240	@ 0xf0
 80051ea:	4393      	bics	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	4b4a      	ldr	r3, [pc, #296]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	d04c      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	029b      	lsls	r3, r3, #10
 8005212:	4013      	ands	r3, r2
 8005214:	d120      	bne.n	8005258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e07a      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005222:	4b3e      	ldr	r3, [pc, #248]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	049b      	lsls	r3, r3, #18
 800522a:	4013      	ands	r3, r2
 800522c:	d114      	bne.n	8005258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e06e      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800523a:	4b38      	ldr	r3, [pc, #224]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 800523c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523e:	2380      	movs	r3, #128	@ 0x80
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	4013      	ands	r3, r2
 8005244:	d108      	bne.n	8005258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e062      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b34      	ldr	r3, [pc, #208]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2202      	movs	r2, #2
 8005250:	4013      	ands	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e05b      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005258:	4b30      	ldr	r3, [pc, #192]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2203      	movs	r2, #3
 800525e:	4393      	bics	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b2d      	ldr	r3, [pc, #180]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc fb42 	bl	80018f4 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005274:	e009      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005276:	f7fc fb3d 	bl	80018f4 <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	4a27      	ldr	r2, [pc, #156]	@ (8005320 <HAL_RCC_ClockConfig+0x1a4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e042      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	220c      	movs	r2, #12
 8005290:	401a      	ands	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1ec      	bne.n	8005276 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d211      	bcs.n	80052ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4393      	bics	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	4b18      	ldr	r3, [pc, #96]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052bc:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <HAL_RCC_ClockConfig+0x19c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d001      	beq.n	80052ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e020      	b.n	8005310 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2204      	movs	r2, #4
 80052d4:	4013      	ands	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a11      	ldr	r2, [pc, #68]	@ (8005324 <HAL_RCC_ClockConfig+0x1a8>)
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052ec:	f000 f820 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052f0:	0001      	movs	r1, r0
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <HAL_RCC_ClockConfig+0x1a0>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	220f      	movs	r2, #15
 80052fa:	4013      	ands	r3, r2
 80052fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005328 <HAL_RCC_ClockConfig+0x1ac>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	000a      	movs	r2, r1
 8005302:	40da      	lsrs	r2, r3
 8005304:	4b09      	ldr	r3, [pc, #36]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 8005306:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005308:	2003      	movs	r0, #3
 800530a:	f7fc faad 	bl	8001868 <HAL_InitTick>
  
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b004      	add	sp, #16
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40022000 	.word	0x40022000
 800531c:	40021000 	.word	0x40021000
 8005320:	00001388 	.word	0x00001388
 8005324:	fffff8ff 	.word	0xfffff8ff
 8005328:	0800a704 	.word	0x0800a704
 800532c:	20000088 	.word	0x20000088

08005330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800534a:	4b2d      	ldr	r3, [pc, #180]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	220c      	movs	r2, #12
 8005354:	4013      	ands	r3, r2
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d046      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800535a:	d848      	bhi.n	80053ee <HAL_RCC_GetSysClockFreq+0xbe>
 800535c:	2b04      	cmp	r3, #4
 800535e:	d002      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x36>
 8005360:	2b08      	cmp	r3, #8
 8005362:	d003      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x3c>
 8005364:	e043      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005366:	4b27      	ldr	r3, [pc, #156]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005368:	613b      	str	r3, [r7, #16]
      break;
 800536a:	e043      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0c9b      	lsrs	r3, r3, #18
 8005370:	220f      	movs	r2, #15
 8005372:	4013      	ands	r3, r2
 8005374:	4a24      	ldr	r2, [pc, #144]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800537a:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	220f      	movs	r2, #15
 8005380:	4013      	ands	r3, r2
 8005382:	4a22      	ldr	r2, [pc, #136]	@ (800540c <HAL_RCC_GetSysClockFreq+0xdc>)
 8005384:	5cd3      	ldrb	r3, [r2, r3]
 8005386:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	23c0      	movs	r3, #192	@ 0xc0
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	401a      	ands	r2, r3
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	025b      	lsls	r3, r3, #9
 8005394:	429a      	cmp	r2, r3
 8005396:	d109      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	481a      	ldr	r0, [pc, #104]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xd4>)
 800539c:	f7fa fec6 	bl	800012c <__udivsi3>
 80053a0:	0003      	movs	r3, r0
 80053a2:	001a      	movs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4353      	muls	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e01a      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	23c0      	movs	r3, #192	@ 0xc0
 80053b0:	025b      	lsls	r3, r3, #9
 80053b2:	401a      	ands	r2, r3
 80053b4:	23c0      	movs	r3, #192	@ 0xc0
 80053b6:	025b      	lsls	r3, r3, #9
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d109      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4814      	ldr	r0, [pc, #80]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053c0:	f7fa feb4 	bl	800012c <__udivsi3>
 80053c4:	0003      	movs	r3, r0
 80053c6:	001a      	movs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4353      	muls	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	480c      	ldr	r0, [pc, #48]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053d4:	f7fa feaa 	bl	800012c <__udivsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	001a      	movs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4353      	muls	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	613b      	str	r3, [r7, #16]
      break;
 80053e6:	e005      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80053e8:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053ea:	613b      	str	r3, [r7, #16]
      break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053ee:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053f0:	613b      	str	r3, [r7, #16]
      break;
 80053f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053f4:	693b      	ldr	r3, [r7, #16]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b006      	add	sp, #24
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	40021000 	.word	0x40021000
 8005404:	007a1200 	.word	0x007a1200
 8005408:	0800a71c 	.word	0x0800a71c
 800540c:	0800a72c 	.word	0x0800a72c
 8005410:	02dc6c00 	.word	0x02dc6c00

08005414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b02      	ldr	r3, [pc, #8]	@ (8005424 <HAL_RCC_GetHCLKFreq+0x10>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	20000088 	.word	0x20000088

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800542c:	f7ff fff2 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005430:	0001      	movs	r1, r0
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	2207      	movs	r2, #7
 800543a:	4013      	ands	r3, r2
 800543c:	4a04      	ldr	r2, [pc, #16]	@ (8005450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800543e:	5cd3      	ldrb	r3, [r2, r3]
 8005440:	40d9      	lsrs	r1, r3
 8005442:	000b      	movs	r3, r1
}    
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	40021000 	.word	0x40021000
 8005450:	0800a714 	.word	0x0800a714

08005454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	025b      	lsls	r3, r3, #9
 800546c:	4013      	ands	r3, r2
 800546e:	d100      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005470:	e08e      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2017      	movs	r0, #23
 8005474:	183b      	adds	r3, r7, r0
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547a:	4b6e      	ldr	r3, [pc, #440]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	2380      	movs	r3, #128	@ 0x80
 8005480:	055b      	lsls	r3, r3, #21
 8005482:	4013      	ands	r3, r2
 8005484:	d110      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b6b      	ldr	r3, [pc, #428]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	4b6a      	ldr	r3, [pc, #424]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800548c:	2180      	movs	r1, #128	@ 0x80
 800548e:	0549      	lsls	r1, r1, #21
 8005490:	430a      	orrs	r2, r1
 8005492:	61da      	str	r2, [r3, #28]
 8005494:	4b67      	ldr	r3, [pc, #412]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	055b      	lsls	r3, r3, #21
 800549c:	4013      	ands	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a8:	4b63      	ldr	r3, [pc, #396]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	2380      	movs	r3, #128	@ 0x80
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4013      	ands	r3, r2
 80054b2:	d11a      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b4:	4b60      	ldr	r3, [pc, #384]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b5f      	ldr	r3, [pc, #380]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054ba:	2180      	movs	r1, #128	@ 0x80
 80054bc:	0049      	lsls	r1, r1, #1
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c2:	f7fc fa17 	bl	80018f4 <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	e008      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fc fa12 	bl	80018f4 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0a6      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b56      	ldr	r3, [pc, #344]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4013      	ands	r3, r2
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ea:	4b52      	ldr	r3, [pc, #328]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ec:	6a1a      	ldr	r2, [r3, #32]
 80054ee:	23c0      	movs	r3, #192	@ 0xc0
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d034      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	23c0      	movs	r3, #192	@ 0xc0
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4013      	ands	r3, r2
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	429a      	cmp	r2, r3
 800550a:	d02c      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800550c:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	4a4a      	ldr	r2, [pc, #296]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005516:	4b47      	ldr	r3, [pc, #284]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	4b46      	ldr	r3, [pc, #280]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800551c:	2180      	movs	r1, #128	@ 0x80
 800551e:	0249      	lsls	r1, r1, #9
 8005520:	430a      	orrs	r2, r1
 8005522:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005524:	4b43      	ldr	r3, [pc, #268]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800552a:	4945      	ldr	r1, [pc, #276]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800552c:	400a      	ands	r2, r1
 800552e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005530:	4b40      	ldr	r3, [pc, #256]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	4013      	ands	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fc f9d9 	bl	80018f4 <HAL_GetTick>
 8005542:	0003      	movs	r3, r0
 8005544:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005546:	e009      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005548:	f7fc f9d4 	bl	80018f4 <HAL_GetTick>
 800554c:	0002      	movs	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a3c      	ldr	r2, [pc, #240]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e067      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555c:	4b35      	ldr	r3, [pc, #212]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	2202      	movs	r2, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d0f0      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	4b33      	ldr	r3, [pc, #204]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4a34      	ldr	r2, [pc, #208]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b2f      	ldr	r3, [pc, #188]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005576:	430a      	orrs	r2, r1
 8005578:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800557a:	2317      	movs	r3, #23
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b2b      	ldr	r3, [pc, #172]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800558a:	492f      	ldr	r1, [pc, #188]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800558c:	400a      	ands	r2, r1
 800558e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4013      	ands	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559a:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	2203      	movs	r2, #3
 80055a0:	4393      	bics	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	4a23      	ldr	r2, [pc, #140]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2220      	movs	r2, #32
 80055d2:	4013      	ands	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d6:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	2210      	movs	r2, #16
 80055dc:	4393      	bics	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	4013      	ands	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	2280      	movs	r2, #128	@ 0x80
 80055fc:	4393      	bics	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005606:	430a      	orrs	r2, r1
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4013      	ands	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005616:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	4393      	bics	r3, r2
 800561e:	0019      	movs	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	4b03      	ldr	r3, [pc, #12]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005626:	430a      	orrs	r2, r1
 8005628:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	b006      	add	sp, #24
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40021000 	.word	0x40021000
 8005638:	40007000 	.word	0x40007000
 800563c:	fffffcff 	.word	0xfffffcff
 8005640:	fffeffff 	.word	0xfffeffff
 8005644:	00001388 	.word	0x00001388
 8005648:	efffffff 	.word	0xefffffff
 800564c:	fffcffff 	.word	0xfffcffff

08005650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2244      	movs	r2, #68	@ 0x44
 800565c:	2100      	movs	r1, #0
 800565e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <USB_EnableGlobalInt+0x28>)
 8005662:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	b299      	uxth	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2240      	movs	r2, #64	@ 0x40
 800566c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}
 8005678:	0000bf80 	.word	0x0000bf80

0800567c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005684:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <USB_DisableGlobalInt+0x30>)
 8005686:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	@ 0x40
 800568c:	5a9b      	ldrh	r3, [r3, r2]
 800568e:	b29b      	uxth	r3, r3
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	b292      	uxth	r2, r2
 8005694:	43d2      	mvns	r2, r2
 8005696:	b292      	uxth	r2, r2
 8005698:	4013      	ands	r3, r2
 800569a:	b299      	uxth	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2240      	movs	r2, #64	@ 0x40
 80056a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b004      	add	sp, #16
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	0000bf80 	.word	0x0000bf80

080056b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	6019      	str	r1, [r3, #0]
 80056bc:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2240      	movs	r2, #64	@ 0x40
 80056c2:	2101      	movs	r1, #1
 80056c4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2240      	movs	r2, #64	@ 0x40
 80056ca:	2100      	movs	r1, #0
 80056cc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2244      	movs	r2, #68	@ 0x44
 80056d2:	2100      	movs	r1, #0
 80056d4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2250      	movs	r2, #80	@ 0x50
 80056da:	2100      	movs	r1, #0
 80056dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b004      	add	sp, #16
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b09c      	sub	sp, #112	@ 0x70
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056f2:	236f      	movs	r3, #111	@ 0x6f
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	18d3      	adds	r3, r2, r3
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29a      	uxth	r2, r3
 8005708:	236c      	movs	r3, #108	@ 0x6c
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	49a1      	ldr	r1, [pc, #644]	@ (8005994 <USB_ActivateEndpoint+0x2ac>)
 800570e:	400a      	ands	r2, r1
 8005710:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d017      	beq.n	800574a <USB_ActivateEndpoint+0x62>
 800571a:	dc28      	bgt.n	800576e <USB_ActivateEndpoint+0x86>
 800571c:	2b02      	cmp	r3, #2
 800571e:	d00e      	beq.n	800573e <USB_ActivateEndpoint+0x56>
 8005720:	dc25      	bgt.n	800576e <USB_ActivateEndpoint+0x86>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <USB_ActivateEndpoint+0x44>
 8005726:	2b01      	cmp	r3, #1
 8005728:	d018      	beq.n	800575c <USB_ActivateEndpoint+0x74>
 800572a:	e020      	b.n	800576e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800572c:	226c      	movs	r2, #108	@ 0x6c
 800572e:	18bb      	adds	r3, r7, r2
 8005730:	18ba      	adds	r2, r7, r2
 8005732:	8812      	ldrh	r2, [r2, #0]
 8005734:	2180      	movs	r1, #128	@ 0x80
 8005736:	0089      	lsls	r1, r1, #2
 8005738:	430a      	orrs	r2, r1
 800573a:	801a      	strh	r2, [r3, #0]
      break;
 800573c:	e01c      	b.n	8005778 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800573e:	226c      	movs	r2, #108	@ 0x6c
 8005740:	18bb      	adds	r3, r7, r2
 8005742:	18ba      	adds	r2, r7, r2
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	801a      	strh	r2, [r3, #0]
      break;
 8005748:	e016      	b.n	8005778 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800574a:	226c      	movs	r2, #108	@ 0x6c
 800574c:	18bb      	adds	r3, r7, r2
 800574e:	18ba      	adds	r2, r7, r2
 8005750:	8812      	ldrh	r2, [r2, #0]
 8005752:	21c0      	movs	r1, #192	@ 0xc0
 8005754:	00c9      	lsls	r1, r1, #3
 8005756:	430a      	orrs	r2, r1
 8005758:	801a      	strh	r2, [r3, #0]
      break;
 800575a:	e00d      	b.n	8005778 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800575c:	226c      	movs	r2, #108	@ 0x6c
 800575e:	18bb      	adds	r3, r7, r2
 8005760:	18ba      	adds	r2, r7, r2
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	2180      	movs	r1, #128	@ 0x80
 8005766:	00c9      	lsls	r1, r1, #3
 8005768:	430a      	orrs	r2, r1
 800576a:	801a      	strh	r2, [r3, #0]
      break;
 800576c:	e004      	b.n	8005778 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800576e:	236f      	movs	r3, #111	@ 0x6f
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
      break;
 8005776:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	18d3      	adds	r3, r2, r3
 8005782:	226c      	movs	r2, #108	@ 0x6c
 8005784:	18ba      	adds	r2, r7, r2
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	4983      	ldr	r1, [pc, #524]	@ (8005998 <USB_ActivateEndpoint+0x2b0>)
 800578a:	430a      	orrs	r2, r1
 800578c:	b292      	uxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	18d3      	adds	r3, r2, r3
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	b21b      	sxth	r3, r3
 80057a0:	4a7e      	ldr	r2, [pc, #504]	@ (800599c <USB_ActivateEndpoint+0x2b4>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	b21a      	sxth	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b21b      	sxth	r3, r3
 80057ac:	4313      	orrs	r3, r2
 80057ae:	b21a      	sxth	r2, r3
 80057b0:	2166      	movs	r1, #102	@ 0x66
 80057b2:	187b      	adds	r3, r7, r1
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	187a      	adds	r2, r7, r1
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	4974      	ldr	r1, [pc, #464]	@ (8005998 <USB_ActivateEndpoint+0x2b0>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	b292      	uxth	r2, r2
 80057ca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	7b1b      	ldrb	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d000      	beq.n	80057d6 <USB_ActivateEndpoint+0xee>
 80057d4:	e177      	b.n	8005ac6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d100      	bne.n	80057e0 <USB_ActivateEndpoint+0xf8>
 80057de:	e07a      	b.n	80058d6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2250      	movs	r2, #80	@ 0x50
 80057e8:	5a9b      	ldrh	r3, [r3, r2]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	001a      	movs	r2, r3
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00da      	lsls	r2, r3, #3
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	18d3      	adds	r3, r2, r3
 80057fe:	2280      	movs	r2, #128	@ 0x80
 8005800:	00d2      	lsls	r2, r2, #3
 8005802:	4694      	mov	ip, r2
 8005804:	4463      	add	r3, ip
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	88db      	ldrh	r3, [r3, #6]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	b29b      	uxth	r3, r3
 8005810:	18db      	adds	r3, r3, r3
 8005812:	b29a      	uxth	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	18d2      	adds	r2, r2, r3
 8005822:	2112      	movs	r1, #18
 8005824:	187b      	adds	r3, r7, r1
 8005826:	8812      	ldrh	r2, [r2, #0]
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	187b      	adds	r3, r7, r1
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	4013      	ands	r3, r2
 8005832:	d016      	beq.n	8005862 <USB_ActivateEndpoint+0x17a>
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	18d3      	adds	r3, r2, r3
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29a      	uxth	r2, r3
 8005842:	2010      	movs	r0, #16
 8005844:	183b      	adds	r3, r7, r0
 8005846:	4955      	ldr	r1, [pc, #340]	@ (800599c <USB_ActivateEndpoint+0x2b4>)
 8005848:	400a      	ands	r2, r1
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	183a      	adds	r2, r7, r0
 8005858:	8812      	ldrh	r2, [r2, #0]
 800585a:	4951      	ldr	r1, [pc, #324]	@ (80059a0 <USB_ActivateEndpoint+0x2b8>)
 800585c:	430a      	orrs	r2, r1
 800585e:	b292      	uxth	r2, r2
 8005860:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d01d      	beq.n	80058a6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	18d3      	adds	r3, r2, r3
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29a      	uxth	r2, r3
 8005878:	200c      	movs	r0, #12
 800587a:	183b      	adds	r3, r7, r0
 800587c:	4949      	ldr	r1, [pc, #292]	@ (80059a4 <USB_ActivateEndpoint+0x2bc>)
 800587e:	400a      	ands	r2, r1
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	183b      	adds	r3, r7, r0
 8005884:	183a      	adds	r2, r7, r0
 8005886:	8812      	ldrh	r2, [r2, #0]
 8005888:	2120      	movs	r1, #32
 800588a:	404a      	eors	r2, r1
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	18d3      	adds	r3, r2, r3
 8005898:	183a      	adds	r2, r7, r0
 800589a:	8812      	ldrh	r2, [r2, #0]
 800589c:	493e      	ldr	r1, [pc, #248]	@ (8005998 <USB_ActivateEndpoint+0x2b0>)
 800589e:	430a      	orrs	r2, r1
 80058a0:	b292      	uxth	r2, r2
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	e2b5      	b.n	8005e12 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	200e      	movs	r0, #14
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	493a      	ldr	r1, [pc, #232]	@ (80059a4 <USB_ActivateEndpoint+0x2bc>)
 80058ba:	400a      	ands	r2, r1
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	183a      	adds	r2, r7, r0
 80058ca:	8812      	ldrh	r2, [r2, #0]
 80058cc:	4932      	ldr	r1, [pc, #200]	@ (8005998 <USB_ActivateEndpoint+0x2b0>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	b292      	uxth	r2, r2
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e29d      	b.n	8005e12 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2250      	movs	r2, #80	@ 0x50
 80058de:	5a9b      	ldrh	r3, [r3, r2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	001a      	movs	r2, r3
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	00da      	lsls	r2, r3, #3
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	4a2c      	ldr	r2, [pc, #176]	@ (80059a8 <USB_ActivateEndpoint+0x2c0>)
 80058f6:	4694      	mov	ip, r2
 80058f8:	4463      	add	r3, ip
 80058fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	88db      	ldrh	r3, [r3, #6]
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	18db      	adds	r3, r3, r3
 8005906:	b29a      	uxth	r2, r3
 8005908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2250      	movs	r2, #80	@ 0x50
 8005914:	5a9b      	ldrh	r3, [r3, r2]
 8005916:	b29b      	uxth	r3, r3
 8005918:	001a      	movs	r2, r3
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	189b      	adds	r3, r3, r2
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	00da      	lsls	r2, r3, #3
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	4a20      	ldr	r2, [pc, #128]	@ (80059ac <USB_ActivateEndpoint+0x2c4>)
 800592c:	4694      	mov	ip, r2
 800592e:	4463      	add	r3, ip
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	059b      	lsls	r3, r3, #22
 800593a:	0d9b      	lsrs	r3, r3, #22
 800593c:	b29a      	uxth	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <USB_ActivateEndpoint+0x274>
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <USB_ActivateEndpoint+0x2c8>)
 8005952:	4313      	orrs	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e045      	b.n	80059e8 <USB_ActivateEndpoint+0x300>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b3e      	cmp	r3, #62	@ 0x3e
 8005962:	d827      	bhi.n	80059b4 <USB_ActivateEndpoint+0x2cc>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2201      	movs	r2, #1
 8005972:	4013      	ands	r3, r2
 8005974:	d002      	beq.n	800597c <USB_ActivateEndpoint+0x294>
 8005976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005978:	3301      	adds	r3, #1
 800597a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29a      	uxth	r2, r3
 8005982:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005984:	b29b      	uxth	r3, r3
 8005986:	029b      	lsls	r3, r3, #10
 8005988:	b29b      	uxth	r3, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	e029      	b.n	80059e8 <USB_ActivateEndpoint+0x300>
 8005994:	ffff898f 	.word	0xffff898f
 8005998:	ffff8080 	.word	0xffff8080
 800599c:	ffff8f8f 	.word	0xffff8f8f
 80059a0:	ffff80c0 	.word	0xffff80c0
 80059a4:	ffff8fbf 	.word	0xffff8fbf
 80059a8:	00000404 	.word	0x00000404
 80059ac:	00000406 	.word	0x00000406
 80059b0:	ffff8000 	.word	0xffff8000
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	221f      	movs	r2, #31
 80059c2:	4013      	ands	r3, r2
 80059c4:	d102      	bne.n	80059cc <USB_ActivateEndpoint+0x2e4>
 80059c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059c8:	3b01      	subs	r3, #1
 80059ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4313      	orrs	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4ab5      	ldr	r2, [pc, #724]	@ (8005cb4 <USB_ActivateEndpoint+0x5cc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	18d2      	adds	r2, r2, r3
 80059f2:	2122      	movs	r1, #34	@ 0x22
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	01db      	lsls	r3, r3, #7
 8005a02:	4013      	ands	r3, r2
 8005a04:	d016      	beq.n	8005a34 <USB_ActivateEndpoint+0x34c>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	2020      	movs	r0, #32
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	49a7      	ldr	r1, [pc, #668]	@ (8005cb8 <USB_ActivateEndpoint+0x5d0>)
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	183a      	adds	r2, r7, r0
 8005a2a:	8812      	ldrh	r2, [r2, #0]
 8005a2c:	49a3      	ldr	r1, [pc, #652]	@ (8005cbc <USB_ActivateEndpoint+0x5d4>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	b292      	uxth	r2, r2
 8005a32:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d125      	bne.n	8005a88 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	18d3      	adds	r3, r2, r3
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	201c      	movs	r0, #28
 8005a4c:	183b      	adds	r3, r7, r0
 8005a4e:	499c      	ldr	r1, [pc, #624]	@ (8005cc0 <USB_ActivateEndpoint+0x5d8>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	183b      	adds	r3, r7, r0
 8005a56:	183a      	adds	r2, r7, r0
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	2180      	movs	r1, #128	@ 0x80
 8005a5c:	0149      	lsls	r1, r1, #5
 8005a5e:	404a      	eors	r2, r1
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	183b      	adds	r3, r7, r0
 8005a64:	183a      	adds	r2, r7, r0
 8005a66:	8812      	ldrh	r2, [r2, #0]
 8005a68:	2180      	movs	r1, #128	@ 0x80
 8005a6a:	0189      	lsls	r1, r1, #6
 8005a6c:	404a      	eors	r2, r1
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	183a      	adds	r2, r7, r0
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	4991      	ldr	r1, [pc, #580]	@ (8005cc4 <USB_ActivateEndpoint+0x5dc>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	b292      	uxth	r2, r2
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e1c4      	b.n	8005e12 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	18d3      	adds	r3, r2, r3
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	201e      	movs	r0, #30
 8005a98:	183b      	adds	r3, r7, r0
 8005a9a:	4989      	ldr	r1, [pc, #548]	@ (8005cc0 <USB_ActivateEndpoint+0x5d8>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	183b      	adds	r3, r7, r0
 8005aa2:	183a      	adds	r2, r7, r0
 8005aa4:	8812      	ldrh	r2, [r2, #0]
 8005aa6:	2180      	movs	r1, #128	@ 0x80
 8005aa8:	0189      	lsls	r1, r1, #6
 8005aaa:	404a      	eors	r2, r1
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	18d3      	adds	r3, r2, r3
 8005ab8:	183a      	adds	r2, r7, r0
 8005aba:	8812      	ldrh	r2, [r2, #0]
 8005abc:	4981      	ldr	r1, [pc, #516]	@ (8005cc4 <USB_ActivateEndpoint+0x5dc>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e1a5      	b.n	8005e12 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d117      	bne.n	8005afe <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	18d3      	adds	r3, r2, r3
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	2062      	movs	r0, #98	@ 0x62
 8005ade:	183b      	adds	r3, r7, r0
 8005ae0:	4975      	ldr	r1, [pc, #468]	@ (8005cb8 <USB_ActivateEndpoint+0x5d0>)
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	18d3      	adds	r3, r2, r3
 8005af0:	183a      	adds	r2, r7, r0
 8005af2:	8812      	ldrh	r2, [r2, #0]
 8005af4:	4974      	ldr	r1, [pc, #464]	@ (8005cc8 <USB_ActivateEndpoint+0x5e0>)
 8005af6:	430a      	orrs	r2, r1
 8005af8:	b292      	uxth	r2, r2
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e016      	b.n	8005b2c <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	18d3      	adds	r3, r2, r3
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	2064      	movs	r0, #100	@ 0x64
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	496e      	ldr	r1, [pc, #440]	@ (8005ccc <USB_ActivateEndpoint+0x5e4>)
 8005b12:	400a      	ands	r2, r1
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	18d3      	adds	r3, r2, r3
 8005b20:	183a      	adds	r2, r7, r0
 8005b22:	8812      	ldrh	r2, [r2, #0]
 8005b24:	4967      	ldr	r1, [pc, #412]	@ (8005cc4 <USB_ActivateEndpoint+0x5dc>)
 8005b26:	430a      	orrs	r2, r1
 8005b28:	b292      	uxth	r2, r2
 8005b2a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2250      	movs	r2, #80	@ 0x50
 8005b34:	5a9b      	ldrh	r3, [r3, r2]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	001a      	movs	r2, r3
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b3c:	189b      	adds	r3, r3, r2
 8005b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	00da      	lsls	r2, r3, #3
 8005b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b48:	18d3      	adds	r3, r2, r3
 8005b4a:	2280      	movs	r2, #128	@ 0x80
 8005b4c:	00d2      	lsls	r2, r2, #3
 8005b4e:	4694      	mov	ip, r2
 8005b50:	4463      	add	r3, ip
 8005b52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	891b      	ldrh	r3, [r3, #8]
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	18db      	adds	r3, r3, r3
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2250      	movs	r2, #80	@ 0x50
 8005b6c:	5a9b      	ldrh	r3, [r3, r2]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	001a      	movs	r2, r3
 8005b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	00da      	lsls	r2, r3, #3
 8005b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	4a53      	ldr	r2, [pc, #332]	@ (8005cd0 <USB_ActivateEndpoint+0x5e8>)
 8005b84:	4694      	mov	ip, r2
 8005b86:	4463      	add	r3, ip
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	895b      	ldrh	r3, [r3, #10]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	18db      	adds	r3, r3, r3
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b98:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d000      	beq.n	8005ba4 <USB_ActivateEndpoint+0x4bc>
 8005ba2:	e09b      	b.n	8005cdc <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	18d2      	adds	r2, r2, r3
 8005bae:	2140      	movs	r1, #64	@ 0x40
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	8812      	ldrh	r2, [r2, #0]
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	187b      	adds	r3, r7, r1
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	01db      	lsls	r3, r3, #7
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d016      	beq.n	8005bf0 <USB_ActivateEndpoint+0x508>
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	18d3      	adds	r3, r2, r3
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	203e      	movs	r0, #62	@ 0x3e
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	4938      	ldr	r1, [pc, #224]	@ (8005cb8 <USB_ActivateEndpoint+0x5d0>)
 8005bd6:	400a      	ands	r2, r1
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	18d3      	adds	r3, r2, r3
 8005be4:	183a      	adds	r2, r7, r0
 8005be6:	8812      	ldrh	r2, [r2, #0]
 8005be8:	4934      	ldr	r1, [pc, #208]	@ (8005cbc <USB_ActivateEndpoint+0x5d4>)
 8005bea:	430a      	orrs	r2, r1
 8005bec:	b292      	uxth	r2, r2
 8005bee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	18d2      	adds	r2, r2, r3
 8005bfa:	213c      	movs	r1, #60	@ 0x3c
 8005bfc:	187b      	adds	r3, r7, r1
 8005bfe:	8812      	ldrh	r2, [r2, #0]
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	187b      	adds	r3, r7, r1
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d016      	beq.n	8005c3a <USB_ActivateEndpoint+0x552>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	203a      	movs	r0, #58	@ 0x3a
 8005c1c:	183b      	adds	r3, r7, r0
 8005c1e:	4926      	ldr	r1, [pc, #152]	@ (8005cb8 <USB_ActivateEndpoint+0x5d0>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	183a      	adds	r2, r7, r0
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	4928      	ldr	r1, [pc, #160]	@ (8005cd4 <USB_ActivateEndpoint+0x5ec>)
 8005c34:	430a      	orrs	r2, r1
 8005c36:	b292      	uxth	r2, r2
 8005c38:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	18d3      	adds	r3, r2, r3
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	2038      	movs	r0, #56	@ 0x38
 8005c4a:	183b      	adds	r3, r7, r0
 8005c4c:	491c      	ldr	r1, [pc, #112]	@ (8005cc0 <USB_ActivateEndpoint+0x5d8>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	183b      	adds	r3, r7, r0
 8005c54:	183a      	adds	r2, r7, r0
 8005c56:	8812      	ldrh	r2, [r2, #0]
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	0149      	lsls	r1, r1, #5
 8005c5c:	404a      	eors	r2, r1
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	183b      	adds	r3, r7, r0
 8005c62:	183a      	adds	r2, r7, r0
 8005c64:	8812      	ldrh	r2, [r2, #0]
 8005c66:	2180      	movs	r1, #128	@ 0x80
 8005c68:	0189      	lsls	r1, r1, #6
 8005c6a:	404a      	eors	r2, r1
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	18d3      	adds	r3, r2, r3
 8005c78:	183a      	adds	r2, r7, r0
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	4911      	ldr	r1, [pc, #68]	@ (8005cc4 <USB_ActivateEndpoint+0x5dc>)
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	b292      	uxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	2036      	movs	r0, #54	@ 0x36
 8005c94:	183b      	adds	r3, r7, r0
 8005c96:	4910      	ldr	r1, [pc, #64]	@ (8005cd8 <USB_ActivateEndpoint+0x5f0>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	183a      	adds	r2, r7, r0
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	4906      	ldr	r1, [pc, #24]	@ (8005cc4 <USB_ActivateEndpoint+0x5dc>)
 8005cac:	430a      	orrs	r2, r1
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e0ae      	b.n	8005e12 <USB_ActivateEndpoint+0x72a>
 8005cb4:	ffff8000 	.word	0xffff8000
 8005cb8:	ffff8f8f 	.word	0xffff8f8f
 8005cbc:	ffffc080 	.word	0xffffc080
 8005cc0:	ffffbf8f 	.word	0xffffbf8f
 8005cc4:	ffff8080 	.word	0xffff8080
 8005cc8:	ffff8180 	.word	0xffff8180
 8005ccc:	ffff8e8f 	.word	0xffff8e8f
 8005cd0:	00000404 	.word	0x00000404
 8005cd4:	ffff80c0 	.word	0xffff80c0
 8005cd8:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	18d2      	adds	r2, r2, r3
 8005ce6:	214e      	movs	r1, #78	@ 0x4e
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	8812      	ldrh	r2, [r2, #0]
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	2380      	movs	r3, #128	@ 0x80
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d016      	beq.n	8005d28 <USB_ActivateEndpoint+0x640>
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	18d3      	adds	r3, r2, r3
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	204c      	movs	r0, #76	@ 0x4c
 8005d0a:	183b      	adds	r3, r7, r0
 8005d0c:	4944      	ldr	r1, [pc, #272]	@ (8005e20 <USB_ActivateEndpoint+0x738>)
 8005d0e:	400a      	ands	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	18d3      	adds	r3, r2, r3
 8005d1c:	183a      	adds	r2, r7, r0
 8005d1e:	8812      	ldrh	r2, [r2, #0]
 8005d20:	4940      	ldr	r1, [pc, #256]	@ (8005e24 <USB_ActivateEndpoint+0x73c>)
 8005d22:	430a      	orrs	r2, r1
 8005d24:	b292      	uxth	r2, r2
 8005d26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	18d2      	adds	r2, r2, r3
 8005d32:	214a      	movs	r1, #74	@ 0x4a
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	8812      	ldrh	r2, [r2, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	2240      	movs	r2, #64	@ 0x40
 8005d40:	4013      	ands	r3, r2
 8005d42:	d016      	beq.n	8005d72 <USB_ActivateEndpoint+0x68a>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	18d3      	adds	r3, r2, r3
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	2048      	movs	r0, #72	@ 0x48
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	4932      	ldr	r1, [pc, #200]	@ (8005e20 <USB_ActivateEndpoint+0x738>)
 8005d58:	400a      	ands	r2, r1
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	18d3      	adds	r3, r2, r3
 8005d66:	183a      	adds	r2, r7, r0
 8005d68:	8812      	ldrh	r2, [r2, #0]
 8005d6a:	492f      	ldr	r1, [pc, #188]	@ (8005e28 <USB_ActivateEndpoint+0x740>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	78db      	ldrb	r3, [r3, #3]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d01d      	beq.n	8005db6 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	18d3      	adds	r3, r2, r3
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	2044      	movs	r0, #68	@ 0x44
 8005d8a:	183b      	adds	r3, r7, r0
 8005d8c:	4927      	ldr	r1, [pc, #156]	@ (8005e2c <USB_ActivateEndpoint+0x744>)
 8005d8e:	400a      	ands	r2, r1
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	183b      	adds	r3, r7, r0
 8005d94:	183a      	adds	r2, r7, r0
 8005d96:	8812      	ldrh	r2, [r2, #0]
 8005d98:	2120      	movs	r1, #32
 8005d9a:	404a      	eors	r2, r1
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	18d3      	adds	r3, r2, r3
 8005da8:	183a      	adds	r2, r7, r0
 8005daa:	8812      	ldrh	r2, [r2, #0]
 8005dac:	4920      	ldr	r1, [pc, #128]	@ (8005e30 <USB_ActivateEndpoint+0x748>)
 8005dae:	430a      	orrs	r2, r1
 8005db0:	b292      	uxth	r2, r2
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e016      	b.n	8005de4 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	18d3      	adds	r3, r2, r3
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	2046      	movs	r0, #70	@ 0x46
 8005dc6:	183b      	adds	r3, r7, r0
 8005dc8:	4918      	ldr	r1, [pc, #96]	@ (8005e2c <USB_ActivateEndpoint+0x744>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	183a      	adds	r2, r7, r0
 8005dda:	8812      	ldrh	r2, [r2, #0]
 8005ddc:	4914      	ldr	r1, [pc, #80]	@ (8005e30 <USB_ActivateEndpoint+0x748>)
 8005dde:	430a      	orrs	r2, r1
 8005de0:	b292      	uxth	r2, r2
 8005de2:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	18d3      	adds	r3, r2, r3
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	2042      	movs	r0, #66	@ 0x42
 8005df4:	183b      	adds	r3, r7, r0
 8005df6:	490f      	ldr	r1, [pc, #60]	@ (8005e34 <USB_ActivateEndpoint+0x74c>)
 8005df8:	400a      	ands	r2, r1
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	183a      	adds	r2, r7, r0
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	4909      	ldr	r1, [pc, #36]	@ (8005e30 <USB_ActivateEndpoint+0x748>)
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e12:	236f      	movs	r3, #111	@ 0x6f
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	781b      	ldrb	r3, [r3, #0]
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b01c      	add	sp, #112	@ 0x70
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	ffff8f8f 	.word	0xffff8f8f
 8005e24:	ffffc080 	.word	0xffffc080
 8005e28:	ffff80c0 	.word	0xffff80c0
 8005e2c:	ffff8fbf 	.word	0xffff8fbf
 8005e30:	ffff8080 	.word	0xffff8080
 8005e34:	ffffbf8f 	.word	0xffffbf8f

08005e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08c      	sub	sp, #48	@ 0x30
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7b1b      	ldrb	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d000      	beq.n	8005e4c <USB_DeactivateEndpoint+0x14>
 8005e4a:	e07e      	b.n	8005f4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d03c      	beq.n	8005ece <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	18d2      	adds	r2, r2, r3
 8005e5e:	210c      	movs	r1, #12
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	2240      	movs	r2, #64	@ 0x40
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d016      	beq.n	8005e9e <USB_DeactivateEndpoint+0x66>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	18d3      	adds	r3, r2, r3
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	200a      	movs	r0, #10
 8005e80:	183b      	adds	r3, r7, r0
 8005e82:	49c7      	ldr	r1, [pc, #796]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	18d3      	adds	r3, r2, r3
 8005e92:	183a      	adds	r2, r7, r0
 8005e94:	8812      	ldrh	r2, [r2, #0]
 8005e96:	49c3      	ldr	r1, [pc, #780]	@ (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	2008      	movs	r0, #8
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	49bd      	ldr	r1, [pc, #756]	@ (80061a8 <USB_DeactivateEndpoint+0x370>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	18d3      	adds	r3, r2, r3
 8005ec0:	183a      	adds	r2, r7, r0
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	49b9      	ldr	r1, [pc, #740]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	b292      	uxth	r2, r2
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e163      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	18d2      	adds	r2, r2, r3
 8005ed8:	2112      	movs	r1, #18
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	8812      	ldrh	r2, [r2, #0]
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	881a      	ldrh	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	01db      	lsls	r3, r3, #7
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d016      	beq.n	8005f1a <USB_DeactivateEndpoint+0xe2>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	2010      	movs	r0, #16
 8005efc:	183b      	adds	r3, r7, r0
 8005efe:	49a8      	ldr	r1, [pc, #672]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	18d3      	adds	r3, r2, r3
 8005f0e:	183a      	adds	r2, r7, r0
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	49a7      	ldr	r1, [pc, #668]	@ (80061b0 <USB_DeactivateEndpoint+0x378>)
 8005f14:	430a      	orrs	r2, r1
 8005f16:	b292      	uxth	r2, r2
 8005f18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	18d3      	adds	r3, r2, r3
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	200e      	movs	r0, #14
 8005f2a:	183b      	adds	r3, r7, r0
 8005f2c:	49a1      	ldr	r1, [pc, #644]	@ (80061b4 <USB_DeactivateEndpoint+0x37c>)
 8005f2e:	400a      	ands	r2, r1
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	183a      	adds	r2, r7, r0
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	499a      	ldr	r1, [pc, #616]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 8005f42:	430a      	orrs	r2, r1
 8005f44:	b292      	uxth	r2, r2
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e125      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d000      	beq.n	8005f54 <USB_DeactivateEndpoint+0x11c>
 8005f52:	e090      	b.n	8006076 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	18d2      	adds	r2, r2, r3
 8005f5e:	2120      	movs	r1, #32
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	2380      	movs	r3, #128	@ 0x80
 8005f6c:	01db      	lsls	r3, r3, #7
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d016      	beq.n	8005fa0 <USB_DeactivateEndpoint+0x168>
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	18d3      	adds	r3, r2, r3
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	201e      	movs	r0, #30
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	4986      	ldr	r1, [pc, #536]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	18d3      	adds	r3, r2, r3
 8005f94:	183a      	adds	r2, r7, r0
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	4985      	ldr	r1, [pc, #532]	@ (80061b0 <USB_DeactivateEndpoint+0x378>)
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	18d2      	adds	r2, r2, r3
 8005faa:	211c      	movs	r1, #28
 8005fac:	187b      	adds	r3, r7, r1
 8005fae:	8812      	ldrh	r2, [r2, #0]
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	187b      	adds	r3, r7, r1
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	2240      	movs	r2, #64	@ 0x40
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d016      	beq.n	8005fea <USB_DeactivateEndpoint+0x1b2>
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	201a      	movs	r0, #26
 8005fcc:	183b      	adds	r3, r7, r0
 8005fce:	4974      	ldr	r1, [pc, #464]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	183a      	adds	r2, r7, r0
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	4970      	ldr	r1, [pc, #448]	@ (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	18d3      	adds	r3, r2, r3
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	2018      	movs	r0, #24
 8005ffa:	183b      	adds	r3, r7, r0
 8005ffc:	4968      	ldr	r1, [pc, #416]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005ffe:	400a      	ands	r2, r1
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	183a      	adds	r2, r7, r0
 800600e:	8812      	ldrh	r2, [r2, #0]
 8006010:	4964      	ldr	r1, [pc, #400]	@ (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8006012:	430a      	orrs	r2, r1
 8006014:	b292      	uxth	r2, r2
 8006016:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29a      	uxth	r2, r3
 8006026:	2016      	movs	r0, #22
 8006028:	183b      	adds	r3, r7, r0
 800602a:	4962      	ldr	r1, [pc, #392]	@ (80061b4 <USB_DeactivateEndpoint+0x37c>)
 800602c:	400a      	ands	r2, r1
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	183a      	adds	r2, r7, r0
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	495b      	ldr	r1, [pc, #364]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 8006040:	430a      	orrs	r2, r1
 8006042:	b292      	uxth	r2, r2
 8006044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	18d3      	adds	r3, r2, r3
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	2014      	movs	r0, #20
 8006056:	183b      	adds	r3, r7, r0
 8006058:	4953      	ldr	r1, [pc, #332]	@ (80061a8 <USB_DeactivateEndpoint+0x370>)
 800605a:	400a      	ands	r2, r1
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	18d3      	adds	r3, r2, r3
 8006068:	183a      	adds	r2, r7, r0
 800606a:	8812      	ldrh	r2, [r2, #0]
 800606c:	494f      	ldr	r1, [pc, #316]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 800606e:	430a      	orrs	r2, r1
 8006070:	b292      	uxth	r2, r2
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e08f      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	18d2      	adds	r2, r2, r3
 8006080:	212e      	movs	r1, #46	@ 0x2e
 8006082:	187b      	adds	r3, r7, r1
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	187b      	adds	r3, r7, r1
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	2380      	movs	r3, #128	@ 0x80
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4013      	ands	r3, r2
 8006092:	d016      	beq.n	80060c2 <USB_DeactivateEndpoint+0x28a>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	18d3      	adds	r3, r2, r3
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	202c      	movs	r0, #44	@ 0x2c
 80060a4:	183b      	adds	r3, r7, r0
 80060a6:	493e      	ldr	r1, [pc, #248]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 80060a8:	400a      	ands	r2, r1
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	183a      	adds	r2, r7, r0
 80060b8:	8812      	ldrh	r2, [r2, #0]
 80060ba:	493d      	ldr	r1, [pc, #244]	@ (80061b0 <USB_DeactivateEndpoint+0x378>)
 80060bc:	430a      	orrs	r2, r1
 80060be:	b292      	uxth	r2, r2
 80060c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	18d2      	adds	r2, r2, r3
 80060cc:	212a      	movs	r1, #42	@ 0x2a
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	8812      	ldrh	r2, [r2, #0]
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2240      	movs	r2, #64	@ 0x40
 80060da:	4013      	ands	r3, r2
 80060dc:	d016      	beq.n	800610c <USB_DeactivateEndpoint+0x2d4>
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	2028      	movs	r0, #40	@ 0x28
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	492b      	ldr	r1, [pc, #172]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 80060f2:	400a      	ands	r2, r1
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	183a      	adds	r2, r7, r0
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	4927      	ldr	r1, [pc, #156]	@ (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8006106:	430a      	orrs	r2, r1
 8006108:	b292      	uxth	r2, r2
 800610a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	18d3      	adds	r3, r2, r3
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29a      	uxth	r2, r3
 800611a:	2026      	movs	r0, #38	@ 0x26
 800611c:	183b      	adds	r3, r7, r0
 800611e:	4920      	ldr	r1, [pc, #128]	@ (80061a0 <USB_DeactivateEndpoint+0x368>)
 8006120:	400a      	ands	r2, r1
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	183a      	adds	r2, r7, r0
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	491f      	ldr	r1, [pc, #124]	@ (80061b0 <USB_DeactivateEndpoint+0x378>)
 8006134:	430a      	orrs	r2, r1
 8006136:	b292      	uxth	r2, r2
 8006138:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	2024      	movs	r0, #36	@ 0x24
 800614a:	183b      	adds	r3, r7, r0
 800614c:	4916      	ldr	r1, [pc, #88]	@ (80061a8 <USB_DeactivateEndpoint+0x370>)
 800614e:	400a      	ands	r2, r1
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	18d3      	adds	r3, r2, r3
 800615c:	183a      	adds	r2, r7, r0
 800615e:	8812      	ldrh	r2, [r2, #0]
 8006160:	4912      	ldr	r1, [pc, #72]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 8006162:	430a      	orrs	r2, r1
 8006164:	b292      	uxth	r2, r2
 8006166:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	18d3      	adds	r3, r2, r3
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29a      	uxth	r2, r3
 8006176:	2022      	movs	r0, #34	@ 0x22
 8006178:	183b      	adds	r3, r7, r0
 800617a:	490e      	ldr	r1, [pc, #56]	@ (80061b4 <USB_DeactivateEndpoint+0x37c>)
 800617c:	400a      	ands	r2, r1
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	183a      	adds	r2, r7, r0
 800618c:	8812      	ldrh	r2, [r2, #0]
 800618e:	4907      	ldr	r1, [pc, #28]	@ (80061ac <USB_DeactivateEndpoint+0x374>)
 8006190:	430a      	orrs	r2, r1
 8006192:	b292      	uxth	r2, r2
 8006194:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b00c      	add	sp, #48	@ 0x30
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	ffff8f8f 	.word	0xffff8f8f
 80061a4:	ffff80c0 	.word	0xffff80c0
 80061a8:	ffff8fbf 	.word	0xffff8fbf
 80061ac:	ffff8080 	.word	0xffff8080
 80061b0:	ffffc080 	.word	0xffffc080
 80061b4:	ffffbf8f 	.word	0xffffbf8f

080061b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b0c3      	sub	sp, #268	@ 0x10c
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d001      	beq.n	80061ce <USB_EPStartXfer+0x16>
 80061ca:	f000 fd2d 	bl	8006c28 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d905      	bls.n	80061e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	1d7a      	adds	r2, r7, #5
 80061e0:	32ff      	adds	r2, #255	@ 0xff
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e004      	b.n	80061f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	1d7a      	adds	r2, r7, #5
 80061ec:	32ff      	adds	r2, #255	@ 0xff
 80061ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	7b1b      	ldrb	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d125      	bne.n	8006244 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	88da      	ldrh	r2, [r3, #6]
 8006200:	1d7b      	adds	r3, r7, #5
 8006202:	33ff      	adds	r3, #255	@ 0xff
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fa3f 	bl	800768c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2250      	movs	r2, #80	@ 0x50
 8006216:	5a9b      	ldrh	r3, [r3, r2]
 8006218:	b29b      	uxth	r3, r3
 800621a:	001a      	movs	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	189b      	adds	r3, r3, r2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	4ad7      	ldr	r2, [pc, #860]	@ (800658c <USB_EPStartXfer+0x3d4>)
 800622e:	4694      	mov	ip, r2
 8006230:	4463      	add	r3, ip
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	1d7b      	adds	r3, r7, #5
 8006236:	33ff      	adds	r3, #255	@ 0xff
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	f000 fccd 	bl	8006bde <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	78db      	ldrb	r3, [r3, #3]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d000      	beq.n	800624e <USB_EPStartXfer+0x96>
 800624c:	e362      	b.n	8006914 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d800      	bhi.n	800625c <USB_EPStartXfer+0xa4>
 800625a:	e309      	b.n	8006870 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	18d3      	adds	r3, r2, r3
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	2056      	movs	r0, #86	@ 0x56
 800626c:	183b      	adds	r3, r7, r0
 800626e:	49c8      	ldr	r1, [pc, #800]	@ (8006590 <USB_EPStartXfer+0x3d8>)
 8006270:	400a      	ands	r2, r1
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	18d3      	adds	r3, r2, r3
 800627e:	183a      	adds	r2, r7, r0
 8006280:	8812      	ldrh	r2, [r2, #0]
 8006282:	49c4      	ldr	r1, [pc, #784]	@ (8006594 <USB_EPStartXfer+0x3dc>)
 8006284:	430a      	orrs	r2, r1
 8006286:	b292      	uxth	r2, r2
 8006288:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	1d7b      	adds	r3, r7, #5
 8006290:	33ff      	adds	r3, #255	@ 0xff
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1ad2      	subs	r2, r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	001a      	movs	r2, r3
 80062aa:	2340      	movs	r3, #64	@ 0x40
 80062ac:	4013      	ands	r3, r2
 80062ae:	d100      	bne.n	80062b2 <USB_EPStartXfer+0xfa>
 80062b0:	e176      	b.n	80065a0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d000      	beq.n	80062c0 <USB_EPStartXfer+0x108>
 80062be:	e074      	b.n	80063aa <USB_EPStartXfer+0x1f2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2250      	movs	r2, #80	@ 0x50
 80062c8:	5a9b      	ldrh	r3, [r3, r2]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	001a      	movs	r2, r3
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00da      	lsls	r2, r3, #3
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	4aae      	ldr	r2, [pc, #696]	@ (8006598 <USB_EPStartXfer+0x3e0>)
 80062e0:	4694      	mov	ip, r2
 80062e2:	4463      	add	r3, ip
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	059b      	lsls	r3, r3, #22
 80062ee:	0d9b      	lsrs	r3, r3, #22
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	1d7b      	adds	r3, r7, #5
 80062f8:	33ff      	adds	r3, #255	@ 0xff
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <USB_EPStartXfer+0x15a>
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	4aa5      	ldr	r2, [pc, #660]	@ (800659c <USB_EPStartXfer+0x3e4>)
 8006308:	4313      	orrs	r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e066      	b.n	80063e0 <USB_EPStartXfer+0x228>
 8006312:	1d7b      	adds	r3, r7, #5
 8006314:	33ff      	adds	r3, #255	@ 0xff
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b3e      	cmp	r3, #62	@ 0x3e
 800631a:	d821      	bhi.n	8006360 <USB_EPStartXfer+0x1a8>
 800631c:	1d7b      	adds	r3, r7, #5
 800631e:	33ff      	adds	r3, #255	@ 0xff
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	1c7a      	adds	r2, r7, #1
 8006326:	32ff      	adds	r2, #255	@ 0xff
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	1d7b      	adds	r3, r7, #5
 800632c:	33ff      	adds	r3, #255	@ 0xff
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	4013      	ands	r3, r2
 8006334:	d006      	beq.n	8006344 <USB_EPStartXfer+0x18c>
 8006336:	1c7b      	adds	r3, r7, #1
 8006338:	33ff      	adds	r3, #255	@ 0xff
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	1c7a      	adds	r2, r7, #1
 8006340:	32ff      	adds	r2, #255	@ 0xff
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29a      	uxth	r2, r3
 800634a:	1c7b      	adds	r3, r7, #1
 800634c:	33ff      	adds	r3, #255	@ 0xff
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	b29b      	uxth	r3, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	b29a      	uxth	r2, r3
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e03f      	b.n	80063e0 <USB_EPStartXfer+0x228>
 8006360:	1d7b      	adds	r3, r7, #5
 8006362:	33ff      	adds	r3, #255	@ 0xff
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	1c7a      	adds	r2, r7, #1
 800636a:	32ff      	adds	r2, #255	@ 0xff
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	1d7b      	adds	r3, r7, #5
 8006370:	33ff      	adds	r3, #255	@ 0xff
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	221f      	movs	r2, #31
 8006376:	4013      	ands	r3, r2
 8006378:	d106      	bne.n	8006388 <USB_EPStartXfer+0x1d0>
 800637a:	1c7b      	adds	r3, r7, #1
 800637c:	33ff      	adds	r3, #255	@ 0xff
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3b01      	subs	r3, #1
 8006382:	1c7a      	adds	r2, r7, #1
 8006384:	32ff      	adds	r2, #255	@ 0xff
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	1c7b      	adds	r3, r7, #1
 8006390:	33ff      	adds	r3, #255	@ 0xff
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29b      	uxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	4a7f      	ldr	r2, [pc, #508]	@ (800659c <USB_EPStartXfer+0x3e4>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e01a      	b.n	80063e0 <USB_EPStartXfer+0x228>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d116      	bne.n	80063e0 <USB_EPStartXfer+0x228>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2250      	movs	r2, #80	@ 0x50
 80063b6:	5a9b      	ldrh	r3, [r3, r2]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	001a      	movs	r2, r3
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	00da      	lsls	r2, r3, #3
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	18d3      	adds	r3, r2, r3
 80063cc:	4a72      	ldr	r2, [pc, #456]	@ (8006598 <USB_EPStartXfer+0x3e0>)
 80063ce:	4694      	mov	ip, r2
 80063d0:	4463      	add	r3, ip
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d4:	1d7b      	adds	r3, r7, #5
 80063d6:	33ff      	adds	r3, #255	@ 0xff
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063e0:	2076      	movs	r0, #118	@ 0x76
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	8952      	ldrh	r2, [r2, #10]
 80063e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6959      	ldr	r1, [r3, #20]
 80063ee:	1d7b      	adds	r3, r7, #5
 80063f0:	33ff      	adds	r3, #255	@ 0xff
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b29c      	uxth	r4, r3
 80063f6:	183b      	adds	r3, r7, r0
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	0023      	movs	r3, r4
 80063fe:	f001 f945 	bl	800768c <USB_WritePMA>
            ep->xfer_buff += len;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	1d7b      	adds	r3, r7, #5
 8006408:	33ff      	adds	r3, #255	@ 0xff
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	18d2      	adds	r2, r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	d908      	bls.n	8006430 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	1d7b      	adds	r3, r7, #5
 8006424:	33ff      	adds	r3, #255	@ 0xff
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	621a      	str	r2, [r3, #32]
 800642e:	e007      	b.n	8006440 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	1d7a      	adds	r2, r7, #5
 8006436:	32ff      	adds	r2, #255	@ 0xff
 8006438:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d000      	beq.n	800644a <USB_EPStartXfer+0x292>
 8006448:	e070      	b.n	800652c <USB_EPStartXfer+0x374>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2250      	movs	r2, #80	@ 0x50
 8006452:	5a9b      	ldrh	r3, [r3, r2]
 8006454:	b29b      	uxth	r3, r3
 8006456:	001a      	movs	r2, r3
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	189b      	adds	r3, r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	00da      	lsls	r2, r3, #3
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	18d3      	adds	r3, r2, r3
 8006468:	4a48      	ldr	r2, [pc, #288]	@ (800658c <USB_EPStartXfer+0x3d4>)
 800646a:	4694      	mov	ip, r2
 800646c:	4463      	add	r3, ip
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	059b      	lsls	r3, r3, #22
 8006478:	0d9b      	lsrs	r3, r3, #22
 800647a:	b29a      	uxth	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	1d7b      	adds	r3, r7, #5
 8006482:	33ff      	adds	r3, #255	@ 0xff
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d108      	bne.n	800649c <USB_EPStartXfer+0x2e4>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	4a42      	ldr	r2, [pc, #264]	@ (800659c <USB_EPStartXfer+0x3e4>)
 8006492:	4313      	orrs	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e064      	b.n	8006566 <USB_EPStartXfer+0x3ae>
 800649c:	1d7b      	adds	r3, r7, #5
 800649e:	33ff      	adds	r3, #255	@ 0xff
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a4:	d81f      	bhi.n	80064e6 <USB_EPStartXfer+0x32e>
 80064a6:	1d7b      	adds	r3, r7, #5
 80064a8:	33ff      	adds	r3, #255	@ 0xff
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	21fc      	movs	r1, #252	@ 0xfc
 80064b0:	187a      	adds	r2, r7, r1
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	1d7b      	adds	r3, r7, #5
 80064b6:	33ff      	adds	r3, #255	@ 0xff
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2201      	movs	r2, #1
 80064bc:	4013      	ands	r3, r2
 80064be:	d004      	beq.n	80064ca <USB_EPStartXfer+0x312>
 80064c0:	187b      	adds	r3, r7, r1
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	187a      	adds	r2, r7, r1
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	23fc      	movs	r3, #252	@ 0xfc
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e03f      	b.n	8006566 <USB_EPStartXfer+0x3ae>
 80064e6:	1d7b      	adds	r3, r7, #5
 80064e8:	33ff      	adds	r3, #255	@ 0xff
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	21fc      	movs	r1, #252	@ 0xfc
 80064f0:	187a      	adds	r2, r7, r1
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	1d7b      	adds	r3, r7, #5
 80064f6:	33ff      	adds	r3, #255	@ 0xff
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	221f      	movs	r2, #31
 80064fc:	4013      	ands	r3, r2
 80064fe:	d104      	bne.n	800650a <USB_EPStartXfer+0x352>
 8006500:	187b      	adds	r3, r7, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3b01      	subs	r3, #1
 8006506:	187a      	adds	r2, r7, r1
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	23fc      	movs	r3, #252	@ 0xfc
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	b29b      	uxth	r3, r3
 800651c:	4313      	orrs	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	4a1e      	ldr	r2, [pc, #120]	@ (800659c <USB_EPStartXfer+0x3e4>)
 8006522:	4313      	orrs	r3, r2
 8006524:	b29a      	uxth	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e01c      	b.n	8006566 <USB_EPStartXfer+0x3ae>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d118      	bne.n	8006566 <USB_EPStartXfer+0x3ae>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2250      	movs	r2, #80	@ 0x50
 800653c:	5a9b      	ldrh	r3, [r3, r2]
 800653e:	b29b      	uxth	r3, r3
 8006540:	001a      	movs	r2, r3
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	189b      	adds	r3, r3, r2
 8006546:	623b      	str	r3, [r7, #32]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	00da      	lsls	r2, r3, #3
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	18d3      	adds	r3, r2, r3
 8006552:	4a0e      	ldr	r2, [pc, #56]	@ (800658c <USB_EPStartXfer+0x3d4>)
 8006554:	4694      	mov	ip, r2
 8006556:	4463      	add	r3, ip
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	1d7b      	adds	r3, r7, #5
 800655c:	33ff      	adds	r3, #255	@ 0xff
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006566:	2076      	movs	r0, #118	@ 0x76
 8006568:	183b      	adds	r3, r7, r0
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	8912      	ldrh	r2, [r2, #8]
 800656e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	1d7b      	adds	r3, r7, #5
 8006576:	33ff      	adds	r3, #255	@ 0xff
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	b29c      	uxth	r4, r3
 800657c:	183b      	adds	r3, r7, r0
 800657e:	881a      	ldrh	r2, [r3, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	0023      	movs	r3, r4
 8006584:	f001 f882 	bl	800768c <USB_WritePMA>
 8006588:	e329      	b.n	8006bde <USB_EPStartXfer+0xa26>
 800658a:	46c0      	nop			@ (mov r8, r8)
 800658c:	00000402 	.word	0x00000402
 8006590:	ffff8f8f 	.word	0xffff8f8f
 8006594:	ffff8180 	.word	0xffff8180
 8006598:	00000406 	.word	0x00000406
 800659c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d000      	beq.n	80065aa <USB_EPStartXfer+0x3f2>
 80065a8:	e070      	b.n	800668c <USB_EPStartXfer+0x4d4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2250      	movs	r2, #80	@ 0x50
 80065b2:	5a9b      	ldrh	r3, [r3, r2]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	001a      	movs	r2, r3
 80065b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	00da      	lsls	r2, r3, #3
 80065c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c6:	18d3      	adds	r3, r2, r3
 80065c8:	4acd      	ldr	r2, [pc, #820]	@ (8006900 <USB_EPStartXfer+0x748>)
 80065ca:	4694      	mov	ip, r2
 80065cc:	4463      	add	r3, ip
 80065ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	059b      	lsls	r3, r3, #22
 80065d8:	0d9b      	lsrs	r3, r3, #22
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065de:	801a      	strh	r2, [r3, #0]
 80065e0:	1d7b      	adds	r3, r7, #5
 80065e2:	33ff      	adds	r3, #255	@ 0xff
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d108      	bne.n	80065fc <USB_EPStartXfer+0x444>
 80065ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4ac4      	ldr	r2, [pc, #784]	@ (8006904 <USB_EPStartXfer+0x74c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e064      	b.n	80066c6 <USB_EPStartXfer+0x50e>
 80065fc:	1d7b      	adds	r3, r7, #5
 80065fe:	33ff      	adds	r3, #255	@ 0xff
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b3e      	cmp	r3, #62	@ 0x3e
 8006604:	d81f      	bhi.n	8006646 <USB_EPStartXfer+0x48e>
 8006606:	1d7b      	adds	r3, r7, #5
 8006608:	33ff      	adds	r3, #255	@ 0xff
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	21f8      	movs	r1, #248	@ 0xf8
 8006610:	187a      	adds	r2, r7, r1
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	1d7b      	adds	r3, r7, #5
 8006616:	33ff      	adds	r3, #255	@ 0xff
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2201      	movs	r2, #1
 800661c:	4013      	ands	r3, r2
 800661e:	d004      	beq.n	800662a <USB_EPStartXfer+0x472>
 8006620:	187b      	adds	r3, r7, r1
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	187a      	adds	r2, r7, r1
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29a      	uxth	r2, r3
 8006630:	23f8      	movs	r3, #248	@ 0xf8
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	029b      	lsls	r3, r3, #10
 800663a:	b29b      	uxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e03f      	b.n	80066c6 <USB_EPStartXfer+0x50e>
 8006646:	1d7b      	adds	r3, r7, #5
 8006648:	33ff      	adds	r3, #255	@ 0xff
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	21f8      	movs	r1, #248	@ 0xf8
 8006650:	187a      	adds	r2, r7, r1
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	1d7b      	adds	r3, r7, #5
 8006656:	33ff      	adds	r3, #255	@ 0xff
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	221f      	movs	r2, #31
 800665c:	4013      	ands	r3, r2
 800665e:	d104      	bne.n	800666a <USB_EPStartXfer+0x4b2>
 8006660:	187b      	adds	r3, r7, r1
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	187a      	adds	r2, r7, r1
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29a      	uxth	r2, r3
 8006670:	23f8      	movs	r3, #248	@ 0xf8
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	4313      	orrs	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	4aa0      	ldr	r2, [pc, #640]	@ (8006904 <USB_EPStartXfer+0x74c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	b29a      	uxth	r2, r3
 8006686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e01c      	b.n	80066c6 <USB_EPStartXfer+0x50e>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d118      	bne.n	80066c6 <USB_EPStartXfer+0x50e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	653b      	str	r3, [r7, #80]	@ 0x50
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2250      	movs	r2, #80	@ 0x50
 800669c:	5a9b      	ldrh	r3, [r3, r2]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	001a      	movs	r2, r3
 80066a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a4:	189b      	adds	r3, r3, r2
 80066a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00da      	lsls	r2, r3, #3
 80066ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066b0:	18d3      	adds	r3, r2, r3
 80066b2:	4a93      	ldr	r2, [pc, #588]	@ (8006900 <USB_EPStartXfer+0x748>)
 80066b4:	4694      	mov	ip, r2
 80066b6:	4463      	add	r3, ip
 80066b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ba:	1d7b      	adds	r3, r7, #5
 80066bc:	33ff      	adds	r3, #255	@ 0xff
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066c6:	2076      	movs	r0, #118	@ 0x76
 80066c8:	183b      	adds	r3, r7, r0
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	8912      	ldrh	r2, [r2, #8]
 80066ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	1d7b      	adds	r3, r7, #5
 80066d6:	33ff      	adds	r3, #255	@ 0xff
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	b29c      	uxth	r4, r3
 80066dc:	183b      	adds	r3, r7, r0
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	0023      	movs	r3, r4
 80066e4:	f000 ffd2 	bl	800768c <USB_WritePMA>
            ep->xfer_buff += len;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695a      	ldr	r2, [r3, #20]
 80066ec:	1d7b      	adds	r3, r7, #5
 80066ee:	33ff      	adds	r3, #255	@ 0xff
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	18d2      	adds	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6a1a      	ldr	r2, [r3, #32]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	429a      	cmp	r2, r3
 8006702:	d908      	bls.n	8006716 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	1d7b      	adds	r3, r7, #5
 800670a:	33ff      	adds	r3, #255	@ 0xff
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	621a      	str	r2, [r3, #32]
 8006714:	e007      	b.n	8006726 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	1d7a      	adds	r2, r7, #5
 800671c:	32ff      	adds	r2, #255	@ 0xff
 800671e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2200      	movs	r2, #0
 8006724:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	643b      	str	r3, [r7, #64]	@ 0x40
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d000      	beq.n	8006734 <USB_EPStartXfer+0x57c>
 8006732:	e070      	b.n	8006816 <USB_EPStartXfer+0x65e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2250      	movs	r2, #80	@ 0x50
 800673c:	5a9b      	ldrh	r3, [r3, r2]
 800673e:	b29b      	uxth	r3, r3
 8006740:	001a      	movs	r2, r3
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	189b      	adds	r3, r3, r2
 8006746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	00da      	lsls	r2, r3, #3
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	18d3      	adds	r3, r2, r3
 8006752:	4a6d      	ldr	r2, [pc, #436]	@ (8006908 <USB_EPStartXfer+0x750>)
 8006754:	4694      	mov	ip, r2
 8006756:	4463      	add	r3, ip
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
 800675a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	059b      	lsls	r3, r3, #22
 8006762:	0d9b      	lsrs	r3, r3, #22
 8006764:	b29a      	uxth	r2, r3
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	1d7b      	adds	r3, r7, #5
 800676c:	33ff      	adds	r3, #255	@ 0xff
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <USB_EPStartXfer+0x5ce>
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	4a62      	ldr	r2, [pc, #392]	@ (8006904 <USB_EPStartXfer+0x74c>)
 800677c:	4313      	orrs	r3, r2
 800677e:	b29a      	uxth	r2, r3
 8006780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e062      	b.n	800684c <USB_EPStartXfer+0x694>
 8006786:	1d7b      	adds	r3, r7, #5
 8006788:	33ff      	adds	r3, #255	@ 0xff
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b3e      	cmp	r3, #62	@ 0x3e
 800678e:	d81f      	bhi.n	80067d0 <USB_EPStartXfer+0x618>
 8006790:	1d7b      	adds	r3, r7, #5
 8006792:	33ff      	adds	r3, #255	@ 0xff
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	21f4      	movs	r1, #244	@ 0xf4
 800679a:	187a      	adds	r2, r7, r1
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	1d7b      	adds	r3, r7, #5
 80067a0:	33ff      	adds	r3, #255	@ 0xff
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	4013      	ands	r3, r2
 80067a8:	d004      	beq.n	80067b4 <USB_EPStartXfer+0x5fc>
 80067aa:	187b      	adds	r3, r7, r1
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3301      	adds	r3, #1
 80067b0:	187a      	adds	r2, r7, r1
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	23f4      	movs	r3, #244	@ 0xf4
 80067bc:	18fb      	adds	r3, r7, r3
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	029b      	lsls	r3, r3, #10
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4313      	orrs	r3, r2
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e03d      	b.n	800684c <USB_EPStartXfer+0x694>
 80067d0:	1d7b      	adds	r3, r7, #5
 80067d2:	33ff      	adds	r3, #255	@ 0xff
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	21f4      	movs	r1, #244	@ 0xf4
 80067da:	187a      	adds	r2, r7, r1
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	1d7b      	adds	r3, r7, #5
 80067e0:	33ff      	adds	r3, #255	@ 0xff
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	221f      	movs	r2, #31
 80067e6:	4013      	ands	r3, r2
 80067e8:	d104      	bne.n	80067f4 <USB_EPStartXfer+0x63c>
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	187a      	adds	r2, r7, r1
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	23f4      	movs	r3, #244	@ 0xf4
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	029b      	lsls	r3, r3, #10
 8006804:	b29b      	uxth	r3, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	b29b      	uxth	r3, r3
 800680a:	4a3e      	ldr	r2, [pc, #248]	@ (8006904 <USB_EPStartXfer+0x74c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e01a      	b.n	800684c <USB_EPStartXfer+0x694>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d116      	bne.n	800684c <USB_EPStartXfer+0x694>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2250      	movs	r2, #80	@ 0x50
 8006822:	5a9b      	ldrh	r3, [r3, r2]
 8006824:	b29b      	uxth	r3, r3
 8006826:	001a      	movs	r2, r3
 8006828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800682a:	189b      	adds	r3, r3, r2
 800682c:	643b      	str	r3, [r7, #64]	@ 0x40
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	00da      	lsls	r2, r3, #3
 8006834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006836:	18d3      	adds	r3, r2, r3
 8006838:	4a33      	ldr	r2, [pc, #204]	@ (8006908 <USB_EPStartXfer+0x750>)
 800683a:	4694      	mov	ip, r2
 800683c:	4463      	add	r3, ip
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006840:	1d7b      	adds	r3, r7, #5
 8006842:	33ff      	adds	r3, #255	@ 0xff
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b29a      	uxth	r2, r3
 8006848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800684c:	2076      	movs	r0, #118	@ 0x76
 800684e:	183b      	adds	r3, r7, r0
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	8952      	ldrh	r2, [r2, #10]
 8006854:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	1d7b      	adds	r3, r7, #5
 800685c:	33ff      	adds	r3, #255	@ 0xff
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b29c      	uxth	r4, r3
 8006862:	183b      	adds	r3, r7, r0
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	0023      	movs	r3, r4
 800686a:	f000 ff0f 	bl	800768c <USB_WritePMA>
 800686e:	e1b6      	b.n	8006bde <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	1d7a      	adds	r2, r7, #5
 8006876:	32ff      	adds	r2, #255	@ 0xff
 8006878:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	18d3      	adds	r3, r2, r3
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29a      	uxth	r2, r3
 8006888:	2062      	movs	r0, #98	@ 0x62
 800688a:	183b      	adds	r3, r7, r0
 800688c:	491f      	ldr	r1, [pc, #124]	@ (800690c <USB_EPStartXfer+0x754>)
 800688e:	400a      	ands	r2, r1
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	18d3      	adds	r3, r2, r3
 800689c:	183a      	adds	r2, r7, r0
 800689e:	8812      	ldrh	r2, [r2, #0]
 80068a0:	491b      	ldr	r1, [pc, #108]	@ (8006910 <USB_EPStartXfer+0x758>)
 80068a2:	430a      	orrs	r2, r1
 80068a4:	b292      	uxth	r2, r2
 80068a6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2250      	movs	r2, #80	@ 0x50
 80068b0:	5a9b      	ldrh	r3, [r3, r2]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	001a      	movs	r2, r3
 80068b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00da      	lsls	r2, r3, #3
 80068c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <USB_EPStartXfer+0x748>)
 80068c8:	4694      	mov	ip, r2
 80068ca:	4463      	add	r3, ip
 80068cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068ce:	1d7b      	adds	r3, r7, #5
 80068d0:	33ff      	adds	r3, #255	@ 0xff
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068da:	2076      	movs	r0, #118	@ 0x76
 80068dc:	183b      	adds	r3, r7, r0
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	8912      	ldrh	r2, [r2, #8]
 80068e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6959      	ldr	r1, [r3, #20]
 80068e8:	1d7b      	adds	r3, r7, #5
 80068ea:	33ff      	adds	r3, #255	@ 0xff
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	b29c      	uxth	r4, r3
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	881a      	ldrh	r2, [r3, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	0023      	movs	r3, r4
 80068f8:	f000 fec8 	bl	800768c <USB_WritePMA>
 80068fc:	e16f      	b.n	8006bde <USB_EPStartXfer+0xa26>
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	00000402 	.word	0x00000402
 8006904:	ffff8000 	.word	0xffff8000
 8006908:	00000406 	.word	0x00000406
 800690c:	ffff8e8f 	.word	0xffff8e8f
 8006910:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	1d7b      	adds	r3, r7, #5
 800691a:	33ff      	adds	r3, #255	@ 0xff
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	001a      	movs	r2, r3
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	4013      	ands	r3, r2
 8006938:	d100      	bne.n	800693c <USB_EPStartXfer+0x784>
 800693a:	e0a4      	b.n	8006a86 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d000      	beq.n	800694a <USB_EPStartXfer+0x792>
 8006948:	e070      	b.n	8006a2c <USB_EPStartXfer+0x874>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2250      	movs	r2, #80	@ 0x50
 8006952:	5a9b      	ldrh	r3, [r3, r2]
 8006954:	b29b      	uxth	r3, r3
 8006956:	001a      	movs	r2, r3
 8006958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800695a:	189b      	adds	r3, r3, r2
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	00da      	lsls	r2, r3, #3
 8006964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006966:	18d3      	adds	r3, r2, r3
 8006968:	4ada      	ldr	r2, [pc, #872]	@ (8006cd4 <USB_EPStartXfer+0xb1c>)
 800696a:	4694      	mov	ip, r2
 800696c:	4463      	add	r3, ip
 800696e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	059b      	lsls	r3, r3, #22
 8006978:	0d9b      	lsrs	r3, r3, #22
 800697a:	b29a      	uxth	r2, r3
 800697c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	1d7b      	adds	r3, r7, #5
 8006982:	33ff      	adds	r3, #255	@ 0xff
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <USB_EPStartXfer+0x7e4>
 800698a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	4ad1      	ldr	r2, [pc, #836]	@ (8006cd8 <USB_EPStartXfer+0xb20>)
 8006992:	4313      	orrs	r3, r2
 8006994:	b29a      	uxth	r2, r3
 8006996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e062      	b.n	8006a62 <USB_EPStartXfer+0x8aa>
 800699c:	1d7b      	adds	r3, r7, #5
 800699e:	33ff      	adds	r3, #255	@ 0xff
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80069a4:	d81f      	bhi.n	80069e6 <USB_EPStartXfer+0x82e>
 80069a6:	1d7b      	adds	r3, r7, #5
 80069a8:	33ff      	adds	r3, #255	@ 0xff
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	21f0      	movs	r1, #240	@ 0xf0
 80069b0:	187a      	adds	r2, r7, r1
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	1d7b      	adds	r3, r7, #5
 80069b6:	33ff      	adds	r3, #255	@ 0xff
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2201      	movs	r2, #1
 80069bc:	4013      	ands	r3, r2
 80069be:	d004      	beq.n	80069ca <USB_EPStartXfer+0x812>
 80069c0:	187b      	adds	r3, r7, r1
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	187a      	adds	r2, r7, r1
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	23f0      	movs	r3, #240	@ 0xf0
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e03d      	b.n	8006a62 <USB_EPStartXfer+0x8aa>
 80069e6:	1d7b      	adds	r3, r7, #5
 80069e8:	33ff      	adds	r3, #255	@ 0xff
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	21f0      	movs	r1, #240	@ 0xf0
 80069f0:	187a      	adds	r2, r7, r1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	1d7b      	adds	r3, r7, #5
 80069f6:	33ff      	adds	r3, #255	@ 0xff
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	221f      	movs	r2, #31
 80069fc:	4013      	ands	r3, r2
 80069fe:	d104      	bne.n	8006a0a <USB_EPStartXfer+0x852>
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	187a      	adds	r2, r7, r1
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	23f0      	movs	r3, #240	@ 0xf0
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4aad      	ldr	r2, [pc, #692]	@ (8006cd8 <USB_EPStartXfer+0xb20>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e01a      	b.n	8006a62 <USB_EPStartXfer+0x8aa>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d116      	bne.n	8006a62 <USB_EPStartXfer+0x8aa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2250      	movs	r2, #80	@ 0x50
 8006a38:	5a9b      	ldrh	r3, [r3, r2]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	00da      	lsls	r2, r3, #3
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	4aa1      	ldr	r2, [pc, #644]	@ (8006cd4 <USB_EPStartXfer+0xb1c>)
 8006a50:	4694      	mov	ip, r2
 8006a52:	4463      	add	r3, ip
 8006a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a56:	1d7b      	adds	r3, r7, #5
 8006a58:	33ff      	adds	r3, #255	@ 0xff
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a62:	2076      	movs	r0, #118	@ 0x76
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	8952      	ldrh	r2, [r2, #10]
 8006a6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6959      	ldr	r1, [r3, #20]
 8006a70:	1d7b      	adds	r3, r7, #5
 8006a72:	33ff      	adds	r3, #255	@ 0xff
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	b29c      	uxth	r4, r3
 8006a78:	183b      	adds	r3, r7, r0
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	0023      	movs	r3, r4
 8006a80:	f000 fe04 	bl	800768c <USB_WritePMA>
 8006a84:	e0ab      	b.n	8006bde <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d000      	beq.n	8006a90 <USB_EPStartXfer+0x8d8>
 8006a8e:	e070      	b.n	8006b72 <USB_EPStartXfer+0x9ba>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2250      	movs	r2, #80	@ 0x50
 8006a98:	5a9b      	ldrh	r3, [r3, r2]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	001a      	movs	r2, r3
 8006a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	00da      	lsls	r2, r3, #3
 8006aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006aac:	18d3      	adds	r3, r2, r3
 8006aae:	4a8b      	ldr	r2, [pc, #556]	@ (8006cdc <USB_EPStartXfer+0xb24>)
 8006ab0:	4694      	mov	ip, r2
 8006ab2:	4463      	add	r3, ip
 8006ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ab6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	059b      	lsls	r3, r3, #22
 8006abe:	0d9b      	lsrs	r3, r3, #22
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	1d7b      	adds	r3, r7, #5
 8006ac8:	33ff      	adds	r3, #255	@ 0xff
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d108      	bne.n	8006ae2 <USB_EPStartXfer+0x92a>
 8006ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4a80      	ldr	r2, [pc, #512]	@ (8006cd8 <USB_EPStartXfer+0xb20>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	e06c      	b.n	8006bbc <USB_EPStartXfer+0xa04>
 8006ae2:	1d7b      	adds	r3, r7, #5
 8006ae4:	33ff      	adds	r3, #255	@ 0xff
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aea:	d81f      	bhi.n	8006b2c <USB_EPStartXfer+0x974>
 8006aec:	1d7b      	adds	r3, r7, #5
 8006aee:	33ff      	adds	r3, #255	@ 0xff
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	21ec      	movs	r1, #236	@ 0xec
 8006af6:	187a      	adds	r2, r7, r1
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	1d7b      	adds	r3, r7, #5
 8006afc:	33ff      	adds	r3, #255	@ 0xff
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2201      	movs	r2, #1
 8006b02:	4013      	ands	r3, r2
 8006b04:	d004      	beq.n	8006b10 <USB_EPStartXfer+0x958>
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	187a      	adds	r2, r7, r1
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	23ec      	movs	r3, #236	@ 0xec
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e047      	b.n	8006bbc <USB_EPStartXfer+0xa04>
 8006b2c:	1d7b      	adds	r3, r7, #5
 8006b2e:	33ff      	adds	r3, #255	@ 0xff
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	21ec      	movs	r1, #236	@ 0xec
 8006b36:	187a      	adds	r2, r7, r1
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	1d7b      	adds	r3, r7, #5
 8006b3c:	33ff      	adds	r3, #255	@ 0xff
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	221f      	movs	r2, #31
 8006b42:	4013      	ands	r3, r2
 8006b44:	d104      	bne.n	8006b50 <USB_EPStartXfer+0x998>
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	187a      	adds	r2, r7, r1
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	23ec      	movs	r3, #236	@ 0xec
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	029b      	lsls	r3, r3, #10
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4a5c      	ldr	r2, [pc, #368]	@ (8006cd8 <USB_EPStartXfer+0xb20>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e024      	b.n	8006bbc <USB_EPStartXfer+0xa04>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d120      	bne.n	8006bbc <USB_EPStartXfer+0xa04>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2184      	movs	r1, #132	@ 0x84
 8006b7e:	187a      	adds	r2, r7, r1
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2250      	movs	r2, #80	@ 0x50
 8006b86:	5a9b      	ldrh	r3, [r3, r2]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	187a      	adds	r2, r7, r1
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00da      	lsls	r2, r3, #3
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8006cdc <USB_EPStartXfer+0xb24>)
 8006ba4:	4694      	mov	ip, r2
 8006ba6:	4463      	add	r3, ip
 8006ba8:	2180      	movs	r1, #128	@ 0x80
 8006baa:	187a      	adds	r2, r7, r1
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	1d7b      	adds	r3, r7, #5
 8006bb0:	33ff      	adds	r3, #255	@ 0xff
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bbc:	2076      	movs	r0, #118	@ 0x76
 8006bbe:	183b      	adds	r3, r7, r0
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	8912      	ldrh	r2, [r2, #8]
 8006bc4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6959      	ldr	r1, [r3, #20]
 8006bca:	1d7b      	adds	r3, r7, #5
 8006bcc:	33ff      	adds	r3, #255	@ 0xff
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b29c      	uxth	r4, r3
 8006bd2:	183b      	adds	r3, r7, r0
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	0023      	movs	r3, r4
 8006bda:	f000 fd57 	bl	800768c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	18d3      	adds	r3, r2, r3
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	200a      	movs	r0, #10
 8006bee:	183b      	adds	r3, r7, r0
 8006bf0:	493b      	ldr	r1, [pc, #236]	@ (8006ce0 <USB_EPStartXfer+0xb28>)
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	183b      	adds	r3, r7, r0
 8006bf8:	183a      	adds	r2, r7, r0
 8006bfa:	8812      	ldrh	r2, [r2, #0]
 8006bfc:	2110      	movs	r1, #16
 8006bfe:	404a      	eors	r2, r1
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	183b      	adds	r3, r7, r0
 8006c04:	183a      	adds	r2, r7, r0
 8006c06:	8812      	ldrh	r2, [r2, #0]
 8006c08:	2120      	movs	r1, #32
 8006c0a:	404a      	eors	r2, r1
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	18d3      	adds	r3, r2, r3
 8006c18:	183a      	adds	r2, r7, r0
 8006c1a:	8812      	ldrh	r2, [r2, #0]
 8006c1c:	4931      	ldr	r1, [pc, #196]	@ (8006ce4 <USB_EPStartXfer+0xb2c>)
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	b292      	uxth	r2, r2
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	f000 fbe9 	bl	80073fa <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	7b1b      	ldrb	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d000      	beq.n	8006c32 <USB_EPStartXfer+0xa7a>
 8006c30:	e0a8      	b.n	8006d84 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90d      	bls.n	8006c5a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	1d7a      	adds	r2, r7, #5
 8006c44:	32ff      	adds	r2, #255	@ 0xff
 8006c46:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	1d7b      	adds	r3, r7, #5
 8006c4e:	33ff      	adds	r3, #255	@ 0xff
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	619a      	str	r2, [r3, #24]
 8006c58:	e007      	b.n	8006c6a <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	1d7a      	adds	r2, r7, #5
 8006c60:	32ff      	adds	r2, #255	@ 0xff
 8006c62:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2190      	movs	r1, #144	@ 0x90
 8006c6e:	187a      	adds	r2, r7, r1
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2250      	movs	r2, #80	@ 0x50
 8006c76:	5a9b      	ldrh	r3, [r3, r2]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	001a      	movs	r2, r3
 8006c7c:	187b      	adds	r3, r7, r1
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	187a      	adds	r2, r7, r1
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	00da      	lsls	r2, r3, #3
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	18d3      	adds	r3, r2, r3
 8006c92:	4a10      	ldr	r2, [pc, #64]	@ (8006cd4 <USB_EPStartXfer+0xb1c>)
 8006c94:	4694      	mov	ip, r2
 8006c96:	4463      	add	r3, ip
 8006c98:	218c      	movs	r1, #140	@ 0x8c
 8006c9a:	187a      	adds	r2, r7, r1
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	187b      	adds	r3, r7, r1
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	059b      	lsls	r3, r3, #22
 8006ca8:	0d9b      	lsrs	r3, r3, #22
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	1d7b      	adds	r3, r7, #5
 8006cb4:	33ff      	adds	r3, #255	@ 0xff
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d115      	bne.n	8006ce8 <USB_EPStartXfer+0xb30>
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4a04      	ldr	r2, [pc, #16]	@ (8006cd8 <USB_EPStartXfer+0xb20>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e36e      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	00000406 	.word	0x00000406
 8006cd8:	ffff8000 	.word	0xffff8000
 8006cdc:	00000402 	.word	0x00000402
 8006ce0:	ffff8fbf 	.word	0xffff8fbf
 8006ce4:	ffff8080 	.word	0xffff8080
 8006ce8:	1d7b      	adds	r3, r7, #5
 8006cea:	33ff      	adds	r3, #255	@ 0xff
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf0:	d822      	bhi.n	8006d38 <USB_EPStartXfer+0xb80>
 8006cf2:	1d7b      	adds	r3, r7, #5
 8006cf4:	33ff      	adds	r3, #255	@ 0xff
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	21e8      	movs	r1, #232	@ 0xe8
 8006cfc:	187a      	adds	r2, r7, r1
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	1d7b      	adds	r3, r7, #5
 8006d02:	33ff      	adds	r3, #255	@ 0xff
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2201      	movs	r2, #1
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <USB_EPStartXfer+0xb5e>
 8006d0c:	187b      	adds	r3, r7, r1
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	187a      	adds	r2, r7, r1
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	218c      	movs	r1, #140	@ 0x8c
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	23e8      	movs	r3, #232	@ 0xe8
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	187b      	adds	r3, r7, r1
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	e33b      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
 8006d38:	1d7b      	adds	r3, r7, #5
 8006d3a:	33ff      	adds	r3, #255	@ 0xff
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	21e8      	movs	r1, #232	@ 0xe8
 8006d42:	187a      	adds	r2, r7, r1
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	1d7b      	adds	r3, r7, #5
 8006d48:	33ff      	adds	r3, #255	@ 0xff
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	221f      	movs	r2, #31
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d104      	bne.n	8006d5c <USB_EPStartXfer+0xba4>
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	187a      	adds	r2, r7, r1
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	218c      	movs	r1, #140	@ 0x8c
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	23e8      	movs	r3, #232	@ 0xe8
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4ad7      	ldr	r2, [pc, #860]	@ (80070d4 <USB_EPStartXfer+0xf1c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	187b      	adds	r3, r7, r1
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	e315      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d000      	beq.n	8006d8e <USB_EPStartXfer+0xbd6>
 8006d8c:	e189      	b.n	80070a2 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d000      	beq.n	8006d98 <USB_EPStartXfer+0xbe0>
 8006d96:	e07b      	b.n	8006e90 <USB_EPStartXfer+0xcd8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	21ac      	movs	r1, #172	@ 0xac
 8006d9c:	187a      	adds	r2, r7, r1
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2250      	movs	r2, #80	@ 0x50
 8006da4:	5a9b      	ldrh	r3, [r3, r2]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	001a      	movs	r2, r3
 8006daa:	187b      	adds	r3, r7, r1
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	189b      	adds	r3, r3, r2
 8006db0:	187a      	adds	r2, r7, r1
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00da      	lsls	r2, r3, #3
 8006dba:	187b      	adds	r3, r7, r1
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	4ac5      	ldr	r2, [pc, #788]	@ (80070d8 <USB_EPStartXfer+0xf20>)
 8006dc2:	4694      	mov	ip, r2
 8006dc4:	4463      	add	r3, ip
 8006dc6:	21a8      	movs	r1, #168	@ 0xa8
 8006dc8:	187a      	adds	r2, r7, r1
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	059b      	lsls	r3, r3, #22
 8006dd6:	0d9b      	lsrs	r3, r3, #22
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	187b      	adds	r3, r7, r1
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <USB_EPStartXfer+0xc46>
 8006de8:	187b      	adds	r3, r7, r1
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4ab8      	ldr	r2, [pc, #736]	@ (80070d4 <USB_EPStartXfer+0xf1c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	187b      	adds	r3, r7, r1
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e06c      	b.n	8006ed8 <USB_EPStartXfer+0xd20>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e04:	d820      	bhi.n	8006e48 <USB_EPStartXfer+0xc90>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	21e4      	movs	r1, #228	@ 0xe4
 8006e0e:	187a      	adds	r2, r7, r1
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2201      	movs	r2, #1
 8006e18:	4013      	ands	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0xc6e>
 8006e1c:	187b      	adds	r3, r7, r1
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	187a      	adds	r2, r7, r1
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	21a8      	movs	r1, #168	@ 0xa8
 8006e28:	187b      	adds	r3, r7, r1
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	23e4      	movs	r3, #228	@ 0xe4
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	029b      	lsls	r3, r3, #10
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	187b      	adds	r3, r7, r1
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	e047      	b.n	8006ed8 <USB_EPStartXfer+0xd20>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	21e4      	movs	r1, #228	@ 0xe4
 8006e50:	187a      	adds	r2, r7, r1
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	221f      	movs	r2, #31
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d104      	bne.n	8006e68 <USB_EPStartXfer+0xcb0>
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	187a      	adds	r2, r7, r1
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	21a8      	movs	r1, #168	@ 0xa8
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	23e4      	movs	r3, #228	@ 0xe4
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4a94      	ldr	r2, [pc, #592]	@ (80070d4 <USB_EPStartXfer+0xf1c>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	187b      	adds	r3, r7, r1
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e023      	b.n	8006ed8 <USB_EPStartXfer+0xd20>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d11f      	bne.n	8006ed8 <USB_EPStartXfer+0xd20>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	21b4      	movs	r1, #180	@ 0xb4
 8006e9c:	187a      	adds	r2, r7, r1
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2250      	movs	r2, #80	@ 0x50
 8006ea4:	5a9b      	ldrh	r3, [r3, r2]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	001a      	movs	r2, r3
 8006eaa:	187b      	adds	r3, r7, r1
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	187a      	adds	r2, r7, r1
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	00da      	lsls	r2, r3, #3
 8006eba:	187b      	adds	r3, r7, r1
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	18d3      	adds	r3, r2, r3
 8006ec0:	4a85      	ldr	r2, [pc, #532]	@ (80070d8 <USB_EPStartXfer+0xf20>)
 8006ec2:	4694      	mov	ip, r2
 8006ec4:	4463      	add	r3, ip
 8006ec6:	21b0      	movs	r1, #176	@ 0xb0
 8006ec8:	187a      	adds	r2, r7, r1
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	187b      	adds	r3, r7, r1
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	22a4      	movs	r2, #164	@ 0xa4
 8006edc:	18ba      	adds	r2, r7, r2
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d000      	beq.n	8006eea <USB_EPStartXfer+0xd32>
 8006ee8:	e07b      	b.n	8006fe2 <USB_EPStartXfer+0xe2a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	219c      	movs	r1, #156	@ 0x9c
 8006eee:	187a      	adds	r2, r7, r1
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2250      	movs	r2, #80	@ 0x50
 8006ef6:	5a9b      	ldrh	r3, [r3, r2]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	001a      	movs	r2, r3
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	187a      	adds	r2, r7, r1
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00da      	lsls	r2, r3, #3
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	18d3      	adds	r3, r2, r3
 8006f12:	4a72      	ldr	r2, [pc, #456]	@ (80070dc <USB_EPStartXfer+0xf24>)
 8006f14:	4694      	mov	ip, r2
 8006f16:	4463      	add	r3, ip
 8006f18:	2198      	movs	r1, #152	@ 0x98
 8006f1a:	187a      	adds	r2, r7, r1
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	187b      	adds	r3, r7, r1
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	059b      	lsls	r3, r3, #22
 8006f28:	0d9b      	lsrs	r3, r3, #22
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	187b      	adds	r3, r7, r1
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <USB_EPStartXfer+0xd98>
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4a64      	ldr	r2, [pc, #400]	@ (80070d4 <USB_EPStartXfer+0xf1c>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	e069      	b.n	8007024 <USB_EPStartXfer+0xe6c>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f56:	d820      	bhi.n	8006f9a <USB_EPStartXfer+0xde2>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	21e0      	movs	r1, #224	@ 0xe0
 8006f60:	187a      	adds	r2, r7, r1
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <USB_EPStartXfer+0xdc0>
 8006f6e:	187b      	adds	r3, r7, r1
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	187a      	adds	r2, r7, r1
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	2198      	movs	r1, #152	@ 0x98
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	23e0      	movs	r3, #224	@ 0xe0
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	029b      	lsls	r3, r3, #10
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	e044      	b.n	8007024 <USB_EPStartXfer+0xe6c>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	21e0      	movs	r1, #224	@ 0xe0
 8006fa2:	187a      	adds	r2, r7, r1
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	221f      	movs	r2, #31
 8006fac:	4013      	ands	r3, r2
 8006fae:	d104      	bne.n	8006fba <USB_EPStartXfer+0xe02>
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	187a      	adds	r2, r7, r1
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	2198      	movs	r1, #152	@ 0x98
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	23e0      	movs	r3, #224	@ 0xe0
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	029b      	lsls	r3, r3, #10
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	4a3f      	ldr	r2, [pc, #252]	@ (80070d4 <USB_EPStartXfer+0xf1c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	e020      	b.n	8007024 <USB_EPStartXfer+0xe6c>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11c      	bne.n	8007024 <USB_EPStartXfer+0xe6c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2250      	movs	r2, #80	@ 0x50
 8006fee:	5a9b      	ldrh	r3, [r3, r2]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	21a4      	movs	r1, #164	@ 0xa4
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	187a      	adds	r2, r7, r1
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00da      	lsls	r2, r3, #3
 8007006:	187b      	adds	r3, r7, r1
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	18d3      	adds	r3, r2, r3
 800700c:	4a33      	ldr	r2, [pc, #204]	@ (80070dc <USB_EPStartXfer+0xf24>)
 800700e:	4694      	mov	ip, r2
 8007010:	4463      	add	r3, ip
 8007012:	21a0      	movs	r1, #160	@ 0xa0
 8007014:	187a      	adds	r2, r7, r1
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	b29a      	uxth	r2, r3
 800701e:	187b      	adds	r3, r7, r1
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d100      	bne.n	800702e <USB_EPStartXfer+0xe76>
 800702c:	e1c0      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	18d2      	adds	r2, r2, r3
 8007038:	2196      	movs	r1, #150	@ 0x96
 800703a:	187b      	adds	r3, r7, r1
 800703c:	8812      	ldrh	r2, [r2, #0]
 800703e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007040:	187b      	adds	r3, r7, r1
 8007042:	881a      	ldrh	r2, [r3, #0]
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	01db      	lsls	r3, r3, #7
 8007048:	4013      	ands	r3, r2
 800704a:	d004      	beq.n	8007056 <USB_EPStartXfer+0xe9e>
 800704c:	187b      	adds	r3, r7, r1
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	2240      	movs	r2, #64	@ 0x40
 8007052:	4013      	ands	r3, r2
 8007054:	d10d      	bne.n	8007072 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007056:	2196      	movs	r1, #150	@ 0x96
 8007058:	187b      	adds	r3, r7, r1
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	2380      	movs	r3, #128	@ 0x80
 800705e:	01db      	lsls	r3, r3, #7
 8007060:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007062:	d000      	beq.n	8007066 <USB_EPStartXfer+0xeae>
 8007064:	e1a4      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007066:	187b      	adds	r3, r7, r1
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2240      	movs	r2, #64	@ 0x40
 800706c:	4013      	ands	r3, r2
 800706e:	d000      	beq.n	8007072 <USB_EPStartXfer+0xeba>
 8007070:	e19e      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	18d3      	adds	r3, r2, r3
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29a      	uxth	r2, r3
 8007080:	2094      	movs	r0, #148	@ 0x94
 8007082:	183b      	adds	r3, r7, r0
 8007084:	4916      	ldr	r1, [pc, #88]	@ (80070e0 <USB_EPStartXfer+0xf28>)
 8007086:	400a      	ands	r2, r1
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	18d3      	adds	r3, r2, r3
 8007094:	183a      	adds	r2, r7, r0
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	4912      	ldr	r1, [pc, #72]	@ (80070e4 <USB_EPStartXfer+0xf2c>)
 800709a:	430a      	orrs	r2, r1
 800709c:	b292      	uxth	r2, r2
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e186      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	78db      	ldrb	r3, [r3, #3]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d000      	beq.n	80070ac <USB_EPStartXfer+0xef4>
 80070aa:	e17f      	b.n	80073ac <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d917      	bls.n	80070e8 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	1d7a      	adds	r2, r7, #5
 80070be:	32ff      	adds	r2, #255	@ 0xff
 80070c0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	1d7b      	adds	r3, r7, #5
 80070c8:	33ff      	adds	r3, #255	@ 0xff
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	1ad2      	subs	r2, r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	619a      	str	r2, [r3, #24]
 80070d2:	e011      	b.n	80070f8 <USB_EPStartXfer+0xf40>
 80070d4:	ffff8000 	.word	0xffff8000
 80070d8:	00000402 	.word	0x00000402
 80070dc:	00000406 	.word	0x00000406
 80070e0:	ffff8f8f 	.word	0xffff8f8f
 80070e4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	1d7a      	adds	r2, r7, #5
 80070ee:	32ff      	adds	r2, #255	@ 0xff
 80070f0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d000      	beq.n	8007102 <USB_EPStartXfer+0xf4a>
 8007100:	e081      	b.n	8007206 <USB_EPStartXfer+0x104e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	21cc      	movs	r1, #204	@ 0xcc
 8007106:	187a      	adds	r2, r7, r1
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2250      	movs	r2, #80	@ 0x50
 800710e:	5a9b      	ldrh	r3, [r3, r2]
 8007110:	b29b      	uxth	r3, r3
 8007112:	001a      	movs	r2, r3
 8007114:	187b      	adds	r3, r7, r1
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	189b      	adds	r3, r3, r2
 800711a:	187a      	adds	r2, r7, r1
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	00da      	lsls	r2, r3, #3
 8007124:	187b      	adds	r3, r7, r1
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	18d3      	adds	r3, r2, r3
 800712a:	4ab6      	ldr	r2, [pc, #728]	@ (8007404 <USB_EPStartXfer+0x124c>)
 800712c:	4694      	mov	ip, r2
 800712e:	4463      	add	r3, ip
 8007130:	21c8      	movs	r1, #200	@ 0xc8
 8007132:	187a      	adds	r2, r7, r1
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	187b      	adds	r3, r7, r1
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	059b      	lsls	r3, r3, #22
 8007140:	0d9b      	lsrs	r3, r3, #22
 8007142:	b29a      	uxth	r2, r3
 8007144:	187b      	adds	r3, r7, r1
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	1d7b      	adds	r3, r7, #5
 800714c:	33ff      	adds	r3, #255	@ 0xff
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <USB_EPStartXfer+0xfb2>
 8007154:	187b      	adds	r3, r7, r1
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	4aaa      	ldr	r2, [pc, #680]	@ (8007408 <USB_EPStartXfer+0x1250>)
 800715e:	4313      	orrs	r3, r2
 8007160:	b29a      	uxth	r2, r3
 8007162:	187b      	adds	r3, r7, r1
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e072      	b.n	8007250 <USB_EPStartXfer+0x1098>
 800716a:	1d7b      	adds	r3, r7, #5
 800716c:	33ff      	adds	r3, #255	@ 0xff
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b3e      	cmp	r3, #62	@ 0x3e
 8007172:	d822      	bhi.n	80071ba <USB_EPStartXfer+0x1002>
 8007174:	1d7b      	adds	r3, r7, #5
 8007176:	33ff      	adds	r3, #255	@ 0xff
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	21dc      	movs	r1, #220	@ 0xdc
 800717e:	187a      	adds	r2, r7, r1
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	1d7b      	adds	r3, r7, #5
 8007184:	33ff      	adds	r3, #255	@ 0xff
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2201      	movs	r2, #1
 800718a:	4013      	ands	r3, r2
 800718c:	d004      	beq.n	8007198 <USB_EPStartXfer+0xfe0>
 800718e:	187b      	adds	r3, r7, r1
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	187a      	adds	r2, r7, r1
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	21c8      	movs	r1, #200	@ 0xc8
 800719a:	187b      	adds	r3, r7, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	23dc      	movs	r3, #220	@ 0xdc
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	029b      	lsls	r3, r3, #10
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e04a      	b.n	8007250 <USB_EPStartXfer+0x1098>
 80071ba:	1d7b      	adds	r3, r7, #5
 80071bc:	33ff      	adds	r3, #255	@ 0xff
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	21dc      	movs	r1, #220	@ 0xdc
 80071c4:	187a      	adds	r2, r7, r1
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	1d7b      	adds	r3, r7, #5
 80071ca:	33ff      	adds	r3, #255	@ 0xff
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	221f      	movs	r2, #31
 80071d0:	4013      	ands	r3, r2
 80071d2:	d104      	bne.n	80071de <USB_EPStartXfer+0x1026>
 80071d4:	187b      	adds	r3, r7, r1
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	187a      	adds	r2, r7, r1
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	21c8      	movs	r1, #200	@ 0xc8
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	23dc      	movs	r3, #220	@ 0xdc
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	029b      	lsls	r3, r3, #10
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4a83      	ldr	r2, [pc, #524]	@ (8007408 <USB_EPStartXfer+0x1250>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e024      	b.n	8007250 <USB_EPStartXfer+0x1098>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d120      	bne.n	8007250 <USB_EPStartXfer+0x1098>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	21d4      	movs	r1, #212	@ 0xd4
 8007212:	187a      	adds	r2, r7, r1
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2250      	movs	r2, #80	@ 0x50
 800721a:	5a9b      	ldrh	r3, [r3, r2]
 800721c:	b29b      	uxth	r3, r3
 800721e:	001a      	movs	r2, r3
 8007220:	187b      	adds	r3, r7, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	189b      	adds	r3, r3, r2
 8007226:	187a      	adds	r2, r7, r1
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	187b      	adds	r3, r7, r1
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	18d3      	adds	r3, r2, r3
 8007236:	4a73      	ldr	r2, [pc, #460]	@ (8007404 <USB_EPStartXfer+0x124c>)
 8007238:	4694      	mov	ip, r2
 800723a:	4463      	add	r3, ip
 800723c:	21d0      	movs	r1, #208	@ 0xd0
 800723e:	187a      	adds	r2, r7, r1
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	1d7b      	adds	r3, r7, #5
 8007244:	33ff      	adds	r3, #255	@ 0xff
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	b29a      	uxth	r2, r3
 800724a:	187b      	adds	r3, r7, r1
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	22c4      	movs	r2, #196	@ 0xc4
 8007254:	18ba      	adds	r2, r7, r2
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d000      	beq.n	8007262 <USB_EPStartXfer+0x10aa>
 8007260:	e081      	b.n	8007366 <USB_EPStartXfer+0x11ae>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	21bc      	movs	r1, #188	@ 0xbc
 8007266:	187a      	adds	r2, r7, r1
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2250      	movs	r2, #80	@ 0x50
 800726e:	5a9b      	ldrh	r3, [r3, r2]
 8007270:	b29b      	uxth	r3, r3
 8007272:	001a      	movs	r2, r3
 8007274:	187b      	adds	r3, r7, r1
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	189b      	adds	r3, r3, r2
 800727a:	187a      	adds	r2, r7, r1
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00da      	lsls	r2, r3, #3
 8007284:	187b      	adds	r3, r7, r1
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	18d3      	adds	r3, r2, r3
 800728a:	4a60      	ldr	r2, [pc, #384]	@ (800740c <USB_EPStartXfer+0x1254>)
 800728c:	4694      	mov	ip, r2
 800728e:	4463      	add	r3, ip
 8007290:	21b8      	movs	r1, #184	@ 0xb8
 8007292:	187a      	adds	r2, r7, r1
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	187b      	adds	r3, r7, r1
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	059b      	lsls	r3, r3, #22
 80072a0:	0d9b      	lsrs	r3, r3, #22
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	187b      	adds	r3, r7, r1
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	1d7b      	adds	r3, r7, #5
 80072ac:	33ff      	adds	r3, #255	@ 0xff
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <USB_EPStartXfer+0x1112>
 80072b4:	187b      	adds	r3, r7, r1
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4a52      	ldr	r2, [pc, #328]	@ (8007408 <USB_EPStartXfer+0x1250>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	187b      	adds	r3, r7, r1
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e072      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
 80072ca:	1d7b      	adds	r3, r7, #5
 80072cc:	33ff      	adds	r3, #255	@ 0xff
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80072d2:	d822      	bhi.n	800731a <USB_EPStartXfer+0x1162>
 80072d4:	1d7b      	adds	r3, r7, #5
 80072d6:	33ff      	adds	r3, #255	@ 0xff
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	21d8      	movs	r1, #216	@ 0xd8
 80072de:	187a      	adds	r2, r7, r1
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	1d7b      	adds	r3, r7, #5
 80072e4:	33ff      	adds	r3, #255	@ 0xff
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	4013      	ands	r3, r2
 80072ec:	d004      	beq.n	80072f8 <USB_EPStartXfer+0x1140>
 80072ee:	187b      	adds	r3, r7, r1
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	187a      	adds	r2, r7, r1
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	21b8      	movs	r1, #184	@ 0xb8
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29a      	uxth	r2, r3
 8007302:	23d8      	movs	r3, #216	@ 0xd8
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	029b      	lsls	r3, r3, #10
 800730c:	b29b      	uxth	r3, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	187b      	adds	r3, r7, r1
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e04a      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
 800731a:	1d7b      	adds	r3, r7, #5
 800731c:	33ff      	adds	r3, #255	@ 0xff
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	21d8      	movs	r1, #216	@ 0xd8
 8007324:	187a      	adds	r2, r7, r1
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	1d7b      	adds	r3, r7, #5
 800732a:	33ff      	adds	r3, #255	@ 0xff
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	221f      	movs	r2, #31
 8007330:	4013      	ands	r3, r2
 8007332:	d104      	bne.n	800733e <USB_EPStartXfer+0x1186>
 8007334:	187b      	adds	r3, r7, r1
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3b01      	subs	r3, #1
 800733a:	187a      	adds	r2, r7, r1
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	21b8      	movs	r1, #184	@ 0xb8
 8007340:	187b      	adds	r3, r7, r1
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29a      	uxth	r2, r3
 8007348:	23d8      	movs	r3, #216	@ 0xd8
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29b      	uxth	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b29b      	uxth	r3, r3
 8007358:	4a2b      	ldr	r2, [pc, #172]	@ (8007408 <USB_EPStartXfer+0x1250>)
 800735a:	4313      	orrs	r3, r2
 800735c:	b29a      	uxth	r2, r3
 800735e:	187b      	adds	r3, r7, r1
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	e024      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d120      	bne.n	80073b0 <USB_EPStartXfer+0x11f8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2250      	movs	r2, #80	@ 0x50
 8007372:	5a9b      	ldrh	r3, [r3, r2]
 8007374:	b29b      	uxth	r3, r3
 8007376:	001a      	movs	r2, r3
 8007378:	21c4      	movs	r1, #196	@ 0xc4
 800737a:	187b      	adds	r3, r7, r1
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	189b      	adds	r3, r3, r2
 8007380:	187a      	adds	r2, r7, r1
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	00da      	lsls	r2, r3, #3
 800738a:	187b      	adds	r3, r7, r1
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	18d3      	adds	r3, r2, r3
 8007390:	4a1e      	ldr	r2, [pc, #120]	@ (800740c <USB_EPStartXfer+0x1254>)
 8007392:	4694      	mov	ip, r2
 8007394:	4463      	add	r3, ip
 8007396:	21c0      	movs	r1, #192	@ 0xc0
 8007398:	187a      	adds	r2, r7, r1
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	1d7b      	adds	r3, r7, #5
 800739e:	33ff      	adds	r3, #255	@ 0xff
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e001      	b.n	80073b0 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e025      	b.n	80073fc <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	208a      	movs	r0, #138	@ 0x8a
 80073c0:	183b      	adds	r3, r7, r0
 80073c2:	4913      	ldr	r1, [pc, #76]	@ (8007410 <USB_EPStartXfer+0x1258>)
 80073c4:	400a      	ands	r2, r1
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	183b      	adds	r3, r7, r0
 80073ca:	183a      	adds	r2, r7, r0
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	2180      	movs	r1, #128	@ 0x80
 80073d0:	0149      	lsls	r1, r1, #5
 80073d2:	404a      	eors	r2, r1
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	183b      	adds	r3, r7, r0
 80073d8:	183a      	adds	r2, r7, r0
 80073da:	8812      	ldrh	r2, [r2, #0]
 80073dc:	2180      	movs	r1, #128	@ 0x80
 80073de:	0189      	lsls	r1, r1, #6
 80073e0:	404a      	eors	r2, r1
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	18d3      	adds	r3, r2, r3
 80073ee:	183a      	adds	r2, r7, r0
 80073f0:	8812      	ldrh	r2, [r2, #0]
 80073f2:	4908      	ldr	r1, [pc, #32]	@ (8007414 <USB_EPStartXfer+0x125c>)
 80073f4:	430a      	orrs	r2, r1
 80073f6:	b292      	uxth	r2, r2
 80073f8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b043      	add	sp, #268	@ 0x10c
 8007402:	bd90      	pop	{r4, r7, pc}
 8007404:	00000402 	.word	0x00000402
 8007408:	ffff8000 	.word	0xffff8000
 800740c:	00000406 	.word	0x00000406
 8007410:	ffffbf8f 	.word	0xffffbf8f
 8007414:	ffff8080 	.word	0xffff8080

08007418 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01d      	beq.n	8007466 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	18d3      	adds	r3, r2, r3
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	200c      	movs	r0, #12
 800743a:	183b      	adds	r3, r7, r0
 800743c:	491b      	ldr	r1, [pc, #108]	@ (80074ac <USB_EPSetStall+0x94>)
 800743e:	400a      	ands	r2, r1
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	183b      	adds	r3, r7, r0
 8007444:	183a      	adds	r2, r7, r0
 8007446:	8812      	ldrh	r2, [r2, #0]
 8007448:	2110      	movs	r1, #16
 800744a:	404a      	eors	r2, r1
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	183a      	adds	r2, r7, r0
 800745a:	8812      	ldrh	r2, [r2, #0]
 800745c:	4914      	ldr	r1, [pc, #80]	@ (80074b0 <USB_EPSetStall+0x98>)
 800745e:	430a      	orrs	r2, r1
 8007460:	b292      	uxth	r2, r2
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e01d      	b.n	80074a2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	18d3      	adds	r3, r2, r3
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29a      	uxth	r2, r3
 8007474:	200e      	movs	r0, #14
 8007476:	183b      	adds	r3, r7, r0
 8007478:	490e      	ldr	r1, [pc, #56]	@ (80074b4 <USB_EPSetStall+0x9c>)
 800747a:	400a      	ands	r2, r1
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	183b      	adds	r3, r7, r0
 8007480:	183a      	adds	r2, r7, r0
 8007482:	8812      	ldrh	r2, [r2, #0]
 8007484:	2180      	movs	r1, #128	@ 0x80
 8007486:	0149      	lsls	r1, r1, #5
 8007488:	404a      	eors	r2, r1
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	18d3      	adds	r3, r2, r3
 8007496:	183a      	adds	r2, r7, r0
 8007498:	8812      	ldrh	r2, [r2, #0]
 800749a:	4905      	ldr	r1, [pc, #20]	@ (80074b0 <USB_EPSetStall+0x98>)
 800749c:	430a      	orrs	r2, r1
 800749e:	b292      	uxth	r2, r2
 80074a0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	0018      	movs	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b004      	add	sp, #16
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	ffff8fbf 	.word	0xffff8fbf
 80074b0:	ffff8080 	.word	0xffff8080
 80074b4:	ffffbf8f 	.word	0xffffbf8f

080074b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	7b1b      	ldrb	r3, [r3, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d000      	beq.n	80074cc <USB_EPClearStall+0x14>
 80074ca:	e095      	b.n	80075f8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d046      	beq.n	8007562 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	18d2      	adds	r2, r2, r3
 80074de:	2110      	movs	r1, #16
 80074e0:	187b      	adds	r3, r7, r1
 80074e2:	8812      	ldrh	r2, [r2, #0]
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	187b      	adds	r3, r7, r1
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2240      	movs	r2, #64	@ 0x40
 80074ec:	4013      	ands	r3, r2
 80074ee:	d016      	beq.n	800751e <USB_EPClearStall+0x66>
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	18d3      	adds	r3, r2, r3
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	200e      	movs	r0, #14
 8007500:	183b      	adds	r3, r7, r0
 8007502:	4940      	ldr	r1, [pc, #256]	@ (8007604 <USB_EPClearStall+0x14c>)
 8007504:	400a      	ands	r2, r1
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	183a      	adds	r2, r7, r0
 8007514:	8812      	ldrh	r2, [r2, #0]
 8007516:	493c      	ldr	r1, [pc, #240]	@ (8007608 <USB_EPClearStall+0x150>)
 8007518:	430a      	orrs	r2, r1
 800751a:	b292      	uxth	r2, r2
 800751c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d068      	beq.n	80075f8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	18d3      	adds	r3, r2, r3
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29a      	uxth	r2, r3
 8007534:	200c      	movs	r0, #12
 8007536:	183b      	adds	r3, r7, r0
 8007538:	4934      	ldr	r1, [pc, #208]	@ (800760c <USB_EPClearStall+0x154>)
 800753a:	400a      	ands	r2, r1
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	183b      	adds	r3, r7, r0
 8007540:	183a      	adds	r2, r7, r0
 8007542:	8812      	ldrh	r2, [r2, #0]
 8007544:	2120      	movs	r1, #32
 8007546:	404a      	eors	r2, r1
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	18d3      	adds	r3, r2, r3
 8007554:	183a      	adds	r2, r7, r0
 8007556:	8812      	ldrh	r2, [r2, #0]
 8007558:	492d      	ldr	r1, [pc, #180]	@ (8007610 <USB_EPClearStall+0x158>)
 800755a:	430a      	orrs	r2, r1
 800755c:	b292      	uxth	r2, r2
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e04a      	b.n	80075f8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	18d2      	adds	r2, r2, r3
 800756c:	2116      	movs	r1, #22
 800756e:	187b      	adds	r3, r7, r1
 8007570:	8812      	ldrh	r2, [r2, #0]
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	187b      	adds	r3, r7, r1
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	2380      	movs	r3, #128	@ 0x80
 800757a:	01db      	lsls	r3, r3, #7
 800757c:	4013      	ands	r3, r2
 800757e:	d016      	beq.n	80075ae <USB_EPClearStall+0xf6>
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	2014      	movs	r0, #20
 8007590:	183b      	adds	r3, r7, r0
 8007592:	491c      	ldr	r1, [pc, #112]	@ (8007604 <USB_EPClearStall+0x14c>)
 8007594:	400a      	ands	r2, r1
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	18d3      	adds	r3, r2, r3
 80075a2:	183a      	adds	r2, r7, r0
 80075a4:	8812      	ldrh	r2, [r2, #0]
 80075a6:	491b      	ldr	r1, [pc, #108]	@ (8007614 <USB_EPClearStall+0x15c>)
 80075a8:	430a      	orrs	r2, r1
 80075aa:	b292      	uxth	r2, r2
 80075ac:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	18d3      	adds	r3, r2, r3
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	2012      	movs	r0, #18
 80075be:	183b      	adds	r3, r7, r0
 80075c0:	4915      	ldr	r1, [pc, #84]	@ (8007618 <USB_EPClearStall+0x160>)
 80075c2:	400a      	ands	r2, r1
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	183b      	adds	r3, r7, r0
 80075c8:	183a      	adds	r2, r7, r0
 80075ca:	8812      	ldrh	r2, [r2, #0]
 80075cc:	2180      	movs	r1, #128	@ 0x80
 80075ce:	0149      	lsls	r1, r1, #5
 80075d0:	404a      	eors	r2, r1
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	183b      	adds	r3, r7, r0
 80075d6:	183a      	adds	r2, r7, r0
 80075d8:	8812      	ldrh	r2, [r2, #0]
 80075da:	2180      	movs	r1, #128	@ 0x80
 80075dc:	0189      	lsls	r1, r1, #6
 80075de:	404a      	eors	r2, r1
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	18d3      	adds	r3, r2, r3
 80075ec:	183a      	adds	r2, r7, r0
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	4907      	ldr	r1, [pc, #28]	@ (8007610 <USB_EPClearStall+0x158>)
 80075f2:	430a      	orrs	r2, r1
 80075f4:	b292      	uxth	r2, r2
 80075f6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b006      	add	sp, #24
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			@ (mov r8, r8)
 8007604:	ffff8f8f 	.word	0xffff8f8f
 8007608:	ffff80c0 	.word	0xffff80c0
 800760c:	ffff8fbf 	.word	0xffff8fbf
 8007610:	ffff8080 	.word	0xffff8080
 8007614:	ffffc080 	.word	0xffffc080
 8007618:	ffffbf8f 	.word	0xffffbf8f

0800761c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	000a      	movs	r2, r1
 8007626:	1cfb      	adds	r3, r7, #3
 8007628:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800762a:	1cfb      	adds	r3, r7, #3
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	224c      	movs	r2, #76	@ 0x4c
 8007636:	2180      	movs	r1, #128	@ 0x80
 8007638:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}

08007644 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2258      	movs	r2, #88	@ 0x58
 8007650:	5a9b      	ldrh	r3, [r3, r2]
 8007652:	b29b      	uxth	r3, r3
 8007654:	4a05      	ldr	r2, [pc, #20]	@ (800766c <USB_DevConnect+0x28>)
 8007656:	4313      	orrs	r3, r2
 8007658:	b299      	uxth	r1, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2258      	movs	r2, #88	@ 0x58
 800765e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b002      	add	sp, #8
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	ffff8000 	.word	0xffff8000

08007670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2244      	movs	r2, #68	@ 0x44
 800767c:	5a9b      	ldrh	r3, [r3, r2]
 800767e:	b29b      	uxth	r3, r3
 8007680:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007682:	68fb      	ldr	r3, [r7, #12]
}
 8007684:	0018      	movs	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	b004      	add	sp, #16
 800768a:	bd80      	pop	{r7, pc}

0800768c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	@ 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	0019      	movs	r1, r3
 8007698:	1dbb      	adds	r3, r7, #6
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	1d3b      	adds	r3, r7, #4
 800769e:	1c0a      	adds	r2, r1, #0
 80076a0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	18d3      	adds	r3, r2, r3
 80076bc:	2280      	movs	r2, #128	@ 0x80
 80076be:	00d2      	lsls	r2, r2, #3
 80076c0:	4694      	mov	ip, r2
 80076c2:	4463      	add	r3, ip
 80076c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ca:	e021      	b.n	8007710 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	2112      	movs	r1, #18
 80076d2:	187b      	adds	r3, r7, r1
 80076d4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	3301      	adds	r3, #1
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b21b      	sxth	r3, r3
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	b21a      	sxth	r2, r3
 80076e2:	187b      	adds	r3, r7, r1
 80076e4:	2000      	movs	r0, #0
 80076e6:	5e1b      	ldrsh	r3, [r3, r0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	b21a      	sxth	r2, r3
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	187a      	adds	r2, r7, r1
 80076f4:	8812      	ldrh	r2, [r2, #0]
 80076f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	3302      	adds	r3, #2
 80076fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3301      	adds	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	3b01      	subs	r3, #1
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1da      	bne.n	80076cc <USB_WritePMA+0x40>
  }
}
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b00a      	add	sp, #40	@ 0x28
 800771e:	bd80      	pop	{r7, pc}

08007720 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	@ 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	0019      	movs	r1, r3
 800772c:	1dbb      	adds	r3, r7, #6
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	1d3b      	adds	r3, r7, #4
 8007732:	1c0a      	adds	r2, r1, #0
 8007734:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007736:	1d3b      	adds	r3, r7, #4
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	b29b      	uxth	r3, r3
 800773e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007748:	1dbb      	adds	r3, r7, #6
 800774a:	881a      	ldrh	r2, [r3, #0]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	2280      	movs	r2, #128	@ 0x80
 8007752:	00d2      	lsls	r2, r2, #3
 8007754:	4694      	mov	ip, r2
 8007756:	4463      	add	r3, ip
 8007758:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
 800775e:	e018      	b.n	8007792 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	3302      	adds	r3, #2
 800776c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3301      	adds	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	0a1b      	lsrs	r3, r3, #8
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	3b01      	subs	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007798:	1d3b      	adds	r3, r7, #4
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	2201      	movs	r2, #1
 800779e:	4013      	ands	r3, r2
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	701a      	strb	r2, [r3, #0]
  }
}
 80077b6:	46c0      	nop			@ (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b00a      	add	sp, #40	@ 0x28
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	000a      	movs	r2, r1
 80077c8:	1cfb      	adds	r3, r7, #3
 80077ca:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80077cc:	230f      	movs	r3, #15
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d116      	bne.n	800780a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077dc:	2380      	movs	r3, #128	@ 0x80
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	2181      	movs	r1, #129	@ 0x81
 80077e6:	f002 f896 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077f0:	2380      	movs	r3, #128	@ 0x80
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	2101      	movs	r1, #1
 80077fa:	f002 f88c 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	23b6      	movs	r3, #182	@ 0xb6
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	2101      	movs	r1, #1
 8007806:	50d1      	str	r1, [r2, r3]
 8007808:	e013      	b.n	8007832 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	2340      	movs	r3, #64	@ 0x40
 800780e:	2202      	movs	r2, #2
 8007810:	2181      	movs	r1, #129	@ 0x81
 8007812:	f002 f880 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	2340      	movs	r3, #64	@ 0x40
 8007820:	2202      	movs	r2, #2
 8007822:	2101      	movs	r1, #1
 8007824:	f002 f877 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	23b6      	movs	r3, #182	@ 0xb6
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	2101      	movs	r1, #1
 8007830:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	2308      	movs	r3, #8
 8007836:	2203      	movs	r2, #3
 8007838:	2182      	movs	r1, #130	@ 0x82
 800783a:	f002 f86c 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007844:	2387      	movs	r3, #135	@ 0x87
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	0018      	movs	r0, r3
 800784a:	f002 f9fb 	bl	8009c44 <USBD_static_malloc>
 800784e:	0001      	movs	r1, r0
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	23ae      	movs	r3, #174	@ 0xae
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	23ae      	movs	r3, #174	@ 0xae
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	58d3      	ldr	r3, [r2, r3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8007864:	230f      	movs	r3, #15
 8007866:	18fb      	adds	r3, r7, r3
 8007868:	2201      	movs	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	e02c      	b.n	80078c8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	23ae      	movs	r3, #174	@ 0xae
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	58d3      	ldr	r3, [r2, r3]
 8007876:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	23af      	movs	r3, #175	@ 0xaf
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	58d3      	ldr	r3, [r2, r3]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	2385      	movs	r3, #133	@ 0x85
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	2100      	movs	r1, #0
 800788c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	2386      	movs	r3, #134	@ 0x86
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	2100      	movs	r1, #0
 8007896:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	7c1b      	ldrb	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	2381      	movs	r3, #129	@ 0x81
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	58d2      	ldr	r2, [r2, r3]
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	2101      	movs	r1, #1
 80078b0:	f002 f97b 	bl	8009baa <USBD_LL_PrepareReceive>
 80078b4:	e008      	b.n	80078c8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	2381      	movs	r3, #129	@ 0x81
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	58d2      	ldr	r2, [r2, r3]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	2340      	movs	r3, #64	@ 0x40
 80078c2:	2101      	movs	r1, #1
 80078c4:	f002 f971 	bl	8009baa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078c8:	230f      	movs	r3, #15
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	781b      	ldrb	r3, [r3, #0]
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b004      	add	sp, #16
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	000a      	movs	r2, r1
 80078e0:	1cfb      	adds	r3, r7, #3
 80078e2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80078e4:	230f      	movs	r3, #15
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2181      	movs	r1, #129	@ 0x81
 80078f0:	0018      	movs	r0, r3
 80078f2:	f002 f847 	bl	8009984 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2101      	movs	r1, #1
 8007900:	0018      	movs	r0, r3
 8007902:	f002 f83f 	bl	8009984 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	23b6      	movs	r3, #182	@ 0xb6
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	2100      	movs	r1, #0
 800790e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2182      	movs	r1, #130	@ 0x82
 8007914:	0018      	movs	r0, r3
 8007916:	f002 f835 	bl	8009984 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	23ae      	movs	r3, #174	@ 0xae
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	58d3      	ldr	r3, [r2, r3]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	23af      	movs	r3, #175	@ 0xaf
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	58d3      	ldr	r3, [r2, r3]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	23ae      	movs	r3, #174	@ 0xae
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	58d3      	ldr	r3, [r2, r3]
 8007940:	0018      	movs	r0, r3
 8007942:	f002 f98b 	bl	8009c5c <USBD_static_free>
    pdev->pClassData = NULL;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	23ae      	movs	r3, #174	@ 0xae
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	2100      	movs	r1, #0
 800794e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8007950:	230f      	movs	r3, #15
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	781b      	ldrb	r3, [r3, #0]
}
 8007956:	0018      	movs	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	b004      	add	sp, #16
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	23ae      	movs	r3, #174	@ 0xae
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	58d3      	ldr	r3, [r2, r3]
 8007972:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007974:	230f      	movs	r3, #15
 8007976:	18fb      	adds	r3, r7, r3
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800797c:	230c      	movs	r3, #12
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007984:	2317      	movs	r3, #23
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	001a      	movs	r2, r3
 8007992:	2360      	movs	r3, #96	@ 0x60
 8007994:	4013      	ands	r3, r2
 8007996:	d03d      	beq.n	8007a14 <USBD_CDC_Setup+0xb4>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d000      	beq.n	800799e <USBD_CDC_Setup+0x3e>
 800799c:	e094      	b.n	8007ac8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d02b      	beq.n	80079fe <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da12      	bge.n	80079d6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	23af      	movs	r3, #175	@ 0xaf
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	58d3      	ldr	r3, [r2, r3]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	88d2      	ldrh	r2, [r2, #6]
 80079c4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079c6:	6939      	ldr	r1, [r7, #16]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88da      	ldrh	r2, [r3, #6]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	0018      	movs	r0, r3
 80079d0:	f001 fbaf 	bl	8009132 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079d4:	e083      	b.n	8007ade <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	7859      	ldrb	r1, [r3, #1]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	88db      	ldrh	r3, [r3, #6]
 80079e6:	b2d9      	uxtb	r1, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4a40      	ldr	r2, [pc, #256]	@ (8007aec <USBD_CDC_Setup+0x18c>)
 80079ec:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079ee:	6939      	ldr	r1, [r7, #16]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	88da      	ldrh	r2, [r3, #6]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	0018      	movs	r0, r3
 80079f8:	f001 fbce 	bl	8009198 <USBD_CtlPrepareRx>
      break;
 80079fc:	e06f      	b.n	8007ade <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	23af      	movs	r3, #175	@ 0xaf
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	58d3      	ldr	r3, [r2, r3]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	7850      	ldrb	r0, [r2, #1]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4798      	blx	r3
      break;
 8007a12:	e064      	b.n	8007ade <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b0b      	cmp	r3, #11
 8007a1a:	d037      	beq.n	8007a8c <USBD_CDC_Setup+0x12c>
 8007a1c:	dc47      	bgt.n	8007aae <USBD_CDC_Setup+0x14e>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <USBD_CDC_Setup+0xc8>
 8007a22:	2b0a      	cmp	r3, #10
 8007a24:	d019      	beq.n	8007a5a <USBD_CDC_Setup+0xfa>
 8007a26:	e042      	b.n	8007aae <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	23a7      	movs	r3, #167	@ 0xa7
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	5cd3      	ldrb	r3, [r2, r3]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d107      	bne.n	8007a44 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a34:	230c      	movs	r3, #12
 8007a36:	18f9      	adds	r1, r7, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f001 fb78 	bl	8009132 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a42:	e040      	b.n	8007ac6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	0011      	movs	r1, r2
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f001 faf3 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a50:	2317      	movs	r3, #23
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2202      	movs	r2, #2
 8007a56:	701a      	strb	r2, [r3, #0]
          break;
 8007a58:	e035      	b.n	8007ac6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	23a7      	movs	r3, #167	@ 0xa7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	5cd3      	ldrb	r3, [r2, r3]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d107      	bne.n	8007a76 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a66:	230f      	movs	r3, #15
 8007a68:	18f9      	adds	r1, r7, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f001 fb5f 	bl	8009132 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a74:	e027      	b.n	8007ac6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	0011      	movs	r1, r2
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f001 fada 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a82:	2317      	movs	r3, #23
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
          break;
 8007a8a:	e01c      	b.n	8007ac6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	23a7      	movs	r3, #167	@ 0xa7
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	5cd3      	ldrb	r3, [r2, r3]
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d015      	beq.n	8007ac4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	0011      	movs	r1, r2
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f001 fac9 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa4:	2317      	movs	r3, #23
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007aac:	e00a      	b.n	8007ac4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f001 fabe 	bl	8009036 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aba:	2317      	movs	r3, #23
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
          break;
 8007ac2:	e000      	b.n	8007ac6 <USBD_CDC_Setup+0x166>
          break;
 8007ac4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007ac6:	e00a      	b.n	8007ade <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	0011      	movs	r1, r2
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f001 fab1 	bl	8009036 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ad4:	2317      	movs	r3, #23
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	2202      	movs	r2, #2
 8007ada:	701a      	strb	r2, [r3, #0]
      break;
 8007adc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8007ade:	2317      	movs	r3, #23
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
}
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b006      	add	sp, #24
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	00000201 	.word	0x00000201

08007af0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	000a      	movs	r2, r1
 8007afa:	1cfb      	adds	r3, r7, #3
 8007afc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	23ae      	movs	r3, #174	@ 0xae
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	58d3      	ldr	r3, [r2, r3]
 8007b06:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	23b0      	movs	r3, #176	@ 0xb0
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	58d3      	ldr	r3, [r2, r3]
 8007b10:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	23ae      	movs	r3, #174	@ 0xae
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	58d3      	ldr	r3, [r2, r3]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d03e      	beq.n	8007b9c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b1e:	1cfb      	adds	r3, r7, #3
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	0013      	movs	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	189b      	adds	r3, r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	18cb      	adds	r3, r1, r3
 8007b2e:	331c      	adds	r3, #28
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d02b      	beq.n	8007b8e <USBD_CDC_DataIn+0x9e>
 8007b36:	1cfb      	adds	r3, r7, #3
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	0013      	movs	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	189b      	adds	r3, r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	18cb      	adds	r3, r1, r3
 8007b46:	331c      	adds	r3, #28
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	1cfb      	adds	r3, r7, #3
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	0013      	movs	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	189b      	adds	r3, r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	18cb      	adds	r3, r1, r3
 8007b5a:	3320      	adds	r3, #32
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	0019      	movs	r1, r3
 8007b60:	f7f8 fb6a 	bl	8000238 <__aeabi_uidivmod>
 8007b64:	1e0b      	subs	r3, r1, #0
 8007b66:	d112      	bne.n	8007b8e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b68:	1cfb      	adds	r3, r7, #3
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	0013      	movs	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	189b      	adds	r3, r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	18cb      	adds	r3, r1, r3
 8007b78:	331c      	adds	r3, #28
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b7e:	1cfb      	adds	r3, r7, #3
 8007b80:	7819      	ldrb	r1, [r3, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	f001 ffd8 	bl	8009b3c <USBD_LL_Transmit>
 8007b8c:	e004      	b.n	8007b98 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	2385      	movs	r3, #133	@ 0x85
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	2100      	movs	r1, #0
 8007b96:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8007b9c:	2302      	movs	r3, #2
  }
}
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b004      	add	sp, #16
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	000a      	movs	r2, r1
 8007bb0:	1cfb      	adds	r3, r7, #3
 8007bb2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	23ae      	movs	r3, #174	@ 0xae
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	58d3      	ldr	r3, [r2, r3]
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bbe:	1cfb      	adds	r3, r7, #3
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	0011      	movs	r1, r2
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f002 f826 	bl	8009c18 <USBD_LL_GetRxDataSize>
 8007bcc:	0001      	movs	r1, r0
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	2383      	movs	r3, #131	@ 0x83
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	23ae      	movs	r3, #174	@ 0xae
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	58d3      	ldr	r3, [r2, r3]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d011      	beq.n	8007c06 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	23af      	movs	r3, #175	@ 0xaf
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	58d3      	ldr	r3, [r2, r3]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	68f9      	ldr	r1, [r7, #12]
 8007bee:	2381      	movs	r3, #129	@ 0x81
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	58c8      	ldr	r0, [r1, r3]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2183      	movs	r1, #131	@ 0x83
 8007bf8:	0089      	lsls	r1, r1, #2
 8007bfa:	468c      	mov	ip, r1
 8007bfc:	4463      	add	r3, ip
 8007bfe:	0019      	movs	r1, r3
 8007c00:	4790      	blx	r2

    return USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	23ae      	movs	r3, #174	@ 0xae
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	58d3      	ldr	r3, [r2, r3]
 8007c20:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	23af      	movs	r3, #175	@ 0xaf
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	58d3      	ldr	r3, [r2, r3]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <USBD_CDC_EP0_RxReady+0x50>
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	2380      	movs	r3, #128	@ 0x80
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	5cd3      	ldrb	r3, [r2, r3]
 8007c36:	2bff      	cmp	r3, #255	@ 0xff
 8007c38:	d012      	beq.n	8007c60 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	23af      	movs	r3, #175	@ 0xaf
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	58d3      	ldr	r3, [r2, r3]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	2280      	movs	r2, #128	@ 0x80
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8007c4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4c06      	ldr	r4, [pc, #24]	@ (8007c6c <USBD_CDC_EP0_RxReady+0x5c>)
 8007c52:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	2380      	movs	r3, #128	@ 0x80
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	21ff      	movs	r1, #255	@ 0xff
 8007c5e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b005      	add	sp, #20
 8007c68:	bd90      	pop	{r4, r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	00000201 	.word	0x00000201

08007c70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2243      	movs	r2, #67	@ 0x43
 8007c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c7e:	4b02      	ldr	r3, [pc, #8]	@ (8007c88 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8007c80:	0018      	movs	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b002      	add	sp, #8
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	2000011c 	.word	0x2000011c

08007c8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2243      	movs	r2, #67	@ 0x43
 8007c98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c9a:	4b02      	ldr	r3, [pc, #8]	@ (8007ca4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b002      	add	sp, #8
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	200000d8 	.word	0x200000d8

08007ca8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2243      	movs	r2, #67	@ 0x43
 8007cb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007cb6:	4b02      	ldr	r3, [pc, #8]	@ (8007cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8007cb8:	0018      	movs	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000160 	.word	0x20000160

08007cc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007cd2:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b002      	add	sp, #8
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000094 	.word	0x20000094

08007ce0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007cea:	200f      	movs	r0, #15
 8007cec:	183b      	adds	r3, r7, r0
 8007cee:	2202      	movs	r2, #2
 8007cf0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	23af      	movs	r3, #175	@ 0xaf
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007d02:	183b      	adds	r3, r7, r0
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007d08:	230f      	movs	r3, #15
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
}
 8007d0e:	0018      	movs	r0, r3
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b004      	add	sp, #16
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b086      	sub	sp, #24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	1dbb      	adds	r3, r7, #6
 8007d22:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	23ae      	movs	r3, #174	@ 0xae
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	58d3      	ldr	r3, [r2, r3]
 8007d2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	2382      	movs	r3, #130	@ 0x82
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8007d38:	1dbb      	adds	r3, r7, #6
 8007d3a:	8819      	ldrh	r1, [r3, #0]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	2384      	movs	r3, #132	@ 0x84
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b006      	add	sp, #24
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	23ae      	movs	r3, #174	@ 0xae
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	58d3      	ldr	r3, [r2, r3]
 8007d60:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	2381      	movs	r3, #129	@ 0x81
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	0018      	movs	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b004      	add	sp, #16
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	23ae      	movs	r3, #174	@ 0xae
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	58d3      	ldr	r3, [r2, r3]
 8007d86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	23ae      	movs	r3, #174	@ 0xae
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	58d3      	ldr	r3, [r2, r3]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d022      	beq.n	8007dda <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	2385      	movs	r3, #133	@ 0x85
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	58d3      	ldr	r3, [r2, r3]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11a      	bne.n	8007dd6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	2385      	movs	r3, #133	@ 0x85
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	2101      	movs	r1, #1
 8007da8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	2384      	movs	r3, #132	@ 0x84
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	58d2      	ldr	r2, [r2, r3]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	2382      	movs	r3, #130	@ 0x82
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	2384      	movs	r3, #132	@ 0x84
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	000a      	movs	r2, r1
 8007dcc:	2181      	movs	r1, #129	@ 0x81
 8007dce:	f001 feb5 	bl	8009b3c <USBD_LL_Transmit>

      return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e002      	b.n	8007ddc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8007dda:	2302      	movs	r3, #2
  }
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b004      	add	sp, #16
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	23ae      	movs	r3, #174	@ 0xae
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	58d3      	ldr	r3, [r2, r3]
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	23ae      	movs	r3, #174	@ 0xae
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	58d3      	ldr	r3, [r2, r3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d019      	beq.n	8007e36 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7c1b      	ldrb	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	2381      	movs	r3, #129	@ 0x81
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	58d2      	ldr	r2, [r2, r3]
 8007e12:	2380      	movs	r3, #128	@ 0x80
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f001 fec6 	bl	8009baa <USBD_LL_PrepareReceive>
 8007e1e:	e008      	b.n	8007e32 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	2381      	movs	r3, #129	@ 0x81
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	58d2      	ldr	r2, [r2, r3]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	2340      	movs	r3, #64	@ 0x40
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	f001 febc 	bl	8009baa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e000      	b.n	8007e38 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
  }
}
 8007e38:	0018      	movs	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b004      	add	sp, #16
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	1dfb      	adds	r3, r7, #7
 8007e4c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e54:	2302      	movs	r3, #2
 8007e56:	e020      	b.n	8007e9a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	23ad      	movs	r3, #173	@ 0xad
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	58d3      	ldr	r3, [r2, r3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	23ad      	movs	r3, #173	@ 0xad
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	23ac      	movs	r3, #172	@ 0xac
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	23a7      	movs	r3, #167	@ 0xa7
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	2101      	movs	r1, #1
 8007e86:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	1dfa      	adds	r2, r7, #7
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0018      	movs	r0, r3
 8007e94:	f001 fcb6 	bl	8009804 <USBD_LL_Init>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b004      	add	sp, #16
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007eac:	200f      	movs	r0, #15
 8007eae:	183b      	adds	r3, r7, r0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d008      	beq.n	8007ecc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	23ad      	movs	r3, #173	@ 0xad
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007ec4:	183b      	adds	r3, r7, r0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	e003      	b.n	8007ed4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ecc:	230f      	movs	r3, #15
 8007ece:	18fb      	adds	r3, r7, r3
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007ed4:	230f      	movs	r3, #15
 8007ed6:	18fb      	adds	r3, r7, r3
 8007ed8:	781b      	ldrb	r3, [r3, #0]
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f001 fced 	bl	80098cc <USBD_LL_Start>

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b002      	add	sp, #8
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f0e:	b590      	push	{r4, r7, lr}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	000a      	movs	r2, r1
 8007f18:	1cfb      	adds	r3, r7, #3
 8007f1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f1c:	240f      	movs	r4, #15
 8007f1e:	193b      	adds	r3, r7, r4
 8007f20:	2202      	movs	r2, #2
 8007f22:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	23ad      	movs	r3, #173	@ 0xad
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	58d3      	ldr	r3, [r2, r3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00e      	beq.n	8007f4e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	23ad      	movs	r3, #173	@ 0xad
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	58d3      	ldr	r3, [r2, r3]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	1cfa      	adds	r2, r7, #3
 8007f3c:	7811      	ldrb	r1, [r2, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	0010      	movs	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	1e03      	subs	r3, r0, #0
 8007f46:	d102      	bne.n	8007f4e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007f48:	193b      	adds	r3, r7, r4
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007f4e:	230f      	movs	r3, #15
 8007f50:	18fb      	adds	r3, r7, r3
 8007f52:	781b      	ldrb	r3, [r3, #0]
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b005      	add	sp, #20
 8007f5a:	bd90      	pop	{r4, r7, pc}

08007f5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	000a      	movs	r2, r1
 8007f66:	1cfb      	adds	r3, r7, #3
 8007f68:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	23ad      	movs	r3, #173	@ 0xad
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	58d3      	ldr	r3, [r2, r3]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	1cfa      	adds	r2, r7, #3
 8007f76:	7811      	ldrb	r1, [r2, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	0010      	movs	r0, r2
 8007f7c:	4798      	blx	r3

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	22aa      	movs	r2, #170	@ 0xaa
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	4694      	mov	ip, r2
 8007f9a:	4463      	add	r3, ip
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	0011      	movs	r1, r2
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f001 f810 	bl	8008fc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	23a5      	movs	r3, #165	@ 0xa5
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	2101      	movs	r1, #1
 8007fae:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a23      	ldr	r2, [pc, #140]	@ (8008040 <USBD_LL_SetupStage+0xb8>)
 8007fb4:	5a9b      	ldrh	r3, [r3, r2]
 8007fb6:	0019      	movs	r1, r3
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	23a6      	movs	r3, #166	@ 0xa6
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	23aa      	movs	r3, #170	@ 0xaa
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	5cd3      	ldrb	r3, [r2, r3]
 8007fc8:	001a      	movs	r2, r3
 8007fca:	231f      	movs	r3, #31
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d019      	beq.n	8008006 <USBD_LL_SetupStage+0x7e>
 8007fd2:	d822      	bhi.n	800801a <USBD_LL_SetupStage+0x92>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <USBD_LL_SetupStage+0x56>
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d00a      	beq.n	8007ff2 <USBD_LL_SetupStage+0x6a>
 8007fdc:	e01d      	b.n	800801a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	22aa      	movs	r2, #170	@ 0xaa
 8007fe2:	0092      	lsls	r2, r2, #2
 8007fe4:	189a      	adds	r2, r3, r2
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0011      	movs	r1, r2
 8007fea:	0018      	movs	r0, r3
 8007fec:	f000 fa10 	bl	8008410 <USBD_StdDevReq>
      break;
 8007ff0:	e020      	b.n	8008034 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	22aa      	movs	r2, #170	@ 0xaa
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	189a      	adds	r2, r3, r2
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	0011      	movs	r1, r2
 8007ffe:	0018      	movs	r0, r3
 8008000:	f000 fa78 	bl	80084f4 <USBD_StdItfReq>
      break;
 8008004:	e016      	b.n	8008034 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	22aa      	movs	r2, #170	@ 0xaa
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	189a      	adds	r2, r3, r2
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0011      	movs	r1, r2
 8008012:	0018      	movs	r0, r3
 8008014:	f000 fac5 	bl	80085a2 <USBD_StdEPReq>
      break;
 8008018:	e00c      	b.n	8008034 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	23aa      	movs	r3, #170	@ 0xaa
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	5cd3      	ldrb	r3, [r2, r3]
 8008022:	227f      	movs	r2, #127	@ 0x7f
 8008024:	4393      	bics	r3, r2
 8008026:	b2da      	uxtb	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	0011      	movs	r1, r2
 800802c:	0018      	movs	r0, r3
 800802e:	f001 fcd4 	bl	80099da <USBD_LL_StallEP>
      break;
 8008032:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	0018      	movs	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	b002      	add	sp, #8
 800803c:	bd80      	pop	{r7, pc}
 800803e:	46c0      	nop			@ (mov r8, r8)
 8008040:	000002ae 	.word	0x000002ae

08008044 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	200b      	movs	r0, #11
 8008050:	183b      	adds	r3, r7, r0
 8008052:	1c0a      	adds	r2, r1, #0
 8008054:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008056:	183b      	adds	r3, r7, r0
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d154      	bne.n	8008108 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3355      	adds	r3, #85	@ 0x55
 8008062:	33ff      	adds	r3, #255	@ 0xff
 8008064:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	23a5      	movs	r3, #165	@ 0xa5
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	58d3      	ldr	r3, [r2, r3]
 800806e:	2b03      	cmp	r3, #3
 8008070:	d139      	bne.n	80080e6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	429a      	cmp	r2, r3
 800807c:	d919      	bls.n	80080b2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008094:	429a      	cmp	r2, r3
 8008096:	d203      	bcs.n	80080a0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800809c:	b29b      	uxth	r3, r3
 800809e:	e002      	b.n	80080a6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	001a      	movs	r2, r3
 80080ac:	f001 f898 	bl	80091e0 <USBD_CtlContinueRx>
 80080b0:	e045      	b.n	800813e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	23ad      	movs	r3, #173	@ 0xad
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	58d3      	ldr	r3, [r2, r3]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00d      	beq.n	80080dc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	23a7      	movs	r3, #167	@ 0xa7
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d107      	bne.n	80080dc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	23ad      	movs	r3, #173	@ 0xad
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	58d3      	ldr	r3, [r2, r3]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	0010      	movs	r0, r2
 80080da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	0018      	movs	r0, r3
 80080e0:	f001 f891 	bl	8009206 <USBD_CtlSendStatus>
 80080e4:	e02b      	b.n	800813e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	23a5      	movs	r3, #165	@ 0xa5
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	58d3      	ldr	r3, [r2, r3]
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d125      	bne.n	800813e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	23a5      	movs	r3, #165	@ 0xa5
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	2100      	movs	r1, #0
 80080fa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2100      	movs	r1, #0
 8008100:	0018      	movs	r0, r3
 8008102:	f001 fc6a 	bl	80099da <USBD_LL_StallEP>
 8008106:	e01a      	b.n	800813e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	23ad      	movs	r3, #173	@ 0xad
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	58d3      	ldr	r3, [r2, r3]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d011      	beq.n	800813a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	23a7      	movs	r3, #167	@ 0xa7
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800811e:	2b03      	cmp	r3, #3
 8008120:	d10b      	bne.n	800813a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	23ad      	movs	r3, #173	@ 0xad
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	58d3      	ldr	r3, [r2, r3]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	220b      	movs	r2, #11
 800812e:	18ba      	adds	r2, r7, r2
 8008130:	7811      	ldrb	r1, [r2, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	0010      	movs	r0, r2
 8008136:	4798      	blx	r3
 8008138:	e001      	b.n	800813e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800813a:	2302      	movs	r3, #2
 800813c:	e000      	b.n	8008140 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b006      	add	sp, #24
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	200b      	movs	r0, #11
 8008154:	183b      	adds	r3, r7, r0
 8008156:	1c0a      	adds	r2, r1, #0
 8008158:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800815a:	183b      	adds	r3, r7, r0
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d000      	beq.n	8008164 <USBD_LL_DataInStage+0x1c>
 8008162:	e08e      	b.n	8008282 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3314      	adds	r3, #20
 8008168:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	23a5      	movs	r3, #165	@ 0xa5
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	58d3      	ldr	r3, [r2, r3]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d164      	bne.n	8008240 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	429a      	cmp	r2, r3
 8008180:	d915      	bls.n	80081ae <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	b29a      	uxth	r2, r3
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	0018      	movs	r0, r3
 800819c:	f000 ffe9 	bl	8009172 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	2300      	movs	r3, #0
 80081a4:	2200      	movs	r2, #0
 80081a6:	2100      	movs	r1, #0
 80081a8:	f001 fcff 	bl	8009baa <USBD_LL_PrepareReceive>
 80081ac:	e059      	b.n	8008262 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	0019      	movs	r1, r3
 80081b8:	0010      	movs	r0, r2
 80081ba:	f7f8 f83d 	bl	8000238 <__aeabi_uidivmod>
 80081be:	1e0b      	subs	r3, r1, #0
 80081c0:	d11f      	bne.n	8008202 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d319      	bcc.n	8008202 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	23a6      	movs	r3, #166	@ 0xa6
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80081da:	429a      	cmp	r2, r3
 80081dc:	d211      	bcs.n	8008202 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 ffc4 	bl	8009172 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	23a6      	movs	r3, #166	@ 0xa6
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	2100      	movs	r1, #0
 80081f2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	2300      	movs	r3, #0
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	f001 fcd5 	bl	8009baa <USBD_LL_PrepareReceive>
 8008200:	e02f      	b.n	8008262 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	23ad      	movs	r3, #173	@ 0xad
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	58d3      	ldr	r3, [r2, r3]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00d      	beq.n	800822c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	23a7      	movs	r3, #167	@ 0xa7
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008218:	2b03      	cmp	r3, #3
 800821a:	d107      	bne.n	800822c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	23ad      	movs	r3, #173	@ 0xad
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	58d3      	ldr	r3, [r2, r3]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	0010      	movs	r0, r2
 800822a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2180      	movs	r1, #128	@ 0x80
 8008230:	0018      	movs	r0, r3
 8008232:	f001 fbd2 	bl	80099da <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	0018      	movs	r0, r3
 800823a:	f000 fff8 	bl	800922e <USBD_CtlReceiveStatus>
 800823e:	e010      	b.n	8008262 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	23a5      	movs	r3, #165	@ 0xa5
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	58d3      	ldr	r3, [r2, r3]
 8008248:	2b04      	cmp	r3, #4
 800824a:	d005      	beq.n	8008258 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	23a5      	movs	r3, #165	@ 0xa5
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2180      	movs	r1, #128	@ 0x80
 800825c:	0018      	movs	r0, r3
 800825e:	f001 fbbc 	bl	80099da <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	23a8      	movs	r3, #168	@ 0xa8
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	5cd3      	ldrb	r3, [r2, r3]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d124      	bne.n	80082b8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	0018      	movs	r0, r3
 8008272:	f7ff fe43 	bl	8007efc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	23a8      	movs	r3, #168	@ 0xa8
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	2100      	movs	r1, #0
 800827e:	54d1      	strb	r1, [r2, r3]
 8008280:	e01a      	b.n	80082b8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	23ad      	movs	r3, #173	@ 0xad
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	58d3      	ldr	r3, [r2, r3]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d011      	beq.n	80082b4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	23a7      	movs	r3, #167	@ 0xa7
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008298:	2b03      	cmp	r3, #3
 800829a:	d10b      	bne.n	80082b4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	23ad      	movs	r3, #173	@ 0xad
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	58d3      	ldr	r3, [r2, r3]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	220b      	movs	r2, #11
 80082a8:	18ba      	adds	r2, r7, r2
 80082aa:	7811      	ldrb	r1, [r2, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	0010      	movs	r0, r2
 80082b0:	4798      	blx	r3
 80082b2:	e001      	b.n	80082b8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082b4:	2302      	movs	r3, #2
 80082b6:	e000      	b.n	80082ba <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	b006      	add	sp, #24
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	2340      	movs	r3, #64	@ 0x40
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	f001 fb20 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	23ac      	movs	r3, #172	@ 0xac
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	2101      	movs	r1, #1
 80082de:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	23b2      	movs	r3, #178	@ 0xb2
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	2140      	movs	r1, #64	@ 0x40
 80082e8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	2340      	movs	r3, #64	@ 0x40
 80082ee:	2200      	movs	r2, #0
 80082f0:	2180      	movs	r1, #128	@ 0x80
 80082f2:	f001 fb10 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2240      	movs	r2, #64	@ 0x40
 8008300:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	23a7      	movs	r3, #167	@ 0xa7
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	2101      	movs	r1, #1
 800830a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	23a5      	movs	r3, #165	@ 0xa5
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	2100      	movs	r1, #0
 8008314:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	23a9      	movs	r3, #169	@ 0xa9
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	2100      	movs	r1, #0
 8008324:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	23ae      	movs	r3, #174	@ 0xae
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	58d3      	ldr	r3, [r2, r3]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	23ad      	movs	r3, #173	@ 0xad
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	58d3      	ldr	r3, [r2, r3]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	b2d9      	uxtb	r1, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	0018      	movs	r0, r3
 8008346:	4790      	blx	r2
  }

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b002      	add	sp, #8
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	000a      	movs	r2, r1
 800835c:	1cfb      	adds	r3, r7, #3
 800835e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	1cfa      	adds	r2, r7, #3
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	0018      	movs	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	b002      	add	sp, #8
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	23a7      	movs	r3, #167	@ 0xa7
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	5cd1      	ldrb	r1, [r2, r3]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a06      	ldr	r2, [pc, #24]	@ (80083a0 <USBD_LL_Suspend+0x2c>)
 8008388:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	23a7      	movs	r3, #167	@ 0xa7
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	2104      	movs	r1, #4
 8008392:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b002      	add	sp, #8
 800839c:	bd80      	pop	{r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	0000029d 	.word	0x0000029d

080083a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	23a7      	movs	r3, #167	@ 0xa7
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	5cd3      	ldrb	r3, [r2, r3]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d106      	bne.n	80083c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a05      	ldr	r2, [pc, #20]	@ (80083d0 <USBD_LL_Resume+0x2c>)
 80083bc:	5c99      	ldrb	r1, [r3, r2]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	23a7      	movs	r3, #167	@ 0xa7
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b002      	add	sp, #8
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	0000029d 	.word	0x0000029d

080083d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	23a7      	movs	r3, #167	@ 0xa7
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	5cd3      	ldrb	r3, [r2, r3]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d10e      	bne.n	8008406 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	23ad      	movs	r3, #173	@ 0xad
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	58d3      	ldr	r3, [r2, r3]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	23ad      	movs	r3, #173	@ 0xad
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	58d3      	ldr	r3, [r2, r3]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	0010      	movs	r0, r2
 8008404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	b002      	add	sp, #8
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800841a:	230f      	movs	r3, #15
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	001a      	movs	r2, r3
 8008428:	2360      	movs	r3, #96	@ 0x60
 800842a:	4013      	ands	r3, r2
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	d004      	beq.n	800843a <USBD_StdDevReq+0x2a>
 8008430:	d84f      	bhi.n	80084d2 <USBD_StdDevReq+0xc2>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <USBD_StdDevReq+0x3e>
 8008436:	2b20      	cmp	r3, #32
 8008438:	d14b      	bne.n	80084d2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	23ad      	movs	r3, #173	@ 0xad
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	58d3      	ldr	r3, [r2, r3]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	0010      	movs	r0, r2
 800844a:	4798      	blx	r3
      break;
 800844c:	e048      	b.n	80084e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b09      	cmp	r3, #9
 8008454:	d835      	bhi.n	80084c2 <USBD_StdDevReq+0xb2>
 8008456:	009a      	lsls	r2, r3, #2
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <USBD_StdDevReq+0xe0>)
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	0011      	movs	r1, r2
 8008466:	0018      	movs	r0, r3
 8008468:	f000 fa52 	bl	8008910 <USBD_GetDescriptor>
          break;
 800846c:	e030      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	0011      	movs	r1, r2
 8008474:	0018      	movs	r0, r3
 8008476:	f000 fbfd 	bl	8008c74 <USBD_SetAddress>
          break;
 800847a:	e029      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	0011      	movs	r1, r2
 8008482:	0018      	movs	r0, r3
 8008484:	f000 fc4a 	bl	8008d1c <USBD_SetConfig>
          break;
 8008488:	e022      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	0011      	movs	r1, r2
 8008490:	0018      	movs	r0, r3
 8008492:	f000 fce7 	bl	8008e64 <USBD_GetConfig>
          break;
 8008496:	e01b      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	0011      	movs	r1, r2
 800849e:	0018      	movs	r0, r3
 80084a0:	f000 fd1b 	bl	8008eda <USBD_GetStatus>
          break;
 80084a4:	e014      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	0011      	movs	r1, r2
 80084ac:	0018      	movs	r0, r3
 80084ae:	f000 fd4e 	bl	8008f4e <USBD_SetFeature>
          break;
 80084b2:	e00d      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0011      	movs	r1, r2
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 fd5d 	bl	8008f7a <USBD_ClrFeature>
          break;
 80084c0:	e006      	b.n	80084d0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0011      	movs	r1, r2
 80084c8:	0018      	movs	r0, r3
 80084ca:	f000 fdb4 	bl	8009036 <USBD_CtlError>
          break;
 80084ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80084d0:	e006      	b.n	80084e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	0011      	movs	r1, r2
 80084d8:	0018      	movs	r0, r3
 80084da:	f000 fdac 	bl	8009036 <USBD_CtlError>
      break;
 80084de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80084e0:	230f      	movs	r3, #15
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	781b      	ldrb	r3, [r3, #0]
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b004      	add	sp, #16
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			@ (mov r8, r8)
 80084f0:	0800a73c 	.word	0x0800a73c

080084f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80084f4:	b5b0      	push	{r4, r5, r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fe:	230f      	movs	r3, #15
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	001a      	movs	r2, r3
 800850c:	2360      	movs	r3, #96	@ 0x60
 800850e:	4013      	ands	r3, r2
 8008510:	2b40      	cmp	r3, #64	@ 0x40
 8008512:	d004      	beq.n	800851e <USBD_StdItfReq+0x2a>
 8008514:	d839      	bhi.n	800858a <USBD_StdItfReq+0x96>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <USBD_StdItfReq+0x2a>
 800851a:	2b20      	cmp	r3, #32
 800851c:	d135      	bne.n	800858a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	23a7      	movs	r3, #167	@ 0xa7
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	5cd3      	ldrb	r3, [r2, r3]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b02      	cmp	r3, #2
 800852a:	d825      	bhi.n	8008578 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	889b      	ldrh	r3, [r3, #4]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d819      	bhi.n	800856a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	23ad      	movs	r3, #173	@ 0xad
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	58d3      	ldr	r3, [r2, r3]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	250f      	movs	r5, #15
 8008542:	197c      	adds	r4, r7, r5
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	0010      	movs	r0, r2
 800854a:	4798      	blx	r3
 800854c:	0003      	movs	r3, r0
 800854e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	88db      	ldrh	r3, [r3, #6]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d116      	bne.n	8008586 <USBD_StdItfReq+0x92>
 8008558:	197b      	adds	r3, r7, r5
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d112      	bne.n	8008586 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	0018      	movs	r0, r3
 8008564:	f000 fe4f 	bl	8009206 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008568:	e00d      	b.n	8008586 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	0011      	movs	r1, r2
 8008570:	0018      	movs	r0, r3
 8008572:	f000 fd60 	bl	8009036 <USBD_CtlError>
          break;
 8008576:	e006      	b.n	8008586 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0011      	movs	r1, r2
 800857e:	0018      	movs	r0, r3
 8008580:	f000 fd59 	bl	8009036 <USBD_CtlError>
          break;
 8008584:	e000      	b.n	8008588 <USBD_StdItfReq+0x94>
          break;
 8008586:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008588:	e006      	b.n	8008598 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	0011      	movs	r1, r2
 8008590:	0018      	movs	r0, r3
 8008592:	f000 fd50 	bl	8009036 <USBD_CtlError>
      break;
 8008596:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	0018      	movs	r0, r3
 800859c:	46bd      	mov	sp, r7
 800859e:	b004      	add	sp, #16
 80085a0:	bdb0      	pop	{r4, r5, r7, pc}

080085a2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085a2:	b5b0      	push	{r4, r5, r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ac:	230f      	movs	r3, #15
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	889a      	ldrh	r2, [r3, #4]
 80085b8:	230e      	movs	r3, #14
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	001a      	movs	r2, r3
 80085c4:	2360      	movs	r3, #96	@ 0x60
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d006      	beq.n	80085da <USBD_StdEPReq+0x38>
 80085cc:	d900      	bls.n	80085d0 <USBD_StdEPReq+0x2e>
 80085ce:	e190      	b.n	80088f2 <USBD_StdEPReq+0x350>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <USBD_StdEPReq+0x4c>
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d000      	beq.n	80085da <USBD_StdEPReq+0x38>
 80085d8:	e18b      	b.n	80088f2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	23ad      	movs	r3, #173	@ 0xad
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	58d3      	ldr	r3, [r2, r3]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	0010      	movs	r0, r2
 80085ea:	4798      	blx	r3
      break;
 80085ec:	e188      	b.n	8008900 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	001a      	movs	r2, r3
 80085f4:	2360      	movs	r3, #96	@ 0x60
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d10f      	bne.n	800861c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	23ad      	movs	r3, #173	@ 0xad
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	58d3      	ldr	r3, [r2, r3]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	250f      	movs	r5, #15
 8008608:	197c      	adds	r4, r7, r5
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	0010      	movs	r0, r2
 8008610:	4798      	blx	r3
 8008612:	0003      	movs	r3, r0
 8008614:	7023      	strb	r3, [r4, #0]

        return ret;
 8008616:	197b      	adds	r3, r7, r5
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	e174      	b.n	8008906 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d007      	beq.n	8008634 <USBD_StdEPReq+0x92>
 8008624:	dd00      	ble.n	8008628 <USBD_StdEPReq+0x86>
 8008626:	e15c      	b.n	80088e2 <USBD_StdEPReq+0x340>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d100      	bne.n	800862e <USBD_StdEPReq+0x8c>
 800862c:	e092      	b.n	8008754 <USBD_StdEPReq+0x1b2>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d04b      	beq.n	80086ca <USBD_StdEPReq+0x128>
 8008632:	e156      	b.n	80088e2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	23a7      	movs	r3, #167	@ 0xa7
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	5cd3      	ldrb	r3, [r2, r3]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d002      	beq.n	8008646 <USBD_StdEPReq+0xa4>
 8008640:	2b03      	cmp	r3, #3
 8008642:	d01d      	beq.n	8008680 <USBD_StdEPReq+0xde>
 8008644:	e039      	b.n	80086ba <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008646:	220e      	movs	r2, #14
 8008648:	18bb      	adds	r3, r7, r2
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <USBD_StdEPReq+0xd0>
 8008650:	18bb      	adds	r3, r7, r2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b80      	cmp	r3, #128	@ 0x80
 8008656:	d00c      	beq.n	8008672 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008658:	18bb      	adds	r3, r7, r2
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0011      	movs	r1, r2
 8008660:	0018      	movs	r0, r3
 8008662:	f001 f9ba 	bl	80099da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2180      	movs	r1, #128	@ 0x80
 800866a:	0018      	movs	r0, r3
 800866c:	f001 f9b5 	bl	80099da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008670:	e02a      	b.n	80086c8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	0011      	movs	r1, r2
 8008678:	0018      	movs	r0, r3
 800867a:	f000 fcdc 	bl	8009036 <USBD_CtlError>
              break;
 800867e:	e023      	b.n	80086c8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	885b      	ldrh	r3, [r3, #2]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d113      	bne.n	80086b0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008688:	220e      	movs	r2, #14
 800868a:	18bb      	adds	r3, r7, r2
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00e      	beq.n	80086b0 <USBD_StdEPReq+0x10e>
 8008692:	18bb      	adds	r3, r7, r2
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b80      	cmp	r3, #128	@ 0x80
 8008698:	d00a      	beq.n	80086b0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88db      	ldrh	r3, [r3, #6]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086a2:	18bb      	adds	r3, r7, r2
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	0011      	movs	r1, r2
 80086aa:	0018      	movs	r0, r3
 80086ac:	f001 f995 	bl	80099da <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	0018      	movs	r0, r3
 80086b4:	f000 fda7 	bl	8009206 <USBD_CtlSendStatus>

              break;
 80086b8:	e006      	b.n	80086c8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f000 fcb8 	bl	8009036 <USBD_CtlError>
              break;
 80086c6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80086c8:	e112      	b.n	80088f0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	23a7      	movs	r3, #167	@ 0xa7
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	5cd3      	ldrb	r3, [r2, r3]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d002      	beq.n	80086dc <USBD_StdEPReq+0x13a>
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d01d      	beq.n	8008716 <USBD_StdEPReq+0x174>
 80086da:	e032      	b.n	8008742 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086dc:	220e      	movs	r2, #14
 80086de:	18bb      	adds	r3, r7, r2
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d010      	beq.n	8008708 <USBD_StdEPReq+0x166>
 80086e6:	18bb      	adds	r3, r7, r2
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b80      	cmp	r3, #128	@ 0x80
 80086ec:	d00c      	beq.n	8008708 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086ee:	18bb      	adds	r3, r7, r2
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	0011      	movs	r1, r2
 80086f6:	0018      	movs	r0, r3
 80086f8:	f001 f96f 	bl	80099da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2180      	movs	r1, #128	@ 0x80
 8008700:	0018      	movs	r0, r3
 8008702:	f001 f96a 	bl	80099da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008706:	e024      	b.n	8008752 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0011      	movs	r1, r2
 800870e:	0018      	movs	r0, r3
 8008710:	f000 fc91 	bl	8009036 <USBD_CtlError>
              break;
 8008714:	e01d      	b.n	8008752 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d118      	bne.n	8008750 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800871e:	210e      	movs	r1, #14
 8008720:	187b      	adds	r3, r7, r1
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	227f      	movs	r2, #127	@ 0x7f
 8008726:	4013      	ands	r3, r2
 8008728:	d006      	beq.n	8008738 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800872a:	187b      	adds	r3, r7, r1
 800872c:	781a      	ldrb	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	0011      	movs	r1, r2
 8008732:	0018      	movs	r0, r3
 8008734:	f001 f97c 	bl	8009a30 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	0018      	movs	r0, r3
 800873c:	f000 fd63 	bl	8009206 <USBD_CtlSendStatus>
              }
              break;
 8008740:	e006      	b.n	8008750 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	0011      	movs	r1, r2
 8008748:	0018      	movs	r0, r3
 800874a:	f000 fc74 	bl	8009036 <USBD_CtlError>
              break;
 800874e:	e000      	b.n	8008752 <USBD_StdEPReq+0x1b0>
              break;
 8008750:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008752:	e0cd      	b.n	80088f0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	23a7      	movs	r3, #167	@ 0xa7
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	5cd3      	ldrb	r3, [r2, r3]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d002      	beq.n	8008766 <USBD_StdEPReq+0x1c4>
 8008760:	2b03      	cmp	r3, #3
 8008762:	d03c      	beq.n	80087de <USBD_StdEPReq+0x23c>
 8008764:	e0b5      	b.n	80088d2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008766:	220e      	movs	r2, #14
 8008768:	18bb      	adds	r3, r7, r2
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <USBD_StdEPReq+0x1e4>
 8008770:	18bb      	adds	r3, r7, r2
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b80      	cmp	r3, #128	@ 0x80
 8008776:	d006      	beq.n	8008786 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0011      	movs	r1, r2
 800877e:	0018      	movs	r0, r3
 8008780:	f000 fc59 	bl	8009036 <USBD_CtlError>
                break;
 8008784:	e0ac      	b.n	80088e0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008786:	220e      	movs	r2, #14
 8008788:	18bb      	adds	r3, r7, r2
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	b25b      	sxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	da0c      	bge.n	80087ac <USBD_StdEPReq+0x20a>
 8008792:	18bb      	adds	r3, r7, r2
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	227f      	movs	r2, #127	@ 0x7f
 8008798:	401a      	ands	r2, r3
 800879a:	0013      	movs	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	189b      	adds	r3, r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	3310      	adds	r3, #16
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	18d3      	adds	r3, r2, r3
 80087a8:	3304      	adds	r3, #4
 80087aa:	e00d      	b.n	80087c8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087ac:	230e      	movs	r3, #14
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	227f      	movs	r2, #127	@ 0x7f
 80087b4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b6:	0013      	movs	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	189b      	adds	r3, r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	3351      	adds	r3, #81	@ 0x51
 80087c0:	33ff      	adds	r3, #255	@ 0xff
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	18d3      	adds	r3, r2, r3
 80087c6:	3304      	adds	r3, #4
 80087c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2202      	movs	r2, #2
 80087d6:	0018      	movs	r0, r3
 80087d8:	f000 fcab 	bl	8009132 <USBD_CtlSendData>
              break;
 80087dc:	e080      	b.n	80088e0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087de:	220e      	movs	r2, #14
 80087e0:	18bb      	adds	r3, r7, r2
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da14      	bge.n	8008814 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ea:	18bb      	adds	r3, r7, r2
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	220f      	movs	r2, #15
 80087f0:	401a      	ands	r2, r3
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	0013      	movs	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	189b      	adds	r3, r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	18cb      	adds	r3, r1, r3
 80087fe:	3318      	adds	r3, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d11e      	bne.n	8008844 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	0011      	movs	r1, r2
 800880c:	0018      	movs	r0, r3
 800880e:	f000 fc12 	bl	8009036 <USBD_CtlError>
                  break;
 8008812:	e065      	b.n	80088e0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008814:	230e      	movs	r3, #14
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	220f      	movs	r2, #15
 800881c:	401a      	ands	r2, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	23ac      	movs	r3, #172	@ 0xac
 8008822:	0059      	lsls	r1, r3, #1
 8008824:	0013      	movs	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	189b      	adds	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	18c3      	adds	r3, r0, r3
 800882e:	185b      	adds	r3, r3, r1
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	0011      	movs	r1, r2
 800883c:	0018      	movs	r0, r3
 800883e:	f000 fbfa 	bl	8009036 <USBD_CtlError>
                  break;
 8008842:	e04d      	b.n	80088e0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008844:	220e      	movs	r2, #14
 8008846:	18bb      	adds	r3, r7, r2
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b25b      	sxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	da0c      	bge.n	800886a <USBD_StdEPReq+0x2c8>
 8008850:	18bb      	adds	r3, r7, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	227f      	movs	r2, #127	@ 0x7f
 8008856:	401a      	ands	r2, r3
 8008858:	0013      	movs	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	189b      	adds	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	3310      	adds	r3, #16
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	18d3      	adds	r3, r2, r3
 8008866:	3304      	adds	r3, #4
 8008868:	e00d      	b.n	8008886 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800886a:	230e      	movs	r3, #14
 800886c:	18fb      	adds	r3, r7, r3
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	227f      	movs	r2, #127	@ 0x7f
 8008872:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008874:	0013      	movs	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	189b      	adds	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	3351      	adds	r3, #81	@ 0x51
 800887e:	33ff      	adds	r3, #255	@ 0xff
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	18d3      	adds	r3, r2, r3
 8008884:	3304      	adds	r3, #4
 8008886:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008888:	220e      	movs	r2, #14
 800888a:	18bb      	adds	r3, r7, r2
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <USBD_StdEPReq+0x2f8>
 8008892:	18bb      	adds	r3, r7, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b80      	cmp	r3, #128	@ 0x80
 8008898:	d103      	bne.n	80088a2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e010      	b.n	80088c4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088a2:	230e      	movs	r3, #14
 80088a4:	18fb      	adds	r3, r7, r3
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	0011      	movs	r1, r2
 80088ac:	0018      	movs	r0, r3
 80088ae:	f001 f8ea 	bl	8009a86 <USBD_LL_IsStallEP>
 80088b2:	1e03      	subs	r3, r0, #0
 80088b4:	d003      	beq.n	80088be <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e002      	b.n	80088c4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	0018      	movs	r0, r3
 80088cc:	f000 fc31 	bl	8009132 <USBD_CtlSendData>
              break;
 80088d0:	e006      	b.n	80088e0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	0011      	movs	r1, r2
 80088d8:	0018      	movs	r0, r3
 80088da:	f000 fbac 	bl	8009036 <USBD_CtlError>
              break;
 80088de:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80088e0:	e006      	b.n	80088f0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	0011      	movs	r1, r2
 80088e8:	0018      	movs	r0, r3
 80088ea:	f000 fba4 	bl	8009036 <USBD_CtlError>
          break;
 80088ee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80088f0:	e006      	b.n	8008900 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	0011      	movs	r1, r2
 80088f8:	0018      	movs	r0, r3
 80088fa:	f000 fb9c 	bl	8009036 <USBD_CtlError>
      break;
 80088fe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008900:	230f      	movs	r3, #15
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	781b      	ldrb	r3, [r3, #0]
}
 8008906:	0018      	movs	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	b004      	add	sp, #16
 800890c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008910 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800891a:	2308      	movs	r3, #8
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	2200      	movs	r2, #0
 8008920:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008926:	230b      	movs	r3, #11
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b07      	cmp	r3, #7
 8008938:	d900      	bls.n	800893c <USBD_GetDescriptor+0x2c>
 800893a:	e159      	b.n	8008bf0 <USBD_GetDescriptor+0x2e0>
 800893c:	009a      	lsls	r2, r3, #2
 800893e:	4bcb      	ldr	r3, [pc, #812]	@ (8008c6c <USBD_GetDescriptor+0x35c>)
 8008940:	18d3      	adds	r3, r2, r3
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	23ac      	movs	r3, #172	@ 0xac
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	58d3      	ldr	r3, [r2, r3]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	2108      	movs	r1, #8
 8008956:	1879      	adds	r1, r7, r1
 8008958:	0010      	movs	r0, r2
 800895a:	4798      	blx	r3
 800895c:	0003      	movs	r3, r0
 800895e:	60fb      	str	r3, [r7, #12]
      break;
 8008960:	e153      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7c1b      	ldrb	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10f      	bne.n	800898a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	23ad      	movs	r3, #173	@ 0xad
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	58d3      	ldr	r3, [r2, r3]
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	2208      	movs	r2, #8
 8008976:	18ba      	adds	r2, r7, r2
 8008978:	0010      	movs	r0, r2
 800897a:	4798      	blx	r3
 800897c:	0003      	movs	r3, r0
 800897e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	2202      	movs	r2, #2
 8008986:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008988:	e13f      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	23ad      	movs	r3, #173	@ 0xad
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	58d3      	ldr	r3, [r2, r3]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	2208      	movs	r2, #8
 8008996:	18ba      	adds	r2, r7, r2
 8008998:	0010      	movs	r0, r2
 800899a:	4798      	blx	r3
 800899c:	0003      	movs	r3, r0
 800899e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	2202      	movs	r2, #2
 80089a6:	701a      	strb	r2, [r3, #0]
      break;
 80089a8:	e12f      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	d900      	bls.n	80089b6 <USBD_GetDescriptor+0xa6>
 80089b4:	e0d0      	b.n	8008b58 <USBD_GetDescriptor+0x248>
 80089b6:	009a      	lsls	r2, r3, #2
 80089b8:	4bad      	ldr	r3, [pc, #692]	@ (8008c70 <USBD_GetDescriptor+0x360>)
 80089ba:	18d3      	adds	r3, r2, r3
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	23ac      	movs	r3, #172	@ 0xac
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	58d3      	ldr	r3, [r2, r3]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	23ac      	movs	r3, #172	@ 0xac
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	58d3      	ldr	r3, [r2, r3]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	2108      	movs	r1, #8
 80089de:	1879      	adds	r1, r7, r1
 80089e0:	0010      	movs	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	0003      	movs	r3, r0
 80089e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e8:	e0c3      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	0011      	movs	r1, r2
 80089f0:	0018      	movs	r0, r3
 80089f2:	f000 fb20 	bl	8009036 <USBD_CtlError>
            err++;
 80089f6:	210b      	movs	r1, #11
 80089f8:	187b      	adds	r3, r7, r1
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	187b      	adds	r3, r7, r1
 80089fe:	3201      	adds	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
          break;
 8008a02:	e0b6      	b.n	8008b72 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	23ac      	movs	r3, #172	@ 0xac
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	58d3      	ldr	r3, [r2, r3]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	23ac      	movs	r3, #172	@ 0xac
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	58d3      	ldr	r3, [r2, r3]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	2108      	movs	r1, #8
 8008a22:	1879      	adds	r1, r7, r1
 8008a24:	0010      	movs	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	0003      	movs	r3, r0
 8008a2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2c:	e0a1      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f000 fafe 	bl	8009036 <USBD_CtlError>
            err++;
 8008a3a:	210b      	movs	r1, #11
 8008a3c:	187b      	adds	r3, r7, r1
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	187b      	adds	r3, r7, r1
 8008a42:	3201      	adds	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
          break;
 8008a46:	e094      	b.n	8008b72 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	23ac      	movs	r3, #172	@ 0xac
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	58d3      	ldr	r3, [r2, r3]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00d      	beq.n	8008a72 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	23ac      	movs	r3, #172	@ 0xac
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	58d3      	ldr	r3, [r2, r3]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	2108      	movs	r1, #8
 8008a66:	1879      	adds	r1, r7, r1
 8008a68:	0010      	movs	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	0003      	movs	r3, r0
 8008a6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a70:	e07f      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	0011      	movs	r1, r2
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f000 fadc 	bl	8009036 <USBD_CtlError>
            err++;
 8008a7e:	210b      	movs	r1, #11
 8008a80:	187b      	adds	r3, r7, r1
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	187b      	adds	r3, r7, r1
 8008a86:	3201      	adds	r2, #1
 8008a88:	701a      	strb	r2, [r3, #0]
          break;
 8008a8a:	e072      	b.n	8008b72 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	23ac      	movs	r3, #172	@ 0xac
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	58d3      	ldr	r3, [r2, r3]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	23ac      	movs	r3, #172	@ 0xac
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	58d3      	ldr	r3, [r2, r3]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	2108      	movs	r1, #8
 8008aaa:	1879      	adds	r1, r7, r1
 8008aac:	0010      	movs	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab4:	e05d      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	0011      	movs	r1, r2
 8008abc:	0018      	movs	r0, r3
 8008abe:	f000 faba 	bl	8009036 <USBD_CtlError>
            err++;
 8008ac2:	210b      	movs	r1, #11
 8008ac4:	187b      	adds	r3, r7, r1
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	187b      	adds	r3, r7, r1
 8008aca:	3201      	adds	r2, #1
 8008acc:	701a      	strb	r2, [r3, #0]
          break;
 8008ace:	e050      	b.n	8008b72 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	23ac      	movs	r3, #172	@ 0xac
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	58d3      	ldr	r3, [r2, r3]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	23ac      	movs	r3, #172	@ 0xac
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	58d3      	ldr	r3, [r2, r3]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	2108      	movs	r1, #8
 8008aee:	1879      	adds	r1, r7, r1
 8008af0:	0010      	movs	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	0003      	movs	r3, r0
 8008af6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af8:	e03b      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	0011      	movs	r1, r2
 8008b00:	0018      	movs	r0, r3
 8008b02:	f000 fa98 	bl	8009036 <USBD_CtlError>
            err++;
 8008b06:	210b      	movs	r1, #11
 8008b08:	187b      	adds	r3, r7, r1
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	3201      	adds	r2, #1
 8008b10:	701a      	strb	r2, [r3, #0]
          break;
 8008b12:	e02e      	b.n	8008b72 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	23ac      	movs	r3, #172	@ 0xac
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	58d3      	ldr	r3, [r2, r3]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00d      	beq.n	8008b3e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	23ac      	movs	r3, #172	@ 0xac
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	58d3      	ldr	r3, [r2, r3]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	7c12      	ldrb	r2, [r2, #16]
 8008b30:	2108      	movs	r1, #8
 8008b32:	1879      	adds	r1, r7, r1
 8008b34:	0010      	movs	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	0003      	movs	r3, r0
 8008b3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3c:	e019      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	0011      	movs	r1, r2
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fa76 	bl	8009036 <USBD_CtlError>
            err++;
 8008b4a:	210b      	movs	r1, #11
 8008b4c:	187b      	adds	r3, r7, r1
 8008b4e:	781a      	ldrb	r2, [r3, #0]
 8008b50:	187b      	adds	r3, r7, r1
 8008b52:	3201      	adds	r2, #1
 8008b54:	701a      	strb	r2, [r3, #0]
          break;
 8008b56:	e00c      	b.n	8008b72 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	0011      	movs	r1, r2
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f000 fa69 	bl	8009036 <USBD_CtlError>
          err++;
 8008b64:	210b      	movs	r1, #11
 8008b66:	187b      	adds	r3, r7, r1
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	187b      	adds	r3, r7, r1
 8008b6c:	3201      	adds	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008b70:	e04b      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>
 8008b72:	e04a      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7c1b      	ldrb	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10b      	bne.n	8008b94 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	23ad      	movs	r3, #173	@ 0xad
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	58d3      	ldr	r3, [r2, r3]
 8008b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b86:	2208      	movs	r2, #8
 8008b88:	18ba      	adds	r2, r7, r2
 8008b8a:	0010      	movs	r0, r2
 8008b8c:	4798      	blx	r3
 8008b8e:	0003      	movs	r3, r0
 8008b90:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b92:	e03a      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0011      	movs	r1, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 fa4b 	bl	8009036 <USBD_CtlError>
        err++;
 8008ba0:	210b      	movs	r1, #11
 8008ba2:	187b      	adds	r3, r7, r1
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	187b      	adds	r3, r7, r1
 8008ba8:	3201      	adds	r2, #1
 8008baa:	701a      	strb	r2, [r3, #0]
      break;
 8008bac:	e02d      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7c1b      	ldrb	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10f      	bne.n	8008bd6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	23ad      	movs	r3, #173	@ 0xad
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	58d3      	ldr	r3, [r2, r3]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	18ba      	adds	r2, r7, r2
 8008bc4:	0010      	movs	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	0003      	movs	r3, r0
 8008bca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd4:	e019      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	0011      	movs	r1, r2
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f000 fa2a 	bl	8009036 <USBD_CtlError>
        err++;
 8008be2:	210b      	movs	r1, #11
 8008be4:	187b      	adds	r3, r7, r1
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	187b      	adds	r3, r7, r1
 8008bea:	3201      	adds	r2, #1
 8008bec:	701a      	strb	r2, [r3, #0]
      break;
 8008bee:	e00c      	b.n	8008c0a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	0011      	movs	r1, r2
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f000 fa1d 	bl	8009036 <USBD_CtlError>
      err++;
 8008bfc:	210b      	movs	r1, #11
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	187b      	adds	r3, r7, r1
 8008c04:	3201      	adds	r2, #1
 8008c06:	701a      	strb	r2, [r3, #0]
      break;
 8008c08:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8008c0a:	230b      	movs	r3, #11
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d127      	bne.n	8008c64 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c14:	2108      	movs	r1, #8
 8008c16:	187b      	adds	r3, r7, r1
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d019      	beq.n	8008c52 <USBD_GetDescriptor+0x342>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d015      	beq.n	8008c52 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88da      	ldrh	r2, [r3, #6]
 8008c2a:	187b      	adds	r3, r7, r1
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	1c18      	adds	r0, r3, #0
 8008c30:	1c11      	adds	r1, r2, #0
 8008c32:	b28a      	uxth	r2, r1
 8008c34:	b283      	uxth	r3, r0
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d900      	bls.n	8008c3c <USBD_GetDescriptor+0x32c>
 8008c3a:	1c01      	adds	r1, r0, #0
 8008c3c:	b28a      	uxth	r2, r1
 8008c3e:	2108      	movs	r1, #8
 8008c40:	187b      	adds	r3, r7, r1
 8008c42:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	881a      	ldrh	r2, [r3, #0]
 8008c48:	68f9      	ldr	r1, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 fa70 	bl	8009132 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f000 fad2 	bl	8009206 <USBD_CtlSendStatus>
 8008c62:	e000      	b.n	8008c66 <USBD_GetDescriptor+0x356>
    return;
 8008c64:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b004      	add	sp, #16
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	0800a764 	.word	0x0800a764
 8008c70:	0800a784 	.word	0x0800a784

08008c74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c74:	b590      	push	{r4, r7, lr}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d13d      	bne.n	8008d02 <USBD_SetAddress+0x8e>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d139      	bne.n	8008d02 <USBD_SetAddress+0x8e>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	885b      	ldrh	r3, [r3, #2]
 8008c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c94:	d835      	bhi.n	8008d02 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	885b      	ldrh	r3, [r3, #2]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	230f      	movs	r3, #15
 8008c9e:	18fb      	adds	r3, r7, r3
 8008ca0:	217f      	movs	r1, #127	@ 0x7f
 8008ca2:	400a      	ands	r2, r1
 8008ca4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	23a7      	movs	r3, #167	@ 0xa7
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	5cd3      	ldrb	r3, [r2, r3]
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d106      	bne.n	8008cc0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	0011      	movs	r1, r2
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f000 f9bc 	bl	8009036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	e027      	b.n	8008d10 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	240f      	movs	r4, #15
 8008cc4:	193a      	adds	r2, r7, r4
 8008cc6:	4914      	ldr	r1, [pc, #80]	@ (8008d18 <USBD_SetAddress+0xa4>)
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ccc:	193b      	adds	r3, r7, r4
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	0011      	movs	r1, r2
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f000 ff06 	bl	8009ae6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	0018      	movs	r0, r3
 8008cde:	f000 fa92 	bl	8009206 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ce2:	193b      	adds	r3, r7, r4
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	23a7      	movs	r3, #167	@ 0xa7
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf4:	e00c      	b.n	8008d10 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	23a7      	movs	r3, #167	@ 0xa7
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d00:	e006      	b.n	8008d10 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	0011      	movs	r1, r2
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f000 f994 	bl	8009036 <USBD_CtlError>
  }
}
 8008d0e:	46c0      	nop			@ (mov r8, r8)
 8008d10:	46c0      	nop			@ (mov r8, r8)
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b005      	add	sp, #20
 8008d16:	bd90      	pop	{r4, r7, pc}
 8008d18:	0000029e 	.word	0x0000029e

08008d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d30:	4b4b      	ldr	r3, [pc, #300]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d906      	bls.n	8008d46 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	0011      	movs	r1, r2
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f000 f979 	bl	8009036 <USBD_CtlError>
 8008d44:	e088      	b.n	8008e58 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	23a7      	movs	r3, #167	@ 0xa7
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d002      	beq.n	8008d58 <USBD_SetConfig+0x3c>
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d029      	beq.n	8008daa <USBD_SetConfig+0x8e>
 8008d56:	e071      	b.n	8008e3c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d58:	4b41      	ldr	r3, [pc, #260]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01f      	beq.n	8008da0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008d60:	4b3f      	ldr	r3, [pc, #252]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	001a      	movs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	23a7      	movs	r3, #167	@ 0xa7
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	2103      	movs	r1, #3
 8008d72:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d74:	4b3a      	ldr	r3, [pc, #232]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	0011      	movs	r1, r2
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff f8c6 	bl	8007f0e <USBD_SetClassConfig>
 8008d82:	0003      	movs	r3, r0
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d106      	bne.n	8008d96 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	0011      	movs	r1, r2
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f000 f951 	bl	8009036 <USBD_CtlError>
            return;
 8008d94:	e060      	b.n	8008e58 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f000 fa34 	bl	8009206 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d9e:	e05b      	b.n	8008e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	0018      	movs	r0, r3
 8008da4:	f000 fa2f 	bl	8009206 <USBD_CtlSendStatus>
        break;
 8008da8:	e056      	b.n	8008e58 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008daa:	4b2d      	ldr	r3, [pc, #180]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d115      	bne.n	8008dde <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	23a7      	movs	r3, #167	@ 0xa7
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	2102      	movs	r1, #2
 8008dba:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008dbc:	4b28      	ldr	r3, [pc, #160]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	001a      	movs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008dc6:	4b26      	ldr	r3, [pc, #152]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008dc8:	781a      	ldrb	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	0011      	movs	r1, r2
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7ff f8c4 	bl	8007f5c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f000 fa15 	bl	8009206 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ddc:	e03c      	b.n	8008e58 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008dde:	4b20      	ldr	r3, [pc, #128]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	001a      	movs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d022      	beq.n	8008e32 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0011      	movs	r1, r2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f7ff f8b0 	bl	8007f5c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008dfc:	4b18      	ldr	r3, [pc, #96]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	001a      	movs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e06:	4b16      	ldr	r3, [pc, #88]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	0011      	movs	r1, r2
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f7ff f87d 	bl	8007f0e <USBD_SetClassConfig>
 8008e14:	0003      	movs	r3, r0
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d106      	bne.n	8008e28 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	0011      	movs	r1, r2
 8008e20:	0018      	movs	r0, r3
 8008e22:	f000 f908 	bl	8009036 <USBD_CtlError>
            return;
 8008e26:	e017      	b.n	8008e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f000 f9eb 	bl	8009206 <USBD_CtlSendStatus>
        break;
 8008e30:	e012      	b.n	8008e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f000 f9e6 	bl	8009206 <USBD_CtlSendStatus>
        break;
 8008e3a:	e00d      	b.n	8008e58 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	0011      	movs	r1, r2
 8008e42:	0018      	movs	r0, r3
 8008e44:	f000 f8f7 	bl	8009036 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <USBD_SetConfig+0x144>)
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0011      	movs	r1, r2
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7ff f883 	bl	8007f5c <USBD_ClrClassConfig>
        break;
 8008e56:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	b002      	add	sp, #8
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	46c0      	nop			@ (mov r8, r8)
 8008e60:	20001ef0 	.word	0x20001ef0

08008e64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	88db      	ldrh	r3, [r3, #6]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d006      	beq.n	8008e84 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	0011      	movs	r1, r2
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f000 f8da 	bl	8009036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e82:	e026      	b.n	8008ed2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	23a7      	movs	r3, #167	@ 0xa7
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	5cd3      	ldrb	r3, [r2, r3]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	dc02      	bgt.n	8008e96 <USBD_GetConfig+0x32>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dc03      	bgt.n	8008e9c <USBD_GetConfig+0x38>
 8008e94:	e016      	b.n	8008ec4 <USBD_GetConfig+0x60>
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d00c      	beq.n	8008eb4 <USBD_GetConfig+0x50>
 8008e9a:	e013      	b.n	8008ec4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	0018      	movs	r0, r3
 8008eae:	f000 f940 	bl	8009132 <USBD_CtlSendData>
        break;
 8008eb2:	e00e      	b.n	8008ed2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	1d19      	adds	r1, r3, #4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 f938 	bl	8009132 <USBD_CtlSendData>
        break;
 8008ec2:	e006      	b.n	8008ed2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	0011      	movs	r1, r2
 8008eca:	0018      	movs	r0, r3
 8008ecc:	f000 f8b3 	bl	8009036 <USBD_CtlError>
        break;
 8008ed0:	46c0      	nop			@ (mov r8, r8)
}
 8008ed2:	46c0      	nop			@ (mov r8, r8)
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	b002      	add	sp, #8
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	23a7      	movs	r3, #167	@ 0xa7
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	5cd3      	ldrb	r3, [r2, r3]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d822      	bhi.n	8008f38 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88db      	ldrh	r3, [r3, #6]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d006      	beq.n	8008f08 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	0011      	movs	r1, r2
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 f898 	bl	8009036 <USBD_CtlError>
        break;
 8008f06:	e01e      	b.n	8008f46 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	23a9      	movs	r3, #169	@ 0xa9
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	58d3      	ldr	r3, [r2, r3]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	0019      	movs	r1, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	0018      	movs	r0, r3
 8008f32:	f000 f8fe 	bl	8009132 <USBD_CtlSendData>
      break;
 8008f36:	e006      	b.n	8008f46 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	0011      	movs	r1, r2
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f000 f879 	bl	8009036 <USBD_CtlError>
      break;
 8008f44:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	b002      	add	sp, #8
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	885b      	ldrh	r3, [r3, #2]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d108      	bne.n	8008f72 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	23a9      	movs	r3, #169	@ 0xa9
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	2101      	movs	r1, #1
 8008f68:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f000 f94a 	bl	8009206 <USBD_CtlSendStatus>
  }
}
 8008f72:	46c0      	nop			@ (mov r8, r8)
 8008f74:	46bd      	mov	sp, r7
 8008f76:	b002      	add	sp, #8
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	23a7      	movs	r3, #167	@ 0xa7
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	5cd3      	ldrb	r3, [r2, r3]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d80d      	bhi.n	8008fae <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	885b      	ldrh	r3, [r3, #2]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d110      	bne.n	8008fbc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	23a9      	movs	r3, #169	@ 0xa9
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f000 f92d 	bl	8009206 <USBD_CtlSendStatus>
      }
      break;
 8008fac:	e006      	b.n	8008fbc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	0011      	movs	r1, r2
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f000 f83e 	bl	8009036 <USBD_CtlError>
      break;
 8008fba:	e000      	b.n	8008fbe <USBD_ClrFeature+0x44>
      break;
 8008fbc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008fbe:	46c0      	nop			@ (mov r8, r8)
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	b002      	add	sp, #8
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	785a      	ldrb	r2, [r3, #1]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	3302      	adds	r3, #2
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	001a      	movs	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	3303      	adds	r3, #3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	18d3      	adds	r3, r2, r3
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	001a      	movs	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	3305      	adds	r3, #5
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	b29b      	uxth	r3, r3
 800900c:	18d3      	adds	r3, r2, r3
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	3306      	adds	r3, #6
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	001a      	movs	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	3307      	adds	r3, #7
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	b29a      	uxth	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	80da      	strh	r2, [r3, #6]

}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	46bd      	mov	sp, r7
 8009032:	b002      	add	sp, #8
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2180      	movs	r1, #128	@ 0x80
 8009044:	0018      	movs	r0, r3
 8009046:	f000 fcc8 	bl	80099da <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2100      	movs	r1, #0
 800904e:	0018      	movs	r0, r3
 8009050:	f000 fcc3 	bl	80099da <USBD_LL_StallEP>
}
 8009054:	46c0      	nop			@ (mov r8, r8)
 8009056:	46bd      	mov	sp, r7
 8009058:	b002      	add	sp, #8
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009068:	2417      	movs	r4, #23
 800906a:	193b      	adds	r3, r7, r4
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d03c      	beq.n	80090f0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	0018      	movs	r0, r3
 800907a:	f000 f83d 	bl	80090f8 <USBD_GetLen>
 800907e:	0003      	movs	r3, r0
 8009080:	3301      	adds	r3, #1
 8009082:	b29b      	uxth	r3, r3
 8009084:	18db      	adds	r3, r3, r3
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800908c:	193b      	adds	r3, r7, r4
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	193a      	adds	r2, r7, r4
 8009092:	1c59      	adds	r1, r3, #1
 8009094:	7011      	strb	r1, [r2, #0]
 8009096:	001a      	movs	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	189b      	adds	r3, r3, r2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	193a      	adds	r2, r7, r4
 80090a8:	1c59      	adds	r1, r3, #1
 80090aa:	7011      	strb	r1, [r2, #0]
 80090ac:	001a      	movs	r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	189b      	adds	r3, r3, r2
 80090b2:	2203      	movs	r2, #3
 80090b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090b6:	e017      	b.n	80090e8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	60fa      	str	r2, [r7, #12]
 80090be:	2417      	movs	r4, #23
 80090c0:	193a      	adds	r2, r7, r4
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	1939      	adds	r1, r7, r4
 80090c6:	1c50      	adds	r0, r2, #1
 80090c8:	7008      	strb	r0, [r1, #0]
 80090ca:	0011      	movs	r1, r2
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	1852      	adds	r2, r2, r1
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090d4:	193b      	adds	r3, r7, r4
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	193a      	adds	r2, r7, r4
 80090da:	1c59      	adds	r1, r3, #1
 80090dc:	7011      	strb	r1, [r2, #0]
 80090de:	001a      	movs	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	2200      	movs	r2, #0
 80090e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e3      	bne.n	80090b8 <USBD_GetString+0x5c>
    }
  }
}
 80090f0:	46c0      	nop			@ (mov r8, r8)
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b007      	add	sp, #28
 80090f6:	bd90      	pop	{r4, r7, pc}

080090f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009100:	230f      	movs	r3, #15
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8009108:	e008      	b.n	800911c <USBD_GetLen+0x24>
  {
    len++;
 800910a:	210f      	movs	r1, #15
 800910c:	187b      	adds	r3, r7, r1
 800910e:	781a      	ldrb	r2, [r3, #0]
 8009110:	187b      	adds	r3, r7, r1
 8009112:	3201      	adds	r2, #1
 8009114:	701a      	strb	r2, [r3, #0]
    buf++;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3301      	adds	r3, #1
 800911a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f2      	bne.n	800910a <USBD_GetLen+0x12>
  }

  return len;
 8009124:	230f      	movs	r3, #15
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	781b      	ldrb	r3, [r3, #0]
}
 800912a:	0018      	movs	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	b004      	add	sp, #16
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	1dbb      	adds	r3, r7, #6
 800913e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	23a5      	movs	r3, #165	@ 0xa5
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	2102      	movs	r1, #2
 8009148:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800914a:	1dbb      	adds	r3, r7, #6
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009152:	1dbb      	adds	r3, r7, #6
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800915a:	1dbb      	adds	r3, r7, #6
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	2100      	movs	r1, #0
 8009164:	f000 fcea 	bl	8009b3c <USBD_LL_Transmit>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	0018      	movs	r0, r3
 800916c:	46bd      	mov	sp, r7
 800916e:	b004      	add	sp, #16
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	1dbb      	adds	r3, r7, #6
 800917e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009180:	1dbb      	adds	r3, r7, #6
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	2100      	movs	r1, #0
 800918a:	f000 fcd7 	bl	8009b3c <USBD_LL_Transmit>

  return USBD_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	0018      	movs	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	b004      	add	sp, #16
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	1dbb      	adds	r3, r7, #6
 80091a4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	23a5      	movs	r3, #165	@ 0xa5
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	2103      	movs	r1, #3
 80091ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80091b0:	1dbb      	adds	r3, r7, #6
 80091b2:	8819      	ldrh	r1, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	23ae      	movs	r3, #174	@ 0xae
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80091bc:	1dbb      	adds	r3, r7, #6
 80091be:	8819      	ldrh	r1, [r3, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	23b0      	movs	r3, #176	@ 0xb0
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091c8:	1dbb      	adds	r3, r7, #6
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	2100      	movs	r1, #0
 80091d2:	f000 fcea 	bl	8009baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	0018      	movs	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	b004      	add	sp, #16
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	1dbb      	adds	r3, r7, #6
 80091ec:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091ee:	1dbb      	adds	r3, r7, #6
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	2100      	movs	r1, #0
 80091f8:	f000 fcd7 	bl	8009baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	0018      	movs	r0, r3
 8009200:	46bd      	mov	sp, r7
 8009202:	b004      	add	sp, #16
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	23a5      	movs	r3, #165	@ 0xa5
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	2104      	movs	r1, #4
 8009216:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	2300      	movs	r3, #0
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	f000 fc8c 	bl	8009b3c <USBD_LL_Transmit>

  return USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	0018      	movs	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	b002      	add	sp, #8
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	23a5      	movs	r3, #165	@ 0xa5
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	2105      	movs	r1, #5
 800923e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	2300      	movs	r3, #0
 8009244:	2200      	movs	r2, #0
 8009246:	2100      	movs	r1, #0
 8009248:	f000 fcaf 	bl	8009baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	0018      	movs	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	b002      	add	sp, #8
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800925c:	4914      	ldr	r1, [pc, #80]	@ (80092b0 <MX_USB_DEVICE_Init+0x58>)
 800925e:	4b15      	ldr	r3, [pc, #84]	@ (80092b4 <MX_USB_DEVICE_Init+0x5c>)
 8009260:	2200      	movs	r2, #0
 8009262:	0018      	movs	r0, r3
 8009264:	f7fe fdec 	bl	8007e40 <USBD_Init>
 8009268:	1e03      	subs	r3, r0, #0
 800926a:	d001      	beq.n	8009270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800926c:	f7f8 f9a4 	bl	80015b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009270:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <MX_USB_DEVICE_Init+0x60>)
 8009272:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <MX_USB_DEVICE_Init+0x5c>)
 8009274:	0011      	movs	r1, r2
 8009276:	0018      	movs	r0, r3
 8009278:	f7fe fe13 	bl	8007ea2 <USBD_RegisterClass>
 800927c:	1e03      	subs	r3, r0, #0
 800927e:	d001      	beq.n	8009284 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009280:	f7f8 f99a 	bl	80015b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009284:	4a0d      	ldr	r2, [pc, #52]	@ (80092bc <MX_USB_DEVICE_Init+0x64>)
 8009286:	4b0b      	ldr	r3, [pc, #44]	@ (80092b4 <MX_USB_DEVICE_Init+0x5c>)
 8009288:	0011      	movs	r1, r2
 800928a:	0018      	movs	r0, r3
 800928c:	f7fe fd28 	bl	8007ce0 <USBD_CDC_RegisterInterface>
 8009290:	1e03      	subs	r3, r0, #0
 8009292:	d001      	beq.n	8009298 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009294:	f7f8 f990 	bl	80015b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <MX_USB_DEVICE_Init+0x5c>)
 800929a:	0018      	movs	r0, r3
 800929c:	f7fe fe21 	bl	8007ee2 <USBD_Start>
 80092a0:	1e03      	subs	r3, r0, #0
 80092a2:	d001      	beq.n	80092a8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80092a4:	f7f8 f988 	bl	80015b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092a8:	46c0      	nop			@ (mov r8, r8)
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	200001b4 	.word	0x200001b4
 80092b4:	20001ef4 	.word	0x20001ef4
 80092b8:	200000a0 	.word	0x200000a0
 80092bc:	200001a4 	.word	0x200001a4

080092c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092c4:	4907      	ldr	r1, [pc, #28]	@ (80092e4 <CDC_Init_FS+0x24>)
 80092c6:	4b08      	ldr	r3, [pc, #32]	@ (80092e8 <CDC_Init_FS+0x28>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	0018      	movs	r0, r3
 80092cc:	f7fe fd23 	bl	8007d16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092d0:	4a06      	ldr	r2, [pc, #24]	@ (80092ec <CDC_Init_FS+0x2c>)
 80092d2:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <CDC_Init_FS+0x28>)
 80092d4:	0011      	movs	r1, r2
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7fe fd39 	bl	8007d4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092dc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092de:	0018      	movs	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	200025b8 	.word	0x200025b8
 80092e8:	20001ef4 	.word	0x20001ef4
 80092ec:	200021b8 	.word	0x200021b8

080092f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6039      	str	r1, [r7, #0]
 8009304:	0011      	movs	r1, r2
 8009306:	1dfb      	adds	r3, r7, #7
 8009308:	1c02      	adds	r2, r0, #0
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	1c0a      	adds	r2, r1, #0
 8009310:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009312:	1dfb      	adds	r3, r7, #7
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b23      	cmp	r3, #35	@ 0x23
 8009318:	d804      	bhi.n	8009324 <CDC_Control_FS+0x28>
 800931a:	009a      	lsls	r2, r3, #2
 800931c:	4b04      	ldr	r3, [pc, #16]	@ (8009330 <CDC_Control_FS+0x34>)
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009324:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8009326:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009328:	0018      	movs	r0, r3
 800932a:	46bd      	mov	sp, r7
 800932c:	b002      	add	sp, #8
 800932e:	bd80      	pop	{r7, pc}
 8009330:	0800a79c 	.word	0x0800a79c

08009334 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4b0a      	ldr	r3, [pc, #40]	@ (800936c <CDC_Receive_FS+0x38>)
 8009342:	0011      	movs	r1, r2
 8009344:	0018      	movs	r0, r3
 8009346:	f7fe fd02 	bl	8007d4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800934a:	4b08      	ldr	r3, [pc, #32]	@ (800936c <CDC_Receive_FS+0x38>)
 800934c:	0018      	movs	r0, r3
 800934e:	f7fe fd49 	bl	8007de4 <USBD_CDC_ReceivePacket>

  USB_AddRxBuffer(&usb_msg, Buf, *Len);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4b05      	ldr	r3, [pc, #20]	@ (8009370 <CDC_Receive_FS+0x3c>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7f7 feb7 	bl	80010ce <USB_AddRxBuffer>

  return (USBD_OK);
 8009360:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b002      	add	sp, #8
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	20001ef4 	.word	0x20001ef4
 8009370:	2000004c 	.word	0x2000004c

08009374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	000a      	movs	r2, r1
 800937e:	1cbb      	adds	r3, r7, #2
 8009380:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009382:	230f      	movs	r3, #15
 8009384:	18fb      	adds	r3, r7, r3
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800938a:	4a11      	ldr	r2, [pc, #68]	@ (80093d0 <CDC_Transmit_FS+0x5c>)
 800938c:	23ae      	movs	r3, #174	@ 0xae
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	58d3      	ldr	r3, [r2, r3]
 8009392:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	2385      	movs	r3, #133	@ 0x85
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	58d3      	ldr	r3, [r2, r3]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e010      	b.n	80093c6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093a4:	1cbb      	adds	r3, r7, #2
 80093a6:	881a      	ldrh	r2, [r3, #0]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4b09      	ldr	r3, [pc, #36]	@ (80093d0 <CDC_Transmit_FS+0x5c>)
 80093ac:	0018      	movs	r0, r3
 80093ae:	f7fe fcb2 	bl	8007d16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093b2:	250f      	movs	r5, #15
 80093b4:	197c      	adds	r4, r7, r5
 80093b6:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <CDC_Transmit_FS+0x5c>)
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fe fcdc 	bl	8007d76 <USBD_CDC_TransmitPacket>
 80093be:	0003      	movs	r3, r0
 80093c0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80093c2:	197b      	adds	r3, r7, r5
 80093c4:	781b      	ldrb	r3, [r3, #0]
}
 80093c6:	0018      	movs	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	b004      	add	sp, #16
 80093cc:	bdb0      	pop	{r4, r5, r7, pc}
 80093ce:	46c0      	nop			@ (mov r8, r8)
 80093d0:	20001ef4 	.word	0x20001ef4

080093d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	0002      	movs	r2, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	1dfb      	adds	r3, r7, #7
 80093e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2212      	movs	r2, #18
 80093e6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093e8:	4b02      	ldr	r3, [pc, #8]	@ (80093f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093ea:	0018      	movs	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b002      	add	sp, #8
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	200001d0 	.word	0x200001d0

080093f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	0002      	movs	r2, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	1dfb      	adds	r3, r7, #7
 8009404:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2204      	movs	r2, #4
 800940a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800940c:	4b02      	ldr	r3, [pc, #8]	@ (8009418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800940e:	0018      	movs	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	b002      	add	sp, #8
 8009414:	bd80      	pop	{r7, pc}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	200001e4 	.word	0x200001e4

0800941c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	0002      	movs	r2, r0
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	1dfb      	adds	r3, r7, #7
 8009428:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800942a:	1dfb      	adds	r3, r7, #7
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d106      	bne.n	8009440 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4908      	ldr	r1, [pc, #32]	@ (8009458 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009436:	4b09      	ldr	r3, [pc, #36]	@ (800945c <USBD_FS_ProductStrDescriptor+0x40>)
 8009438:	0018      	movs	r0, r3
 800943a:	f7ff fe0f 	bl	800905c <USBD_GetString>
 800943e:	e005      	b.n	800944c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4905      	ldr	r1, [pc, #20]	@ (8009458 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009444:	4b05      	ldr	r3, [pc, #20]	@ (800945c <USBD_FS_ProductStrDescriptor+0x40>)
 8009446:	0018      	movs	r0, r3
 8009448:	f7ff fe08 	bl	800905c <USBD_GetString>
  }
  return USBD_StrDesc;
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b002      	add	sp, #8
 8009454:	bd80      	pop	{r7, pc}
 8009456:	46c0      	nop			@ (mov r8, r8)
 8009458:	200029b8 	.word	0x200029b8
 800945c:	0800a664 	.word	0x0800a664

08009460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	0002      	movs	r2, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	1dfb      	adds	r3, r7, #7
 800946c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4904      	ldr	r1, [pc, #16]	@ (8009484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009472:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009474:	0018      	movs	r0, r3
 8009476:	f7ff fdf1 	bl	800905c <USBD_GetString>
  return USBD_StrDesc;
 800947a:	4b02      	ldr	r3, [pc, #8]	@ (8009484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800947c:	0018      	movs	r0, r3
 800947e:	46bd      	mov	sp, r7
 8009480:	b002      	add	sp, #8
 8009482:	bd80      	pop	{r7, pc}
 8009484:	200029b8 	.word	0x200029b8
 8009488:	0800a67c 	.word	0x0800a67c

0800948c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	0002      	movs	r2, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	1dfb      	adds	r3, r7, #7
 8009498:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	221a      	movs	r2, #26
 800949e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094a0:	f000 f84c 	bl	800953c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094a4:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80094a6:	0018      	movs	r0, r3
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b002      	add	sp, #8
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	46c0      	nop			@ (mov r8, r8)
 80094b0:	200001e8 	.word	0x200001e8

080094b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	0002      	movs	r2, r0
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	1dfb      	adds	r3, r7, #7
 80094c0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80094c2:	1dfb      	adds	r3, r7, #7
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	4908      	ldr	r1, [pc, #32]	@ (80094f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80094ce:	4b09      	ldr	r3, [pc, #36]	@ (80094f4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7ff fdc3 	bl	800905c <USBD_GetString>
 80094d6:	e005      	b.n	80094e4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	4905      	ldr	r1, [pc, #20]	@ (80094f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80094dc:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80094de:	0018      	movs	r0, r3
 80094e0:	f7ff fdbc 	bl	800905c <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e4:	4b02      	ldr	r3, [pc, #8]	@ (80094f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80094e6:	0018      	movs	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	46c0      	nop			@ (mov r8, r8)
 80094f0:	200029b8 	.word	0x200029b8
 80094f4:	0800a690 	.word	0x0800a690

080094f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	0002      	movs	r2, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	1dfb      	adds	r3, r7, #7
 8009504:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009506:	1dfb      	adds	r3, r7, #7
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4908      	ldr	r1, [pc, #32]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009512:	4b09      	ldr	r3, [pc, #36]	@ (8009538 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009514:	0018      	movs	r0, r3
 8009516:	f7ff fda1 	bl	800905c <USBD_GetString>
 800951a:	e005      	b.n	8009528 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	4905      	ldr	r1, [pc, #20]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009520:	4b05      	ldr	r3, [pc, #20]	@ (8009538 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009522:	0018      	movs	r0, r3
 8009524:	f7ff fd9a 	bl	800905c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009528:	4b02      	ldr	r3, [pc, #8]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800952a:	0018      	movs	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	b002      	add	sp, #8
 8009530:	bd80      	pop	{r7, pc}
 8009532:	46c0      	nop			@ (mov r8, r8)
 8009534:	200029b8 	.word	0x200029b8
 8009538:	0800a69c 	.word	0x0800a69c

0800953c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009542:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <Get_SerialNum+0x48>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009548:	4b0f      	ldr	r3, [pc, #60]	@ (8009588 <Get_SerialNum+0x4c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800954e:	4b0f      	ldr	r3, [pc, #60]	@ (800958c <Get_SerialNum+0x50>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	18d3      	adds	r3, r2, r3
 800955a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009562:	490b      	ldr	r1, [pc, #44]	@ (8009590 <Get_SerialNum+0x54>)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2208      	movs	r2, #8
 8009568:	0018      	movs	r0, r3
 800956a:	f000 f815 	bl	8009598 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800956e:	4909      	ldr	r1, [pc, #36]	@ (8009594 <Get_SerialNum+0x58>)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2204      	movs	r2, #4
 8009574:	0018      	movs	r0, r3
 8009576:	f000 f80f 	bl	8009598 <IntToUnicode>
  }
}
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	46bd      	mov	sp, r7
 800957e:	b004      	add	sp, #16
 8009580:	bd80      	pop	{r7, pc}
 8009582:	46c0      	nop			@ (mov r8, r8)
 8009584:	1ffff7ac 	.word	0x1ffff7ac
 8009588:	1ffff7b0 	.word	0x1ffff7b0
 800958c:	1ffff7b4 	.word	0x1ffff7b4
 8009590:	200001ea 	.word	0x200001ea
 8009594:	200001fa 	.word	0x200001fa

08009598 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	1dfb      	adds	r3, r7, #7
 80095a4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80095a6:	2117      	movs	r1, #23
 80095a8:	187b      	adds	r3, r7, r1
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80095ae:	187b      	adds	r3, r7, r1
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	e02f      	b.n	8009616 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	0f1b      	lsrs	r3, r3, #28
 80095ba:	2b09      	cmp	r3, #9
 80095bc:	d80d      	bhi.n	80095da <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	0f1b      	lsrs	r3, r3, #28
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	2317      	movs	r3, #23
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	0019      	movs	r1, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	185b      	adds	r3, r3, r1
 80095d2:	3230      	adds	r2, #48	@ 0x30
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e00c      	b.n	80095f4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	0f1b      	lsrs	r3, r3, #28
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	2317      	movs	r3, #23
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	0019      	movs	r1, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	185b      	adds	r3, r3, r1
 80095ee:	3237      	adds	r2, #55	@ 0x37
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095fa:	2117      	movs	r1, #23
 80095fc:	187b      	adds	r3, r7, r1
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	3301      	adds	r3, #1
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	18d3      	adds	r3, r2, r3
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800960c:	187b      	adds	r3, r7, r1
 800960e:	781a      	ldrb	r2, [r3, #0]
 8009610:	187b      	adds	r3, r7, r1
 8009612:	3201      	adds	r2, #1
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	2317      	movs	r3, #23
 8009618:	18fa      	adds	r2, r7, r3
 800961a:	1dfb      	adds	r3, r7, #7
 800961c:	7812      	ldrb	r2, [r2, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d3c8      	bcc.n	80095b6 <IntToUnicode+0x1e>
  }
}
 8009624:	46c0      	nop			@ (mov r8, r8)
 8009626:	46c0      	nop			@ (mov r8, r8)
 8009628:	46bd      	mov	sp, r7
 800962a:	b006      	add	sp, #24
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a0e      	ldr	r2, [pc, #56]	@ (8009678 <HAL_PCD_MspInit+0x48>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d115      	bne.n	800966e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009642:	4b0e      	ldr	r3, [pc, #56]	@ (800967c <HAL_PCD_MspInit+0x4c>)
 8009644:	69da      	ldr	r2, [r3, #28]
 8009646:	4b0d      	ldr	r3, [pc, #52]	@ (800967c <HAL_PCD_MspInit+0x4c>)
 8009648:	2180      	movs	r1, #128	@ 0x80
 800964a:	0409      	lsls	r1, r1, #16
 800964c:	430a      	orrs	r2, r1
 800964e:	61da      	str	r2, [r3, #28]
 8009650:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <HAL_PCD_MspInit+0x4c>)
 8009652:	69da      	ldr	r2, [r3, #28]
 8009654:	2380      	movs	r3, #128	@ 0x80
 8009656:	041b      	lsls	r3, r3, #16
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800965e:	2200      	movs	r2, #0
 8009660:	2100      	movs	r1, #0
 8009662:	201f      	movs	r0, #31
 8009664:	f7f9 f8f8 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009668:	201f      	movs	r0, #31
 800966a:	f7f9 f90a 	bl	8002882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800966e:	46c0      	nop			@ (mov r8, r8)
 8009670:	46bd      	mov	sp, r7
 8009672:	b004      	add	sp, #16
 8009674:	bd80      	pop	{r7, pc}
 8009676:	46c0      	nop			@ (mov r8, r8)
 8009678:	40005c00 	.word	0x40005c00
 800967c:	40021000 	.word	0x40021000

08009680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	23b6      	movs	r3, #182	@ 0xb6
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	58d2      	ldr	r2, [r2, r3]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	21a6      	movs	r1, #166	@ 0xa6
 8009694:	0089      	lsls	r1, r1, #2
 8009696:	468c      	mov	ip, r1
 8009698:	4463      	add	r3, ip
 800969a:	0019      	movs	r1, r3
 800969c:	0010      	movs	r0, r2
 800969e:	f7fe fc73 	bl	8007f88 <USBD_LL_SetupStage>
}
 80096a2:	46c0      	nop			@ (mov r8, r8)
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b002      	add	sp, #8
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096aa:	b590      	push	{r4, r7, lr}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	000a      	movs	r2, r1
 80096b4:	1cfb      	adds	r3, r7, #3
 80096b6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	23b6      	movs	r3, #182	@ 0xb6
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	58d4      	ldr	r4, [r2, r3]
 80096c0:	1cfb      	adds	r3, r7, #3
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	23b2      	movs	r3, #178	@ 0xb2
 80096c8:	0059      	lsls	r1, r3, #1
 80096ca:	0013      	movs	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	18c3      	adds	r3, r0, r3
 80096d4:	185b      	adds	r3, r3, r1
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	1cfb      	adds	r3, r7, #3
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	0019      	movs	r1, r3
 80096de:	0020      	movs	r0, r4
 80096e0:	f7fe fcb0 	bl	8008044 <USBD_LL_DataOutStage>
}
 80096e4:	46c0      	nop			@ (mov r8, r8)
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b003      	add	sp, #12
 80096ea:	bd90      	pop	{r4, r7, pc}

080096ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	000a      	movs	r2, r1
 80096f6:	1cfb      	adds	r3, r7, #3
 80096f8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	23b6      	movs	r3, #182	@ 0xb6
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	58d0      	ldr	r0, [r2, r3]
 8009702:	1cfb      	adds	r3, r7, #3
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	0013      	movs	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	189b      	adds	r3, r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	18cb      	adds	r3, r1, r3
 8009712:	3324      	adds	r3, #36	@ 0x24
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	1cfb      	adds	r3, r7, #3
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	0019      	movs	r1, r3
 800971c:	f7fe fd14 	bl	8008148 <USBD_LL_DataInStage>
}
 8009720:	46c0      	nop			@ (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b002      	add	sp, #8
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	23b6      	movs	r3, #182	@ 0xb6
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	58d3      	ldr	r3, [r2, r3]
 8009738:	0018      	movs	r0, r3
 800973a:	f7fe fe4b 	bl	80083d4 <USBD_LL_SOF>
}
 800973e:	46c0      	nop			@ (mov r8, r8)
 8009740:	46bd      	mov	sp, r7
 8009742:	b002      	add	sp, #8
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800974e:	230f      	movs	r3, #15
 8009750:	18fb      	adds	r3, r7, r3
 8009752:	2201      	movs	r2, #1
 8009754:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	795b      	ldrb	r3, [r3, #5]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d001      	beq.n	8009762 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800975e:	f7f7 ff2b 	bl	80015b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	23b6      	movs	r3, #182	@ 0xb6
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	58d2      	ldr	r2, [r2, r3]
 800976a:	230f      	movs	r3, #15
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	0019      	movs	r1, r3
 8009772:	0010      	movs	r0, r2
 8009774:	f7fe fded 	bl	8008352 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	23b6      	movs	r3, #182	@ 0xb6
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	58d3      	ldr	r3, [r2, r3]
 8009780:	0018      	movs	r0, r3
 8009782:	f7fe fd9e 	bl	80082c2 <USBD_LL_Reset>
}
 8009786:	46c0      	nop			@ (mov r8, r8)
 8009788:	46bd      	mov	sp, r7
 800978a:	b004      	add	sp, #16
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	23b6      	movs	r3, #182	@ 0xb6
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	58d3      	ldr	r3, [r2, r3]
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7fe fde7 	bl	8008374 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097ae:	4b05      	ldr	r3, [pc, #20]	@ (80097c4 <HAL_PCD_SuspendCallback+0x34>)
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	4b04      	ldr	r3, [pc, #16]	@ (80097c4 <HAL_PCD_SuspendCallback+0x34>)
 80097b4:	2106      	movs	r1, #6
 80097b6:	430a      	orrs	r2, r1
 80097b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	46bd      	mov	sp, r7
 80097be:	b002      	add	sp, #8
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	e000ed00 	.word	0xe000ed00

080097c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	7a5b      	ldrb	r3, [r3, #9]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <HAL_PCD_ResumeCallback+0x38>)
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	4b08      	ldr	r3, [pc, #32]	@ (8009800 <HAL_PCD_ResumeCallback+0x38>)
 80097de:	2106      	movs	r1, #6
 80097e0:	438a      	bics	r2, r1
 80097e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80097e4:	f000 fa42 	bl	8009c6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	23b6      	movs	r3, #182	@ 0xb6
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	58d3      	ldr	r3, [r2, r3]
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7fe fdd7 	bl	80083a4 <USBD_LL_Resume>
}
 80097f6:	46c0      	nop			@ (mov r8, r8)
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b002      	add	sp, #8
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	46c0      	nop			@ (mov r8, r8)
 8009800:	e000ed00 	.word	0xe000ed00

08009804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800980c:	4a2d      	ldr	r2, [pc, #180]	@ (80098c4 <USBD_LL_Init+0xc0>)
 800980e:	23b6      	movs	r3, #182	@ 0xb6
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	23b0      	movs	r3, #176	@ 0xb0
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4929      	ldr	r1, [pc, #164]	@ (80098c4 <USBD_LL_Init+0xc0>)
 800981e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009820:	4b28      	ldr	r3, [pc, #160]	@ (80098c4 <USBD_LL_Init+0xc0>)
 8009822:	4a29      	ldr	r2, [pc, #164]	@ (80098c8 <USBD_LL_Init+0xc4>)
 8009824:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009826:	4b27      	ldr	r3, [pc, #156]	@ (80098c4 <USBD_LL_Init+0xc0>)
 8009828:	2208      	movs	r2, #8
 800982a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800982c:	4b25      	ldr	r3, [pc, #148]	@ (80098c4 <USBD_LL_Init+0xc0>)
 800982e:	2202      	movs	r2, #2
 8009830:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009832:	4b24      	ldr	r3, [pc, #144]	@ (80098c4 <USBD_LL_Init+0xc0>)
 8009834:	2202      	movs	r2, #2
 8009836:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009838:	4b22      	ldr	r3, [pc, #136]	@ (80098c4 <USBD_LL_Init+0xc0>)
 800983a:	2200      	movs	r2, #0
 800983c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800983e:	4b21      	ldr	r3, [pc, #132]	@ (80098c4 <USBD_LL_Init+0xc0>)
 8009840:	2200      	movs	r2, #0
 8009842:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009844:	4b1f      	ldr	r3, [pc, #124]	@ (80098c4 <USBD_LL_Init+0xc0>)
 8009846:	2200      	movs	r2, #0
 8009848:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800984a:	4b1e      	ldr	r3, [pc, #120]	@ (80098c4 <USBD_LL_Init+0xc0>)
 800984c:	0018      	movs	r0, r3
 800984e:	f7f9 facd 	bl	8002dec <HAL_PCD_Init>
 8009852:	1e03      	subs	r3, r0, #0
 8009854:	d001      	beq.n	800985a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009856:	f7f7 feaf 	bl	80015b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	23b0      	movs	r3, #176	@ 0xb0
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	58d0      	ldr	r0, [r2, r3]
 8009862:	2318      	movs	r3, #24
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	f7fb f87e 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	23b0      	movs	r3, #176	@ 0xb0
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	58d0      	ldr	r0, [r2, r3]
 8009874:	2358      	movs	r3, #88	@ 0x58
 8009876:	2200      	movs	r2, #0
 8009878:	2180      	movs	r1, #128	@ 0x80
 800987a:	f7fb f875 	bl	8004968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	23b0      	movs	r3, #176	@ 0xb0
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	58d0      	ldr	r0, [r2, r3]
 8009886:	23c0      	movs	r3, #192	@ 0xc0
 8009888:	2200      	movs	r2, #0
 800988a:	2181      	movs	r1, #129	@ 0x81
 800988c:	f7fb f86c 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	23b0      	movs	r3, #176	@ 0xb0
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	58d0      	ldr	r0, [r2, r3]
 8009898:	2388      	movs	r3, #136	@ 0x88
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	2200      	movs	r2, #0
 800989e:	2101      	movs	r1, #1
 80098a0:	f7fb f862 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	23b0      	movs	r3, #176	@ 0xb0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	58d0      	ldr	r0, [r2, r3]
 80098ac:	2380      	movs	r3, #128	@ 0x80
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	2200      	movs	r2, #0
 80098b2:	2182      	movs	r1, #130	@ 0x82
 80098b4:	f7fb f858 	bl	8004968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	0018      	movs	r0, r3
 80098bc:	46bd      	mov	sp, r7
 80098be:	b002      	add	sp, #8
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	46c0      	nop			@ (mov r8, r8)
 80098c4:	20002bb8 	.word	0x20002bb8
 80098c8:	40005c00 	.word	0x40005c00

080098cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	210f      	movs	r1, #15
 80098d6:	187b      	adds	r3, r7, r1
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098dc:	260e      	movs	r6, #14
 80098de:	19bb      	adds	r3, r7, r6
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	23b0      	movs	r3, #176	@ 0xb0
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	58d3      	ldr	r3, [r2, r3]
 80098ec:	000d      	movs	r5, r1
 80098ee:	187c      	adds	r4, r7, r1
 80098f0:	0018      	movs	r0, r3
 80098f2:	f7f9 fb6f 	bl	8002fd4 <HAL_PCD_Start>
 80098f6:	0003      	movs	r3, r0
 80098f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fa:	19bc      	adds	r4, r7, r6
 80098fc:	197b      	adds	r3, r7, r5
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	0018      	movs	r0, r3
 8009902:	f000 f9ba 	bl	8009c7a <USBD_Get_USB_Status>
 8009906:	0003      	movs	r3, r0
 8009908:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800990a:	19bb      	adds	r3, r7, r6
 800990c:	781b      	ldrb	r3, [r3, #0]
}
 800990e:	0018      	movs	r0, r3
 8009910:	46bd      	mov	sp, r7
 8009912:	b005      	add	sp, #20
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	000c      	movs	r4, r1
 8009920:	0010      	movs	r0, r2
 8009922:	0019      	movs	r1, r3
 8009924:	1cfb      	adds	r3, r7, #3
 8009926:	1c22      	adds	r2, r4, #0
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	1cbb      	adds	r3, r7, #2
 800992c:	1c02      	adds	r2, r0, #0
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	003b      	movs	r3, r7
 8009932:	1c0a      	adds	r2, r1, #0
 8009934:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009936:	260f      	movs	r6, #15
 8009938:	19bb      	adds	r3, r7, r6
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993e:	250e      	movs	r5, #14
 8009940:	197b      	adds	r3, r7, r5
 8009942:	2200      	movs	r2, #0
 8009944:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	23b0      	movs	r3, #176	@ 0xb0
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	58d0      	ldr	r0, [r2, r3]
 800994e:	19bc      	adds	r4, r7, r6
 8009950:	1cbb      	adds	r3, r7, #2
 8009952:	781d      	ldrb	r5, [r3, #0]
 8009954:	003b      	movs	r3, r7
 8009956:	881a      	ldrh	r2, [r3, #0]
 8009958:	1cfb      	adds	r3, r7, #3
 800995a:	7819      	ldrb	r1, [r3, #0]
 800995c:	002b      	movs	r3, r5
 800995e:	f7f9 fccd 	bl	80032fc <HAL_PCD_EP_Open>
 8009962:	0003      	movs	r3, r0
 8009964:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009966:	250e      	movs	r5, #14
 8009968:	197c      	adds	r4, r7, r5
 800996a:	19bb      	adds	r3, r7, r6
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	0018      	movs	r0, r3
 8009970:	f000 f983 	bl	8009c7a <USBD_Get_USB_Status>
 8009974:	0003      	movs	r3, r0
 8009976:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009978:	197b      	adds	r3, r7, r5
 800997a:	781b      	ldrb	r3, [r3, #0]
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b005      	add	sp, #20
 8009982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009984 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	000a      	movs	r2, r1
 800998e:	1cfb      	adds	r3, r7, #3
 8009990:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	210f      	movs	r1, #15
 8009994:	187b      	adds	r3, r7, r1
 8009996:	2200      	movs	r2, #0
 8009998:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	260e      	movs	r6, #14
 800999c:	19bb      	adds	r3, r7, r6
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	23b0      	movs	r3, #176	@ 0xb0
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	58d2      	ldr	r2, [r2, r3]
 80099aa:	000d      	movs	r5, r1
 80099ac:	187c      	adds	r4, r7, r1
 80099ae:	1cfb      	adds	r3, r7, #3
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	0019      	movs	r1, r3
 80099b4:	0010      	movs	r0, r2
 80099b6:	f7f9 fd10 	bl	80033da <HAL_PCD_EP_Close>
 80099ba:	0003      	movs	r3, r0
 80099bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099be:	19bc      	adds	r4, r7, r6
 80099c0:	197b      	adds	r3, r7, r5
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	0018      	movs	r0, r3
 80099c6:	f000 f958 	bl	8009c7a <USBD_Get_USB_Status>
 80099ca:	0003      	movs	r3, r0
 80099cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80099ce:	19bb      	adds	r3, r7, r6
 80099d0:	781b      	ldrb	r3, [r3, #0]
}
 80099d2:	0018      	movs	r0, r3
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b005      	add	sp, #20
 80099d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	000a      	movs	r2, r1
 80099e4:	1cfb      	adds	r3, r7, #3
 80099e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e8:	210f      	movs	r1, #15
 80099ea:	187b      	adds	r3, r7, r1
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f0:	260e      	movs	r6, #14
 80099f2:	19bb      	adds	r3, r7, r6
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	23b0      	movs	r3, #176	@ 0xb0
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	58d2      	ldr	r2, [r2, r3]
 8009a00:	000d      	movs	r5, r1
 8009a02:	187c      	adds	r4, r7, r1
 8009a04:	1cfb      	adds	r3, r7, #3
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	0019      	movs	r1, r3
 8009a0a:	0010      	movs	r0, r2
 8009a0c:	f7f9 fdc2 	bl	8003594 <HAL_PCD_EP_SetStall>
 8009a10:	0003      	movs	r3, r0
 8009a12:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a14:	19bc      	adds	r4, r7, r6
 8009a16:	197b      	adds	r3, r7, r5
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f000 f92d 	bl	8009c7a <USBD_Get_USB_Status>
 8009a20:	0003      	movs	r3, r0
 8009a22:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a24:	19bb      	adds	r3, r7, r6
 8009a26:	781b      	ldrb	r3, [r3, #0]
}
 8009a28:	0018      	movs	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b005      	add	sp, #20
 8009a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	000a      	movs	r2, r1
 8009a3a:	1cfb      	adds	r3, r7, #3
 8009a3c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3e:	210f      	movs	r1, #15
 8009a40:	187b      	adds	r3, r7, r1
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	260e      	movs	r6, #14
 8009a48:	19bb      	adds	r3, r7, r6
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	23b0      	movs	r3, #176	@ 0xb0
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	58d2      	ldr	r2, [r2, r3]
 8009a56:	000d      	movs	r5, r1
 8009a58:	187c      	adds	r4, r7, r1
 8009a5a:	1cfb      	adds	r3, r7, #3
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	0019      	movs	r1, r3
 8009a60:	0010      	movs	r0, r2
 8009a62:	f7f9 fdf3 	bl	800364c <HAL_PCD_EP_ClrStall>
 8009a66:	0003      	movs	r3, r0
 8009a68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6a:	19bc      	adds	r4, r7, r6
 8009a6c:	197b      	adds	r3, r7, r5
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	0018      	movs	r0, r3
 8009a72:	f000 f902 	bl	8009c7a <USBD_Get_USB_Status>
 8009a76:	0003      	movs	r3, r0
 8009a78:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a7a:	19bb      	adds	r3, r7, r6
 8009a7c:	781b      	ldrb	r3, [r3, #0]
}
 8009a7e:	0018      	movs	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	b005      	add	sp, #20
 8009a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a86 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	000a      	movs	r2, r1
 8009a90:	1cfb      	adds	r3, r7, #3
 8009a92:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	23b0      	movs	r3, #176	@ 0xb0
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	58d3      	ldr	r3, [r2, r3]
 8009a9c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a9e:	1cfb      	adds	r3, r7, #3
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b25b      	sxtb	r3, r3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	da0c      	bge.n	8009ac2 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009aa8:	1cfb      	adds	r3, r7, #3
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	227f      	movs	r2, #127	@ 0x7f
 8009aae:	401a      	ands	r2, r3
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	0013      	movs	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	189b      	adds	r3, r3, r2
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	18cb      	adds	r3, r1, r3
 8009abc:	3312      	adds	r3, #18
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	e00d      	b.n	8009ade <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ac2:	1cfb      	adds	r3, r7, #3
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	227f      	movs	r2, #127	@ 0x7f
 8009ac8:	401a      	ands	r2, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	23a9      	movs	r3, #169	@ 0xa9
 8009ace:	0059      	lsls	r1, r3, #1
 8009ad0:	0013      	movs	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	18c3      	adds	r3, r0, r3
 8009ada:	185b      	adds	r3, r3, r1
 8009adc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ade:	0018      	movs	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b004      	add	sp, #16
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	000a      	movs	r2, r1
 8009af0:	1cfb      	adds	r3, r7, #3
 8009af2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af4:	210f      	movs	r1, #15
 8009af6:	187b      	adds	r3, r7, r1
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	260e      	movs	r6, #14
 8009afe:	19bb      	adds	r3, r7, r6
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	23b0      	movs	r3, #176	@ 0xb0
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	58d2      	ldr	r2, [r2, r3]
 8009b0c:	000d      	movs	r5, r1
 8009b0e:	187c      	adds	r4, r7, r1
 8009b10:	1cfb      	adds	r3, r7, #3
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	0019      	movs	r1, r3
 8009b16:	0010      	movs	r0, r2
 8009b18:	f7f9 fbc6 	bl	80032a8 <HAL_PCD_SetAddress>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b20:	19bc      	adds	r4, r7, r6
 8009b22:	197b      	adds	r3, r7, r5
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	0018      	movs	r0, r3
 8009b28:	f000 f8a7 	bl	8009c7a <USBD_Get_USB_Status>
 8009b2c:	0003      	movs	r3, r0
 8009b2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b30:	19bb      	adds	r3, r7, r6
 8009b32:	781b      	ldrb	r3, [r3, #0]
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b005      	add	sp, #20
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	0008      	movs	r0, r1
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	0019      	movs	r1, r3
 8009b4a:	230b      	movs	r3, #11
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	1c02      	adds	r2, r0, #0
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	2408      	movs	r4, #8
 8009b54:	193b      	adds	r3, r7, r4
 8009b56:	1c0a      	adds	r2, r1, #0
 8009b58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5a:	2117      	movs	r1, #23
 8009b5c:	187b      	adds	r3, r7, r1
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b62:	2516      	movs	r5, #22
 8009b64:	197b      	adds	r3, r7, r5
 8009b66:	2200      	movs	r2, #0
 8009b68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	23b0      	movs	r3, #176	@ 0xb0
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	58d0      	ldr	r0, [r2, r3]
 8009b72:	193b      	adds	r3, r7, r4
 8009b74:	881d      	ldrh	r5, [r3, #0]
 8009b76:	000e      	movs	r6, r1
 8009b78:	187c      	adds	r4, r7, r1
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	230b      	movs	r3, #11
 8009b7e:	18fb      	adds	r3, r7, r3
 8009b80:	7819      	ldrb	r1, [r3, #0]
 8009b82:	002b      	movs	r3, r5
 8009b84:	f7f9 fcca 	bl	800351c <HAL_PCD_EP_Transmit>
 8009b88:	0003      	movs	r3, r0
 8009b8a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8c:	2516      	movs	r5, #22
 8009b8e:	197c      	adds	r4, r7, r5
 8009b90:	19bb      	adds	r3, r7, r6
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f000 f870 	bl	8009c7a <USBD_Get_USB_Status>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b9e:	197b      	adds	r3, r7, r5
 8009ba0:	781b      	ldrb	r3, [r3, #0]
}
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	b007      	add	sp, #28
 8009ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009baa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bac:	b087      	sub	sp, #28
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	0008      	movs	r0, r1
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	230b      	movs	r3, #11
 8009bba:	18fb      	adds	r3, r7, r3
 8009bbc:	1c02      	adds	r2, r0, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
 8009bc0:	2408      	movs	r4, #8
 8009bc2:	193b      	adds	r3, r7, r4
 8009bc4:	1c0a      	adds	r2, r1, #0
 8009bc6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc8:	2117      	movs	r1, #23
 8009bca:	187b      	adds	r3, r7, r1
 8009bcc:	2200      	movs	r2, #0
 8009bce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd0:	2516      	movs	r5, #22
 8009bd2:	197b      	adds	r3, r7, r5
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	23b0      	movs	r3, #176	@ 0xb0
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	58d0      	ldr	r0, [r2, r3]
 8009be0:	193b      	adds	r3, r7, r4
 8009be2:	881d      	ldrh	r5, [r3, #0]
 8009be4:	000e      	movs	r6, r1
 8009be6:	187c      	adds	r4, r7, r1
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	230b      	movs	r3, #11
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	7819      	ldrb	r1, [r3, #0]
 8009bf0:	002b      	movs	r3, r5
 8009bf2:	f7f9 fc43 	bl	800347c <HAL_PCD_EP_Receive>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfa:	2516      	movs	r5, #22
 8009bfc:	197c      	adds	r4, r7, r5
 8009bfe:	19bb      	adds	r3, r7, r6
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	0018      	movs	r0, r3
 8009c04:	f000 f839 	bl	8009c7a <USBD_Get_USB_Status>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009c0c:	197b      	adds	r3, r7, r5
 8009c0e:	781b      	ldrb	r3, [r3, #0]
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b007      	add	sp, #28
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	000a      	movs	r2, r1
 8009c22:	1cfb      	adds	r3, r7, #3
 8009c24:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	23b0      	movs	r3, #176	@ 0xb0
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	58d2      	ldr	r2, [r2, r3]
 8009c2e:	1cfb      	adds	r3, r7, #3
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	0019      	movs	r1, r3
 8009c34:	0010      	movs	r0, r2
 8009c36:	f7f9 fc58 	bl	80034ea <HAL_PCD_EP_GetRxCount>
 8009c3a:	0003      	movs	r3, r0
}
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b002      	add	sp, #8
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c4c:	4b02      	ldr	r3, [pc, #8]	@ (8009c58 <USBD_static_malloc+0x14>)
}
 8009c4e:	0018      	movs	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	b002      	add	sp, #8
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	46c0      	nop			@ (mov r8, r8)
 8009c58:	20002e94 	.word	0x20002e94

08009c5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]

}
 8009c64:	46c0      	nop			@ (mov r8, r8)
 8009c66:	46bd      	mov	sp, r7
 8009c68:	b002      	add	sp, #8
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c70:	f7f7 fba1 	bl	80013b6 <SystemClock_Config>
}
 8009c74:	46c0      	nop			@ (mov r8, r8)
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	0002      	movs	r2, r0
 8009c82:	1dfb      	adds	r3, r7, #7
 8009c84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c86:	230f      	movs	r3, #15
 8009c88:	18fb      	adds	r3, r7, r3
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009c8e:	1dfb      	adds	r3, r7, #7
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d017      	beq.n	8009cc6 <USBD_Get_USB_Status+0x4c>
 8009c96:	dc1b      	bgt.n	8009cd0 <USBD_Get_USB_Status+0x56>
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d00f      	beq.n	8009cbc <USBD_Get_USB_Status+0x42>
 8009c9c:	dc18      	bgt.n	8009cd0 <USBD_Get_USB_Status+0x56>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <USBD_Get_USB_Status+0x2e>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d005      	beq.n	8009cb2 <USBD_Get_USB_Status+0x38>
 8009ca6:	e013      	b.n	8009cd0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca8:	230f      	movs	r3, #15
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
    break;
 8009cb0:	e013      	b.n	8009cda <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cb2:	230f      	movs	r3, #15
 8009cb4:	18fb      	adds	r3, r7, r3
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	701a      	strb	r2, [r3, #0]
    break;
 8009cba:	e00e      	b.n	8009cda <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cbc:	230f      	movs	r3, #15
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	701a      	strb	r2, [r3, #0]
    break;
 8009cc4:	e009      	b.n	8009cda <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cc6:	230f      	movs	r3, #15
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	2202      	movs	r2, #2
 8009ccc:	701a      	strb	r2, [r3, #0]
    break;
 8009cce:	e004      	b.n	8009cda <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009cd0:	230f      	movs	r3, #15
 8009cd2:	18fb      	adds	r3, r7, r3
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	701a      	strb	r2, [r3, #0]
    break;
 8009cd8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8009cda:	230f      	movs	r3, #15
 8009cdc:	18fb      	adds	r3, r7, r3
 8009cde:	781b      	ldrb	r3, [r3, #0]
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b004      	add	sp, #16
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <siprintf>:
 8009ce8:	b40e      	push	{r1, r2, r3}
 8009cea:	b510      	push	{r4, lr}
 8009cec:	2400      	movs	r4, #0
 8009cee:	490c      	ldr	r1, [pc, #48]	@ (8009d20 <siprintf+0x38>)
 8009cf0:	b09d      	sub	sp, #116	@ 0x74
 8009cf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009cf4:	9002      	str	r0, [sp, #8]
 8009cf6:	9006      	str	r0, [sp, #24]
 8009cf8:	9107      	str	r1, [sp, #28]
 8009cfa:	9104      	str	r1, [sp, #16]
 8009cfc:	4809      	ldr	r0, [pc, #36]	@ (8009d24 <siprintf+0x3c>)
 8009cfe:	490a      	ldr	r1, [pc, #40]	@ (8009d28 <siprintf+0x40>)
 8009d00:	cb04      	ldmia	r3!, {r2}
 8009d02:	9105      	str	r1, [sp, #20]
 8009d04:	6800      	ldr	r0, [r0, #0]
 8009d06:	a902      	add	r1, sp, #8
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009d0c:	f000 f9a8 	bl	800a060 <_svfiprintf_r>
 8009d10:	9b02      	ldr	r3, [sp, #8]
 8009d12:	701c      	strb	r4, [r3, #0]
 8009d14:	b01d      	add	sp, #116	@ 0x74
 8009d16:	bc10      	pop	{r4}
 8009d18:	bc08      	pop	{r3}
 8009d1a:	b003      	add	sp, #12
 8009d1c:	4718      	bx	r3
 8009d1e:	46c0      	nop			@ (mov r8, r8)
 8009d20:	7fffffff 	.word	0x7fffffff
 8009d24:	20000204 	.word	0x20000204
 8009d28:	ffff0208 	.word	0xffff0208

08009d2c <memset>:
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	1882      	adds	r2, r0, r2
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d100      	bne.n	8009d36 <memset+0xa>
 8009d34:	4770      	bx	lr
 8009d36:	7019      	strb	r1, [r3, #0]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	e7f9      	b.n	8009d30 <memset+0x4>

08009d3c <__errno>:
 8009d3c:	4b01      	ldr	r3, [pc, #4]	@ (8009d44 <__errno+0x8>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	4770      	bx	lr
 8009d42:	46c0      	nop			@ (mov r8, r8)
 8009d44:	20000204 	.word	0x20000204

08009d48 <__libc_init_array>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	4c0c      	ldr	r4, [pc, #48]	@ (8009d80 <__libc_init_array+0x38>)
 8009d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009d84 <__libc_init_array+0x3c>)
 8009d50:	1b64      	subs	r4, r4, r5
 8009d52:	10a4      	asrs	r4, r4, #2
 8009d54:	42a6      	cmp	r6, r4
 8009d56:	d109      	bne.n	8009d6c <__libc_init_array+0x24>
 8009d58:	2600      	movs	r6, #0
 8009d5a:	f000 fc63 	bl	800a624 <_init>
 8009d5e:	4c0a      	ldr	r4, [pc, #40]	@ (8009d88 <__libc_init_array+0x40>)
 8009d60:	4d0a      	ldr	r5, [pc, #40]	@ (8009d8c <__libc_init_array+0x44>)
 8009d62:	1b64      	subs	r4, r4, r5
 8009d64:	10a4      	asrs	r4, r4, #2
 8009d66:	42a6      	cmp	r6, r4
 8009d68:	d105      	bne.n	8009d76 <__libc_init_array+0x2e>
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	00b3      	lsls	r3, r6, #2
 8009d6e:	58eb      	ldr	r3, [r5, r3]
 8009d70:	4798      	blx	r3
 8009d72:	3601      	adds	r6, #1
 8009d74:	e7ee      	b.n	8009d54 <__libc_init_array+0xc>
 8009d76:	00b3      	lsls	r3, r6, #2
 8009d78:	58eb      	ldr	r3, [r5, r3]
 8009d7a:	4798      	blx	r3
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	e7f2      	b.n	8009d66 <__libc_init_array+0x1e>
 8009d80:	0800a860 	.word	0x0800a860
 8009d84:	0800a860 	.word	0x0800a860
 8009d88:	0800a864 	.word	0x0800a864
 8009d8c:	0800a860 	.word	0x0800a860

08009d90 <__retarget_lock_acquire_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <__retarget_lock_release_recursive>:
 8009d92:	4770      	bx	lr

08009d94 <memcpy>:
 8009d94:	2300      	movs	r3, #0
 8009d96:	b510      	push	{r4, lr}
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d100      	bne.n	8009d9e <memcpy+0xa>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	5ccc      	ldrb	r4, [r1, r3]
 8009da0:	54c4      	strb	r4, [r0, r3]
 8009da2:	3301      	adds	r3, #1
 8009da4:	e7f8      	b.n	8009d98 <memcpy+0x4>
	...

08009da8 <_free_r>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	0005      	movs	r5, r0
 8009dac:	1e0c      	subs	r4, r1, #0
 8009dae:	d010      	beq.n	8009dd2 <_free_r+0x2a>
 8009db0:	3c04      	subs	r4, #4
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da00      	bge.n	8009dba <_free_r+0x12>
 8009db8:	18e4      	adds	r4, r4, r3
 8009dba:	0028      	movs	r0, r5
 8009dbc:	f000 f8e0 	bl	8009f80 <__malloc_lock>
 8009dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e38 <_free_r+0x90>)
 8009dc2:	6813      	ldr	r3, [r2, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <_free_r+0x2c>
 8009dc8:	6063      	str	r3, [r4, #4]
 8009dca:	6014      	str	r4, [r2, #0]
 8009dcc:	0028      	movs	r0, r5
 8009dce:	f000 f8df 	bl	8009f90 <__malloc_unlock>
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	42a3      	cmp	r3, r4
 8009dd6:	d908      	bls.n	8009dea <_free_r+0x42>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	1821      	adds	r1, r4, r0
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	d1f3      	bne.n	8009dc8 <_free_r+0x20>
 8009de0:	6819      	ldr	r1, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	1809      	adds	r1, r1, r0
 8009de6:	6021      	str	r1, [r4, #0]
 8009de8:	e7ee      	b.n	8009dc8 <_free_r+0x20>
 8009dea:	001a      	movs	r2, r3
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <_free_r+0x4e>
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	d9f9      	bls.n	8009dea <_free_r+0x42>
 8009df6:	6811      	ldr	r1, [r2, #0]
 8009df8:	1850      	adds	r0, r2, r1
 8009dfa:	42a0      	cmp	r0, r4
 8009dfc:	d10b      	bne.n	8009e16 <_free_r+0x6e>
 8009dfe:	6820      	ldr	r0, [r4, #0]
 8009e00:	1809      	adds	r1, r1, r0
 8009e02:	1850      	adds	r0, r2, r1
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	4283      	cmp	r3, r0
 8009e08:	d1e0      	bne.n	8009dcc <_free_r+0x24>
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	1841      	adds	r1, r0, r1
 8009e10:	6011      	str	r1, [r2, #0]
 8009e12:	6053      	str	r3, [r2, #4]
 8009e14:	e7da      	b.n	8009dcc <_free_r+0x24>
 8009e16:	42a0      	cmp	r0, r4
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x78>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	e7d5      	b.n	8009dcc <_free_r+0x24>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	1821      	adds	r1, r4, r0
 8009e24:	428b      	cmp	r3, r1
 8009e26:	d103      	bne.n	8009e30 <_free_r+0x88>
 8009e28:	6819      	ldr	r1, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	1809      	adds	r1, r1, r0
 8009e2e:	6021      	str	r1, [r4, #0]
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	6054      	str	r4, [r2, #4]
 8009e34:	e7ca      	b.n	8009dcc <_free_r+0x24>
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	200031f8 	.word	0x200031f8

08009e3c <sbrk_aligned>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009e7c <sbrk_aligned+0x40>)
 8009e40:	000d      	movs	r5, r1
 8009e42:	6831      	ldr	r1, [r6, #0]
 8009e44:	0004      	movs	r4, r0
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d102      	bne.n	8009e50 <sbrk_aligned+0x14>
 8009e4a:	f000 fb95 	bl	800a578 <_sbrk_r>
 8009e4e:	6030      	str	r0, [r6, #0]
 8009e50:	0029      	movs	r1, r5
 8009e52:	0020      	movs	r0, r4
 8009e54:	f000 fb90 	bl	800a578 <_sbrk_r>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d103      	bne.n	8009e64 <sbrk_aligned+0x28>
 8009e5c:	2501      	movs	r5, #1
 8009e5e:	426d      	negs	r5, r5
 8009e60:	0028      	movs	r0, r5
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	2303      	movs	r3, #3
 8009e66:	1cc5      	adds	r5, r0, #3
 8009e68:	439d      	bics	r5, r3
 8009e6a:	42a8      	cmp	r0, r5
 8009e6c:	d0f8      	beq.n	8009e60 <sbrk_aligned+0x24>
 8009e6e:	1a29      	subs	r1, r5, r0
 8009e70:	0020      	movs	r0, r4
 8009e72:	f000 fb81 	bl	800a578 <_sbrk_r>
 8009e76:	3001      	adds	r0, #1
 8009e78:	d1f2      	bne.n	8009e60 <sbrk_aligned+0x24>
 8009e7a:	e7ef      	b.n	8009e5c <sbrk_aligned+0x20>
 8009e7c:	200031f4 	.word	0x200031f4

08009e80 <_malloc_r>:
 8009e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e82:	2203      	movs	r2, #3
 8009e84:	1ccb      	adds	r3, r1, #3
 8009e86:	4393      	bics	r3, r2
 8009e88:	3308      	adds	r3, #8
 8009e8a:	0005      	movs	r5, r0
 8009e8c:	001f      	movs	r7, r3
 8009e8e:	2b0c      	cmp	r3, #12
 8009e90:	d234      	bcs.n	8009efc <_malloc_r+0x7c>
 8009e92:	270c      	movs	r7, #12
 8009e94:	42b9      	cmp	r1, r7
 8009e96:	d833      	bhi.n	8009f00 <_malloc_r+0x80>
 8009e98:	0028      	movs	r0, r5
 8009e9a:	f000 f871 	bl	8009f80 <__malloc_lock>
 8009e9e:	4e37      	ldr	r6, [pc, #220]	@ (8009f7c <_malloc_r+0xfc>)
 8009ea0:	6833      	ldr	r3, [r6, #0]
 8009ea2:	001c      	movs	r4, r3
 8009ea4:	2c00      	cmp	r4, #0
 8009ea6:	d12f      	bne.n	8009f08 <_malloc_r+0x88>
 8009ea8:	0039      	movs	r1, r7
 8009eaa:	0028      	movs	r0, r5
 8009eac:	f7ff ffc6 	bl	8009e3c <sbrk_aligned>
 8009eb0:	0004      	movs	r4, r0
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d15f      	bne.n	8009f76 <_malloc_r+0xf6>
 8009eb6:	6834      	ldr	r4, [r6, #0]
 8009eb8:	9400      	str	r4, [sp, #0]
 8009eba:	9b00      	ldr	r3, [sp, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d14a      	bne.n	8009f56 <_malloc_r+0xd6>
 8009ec0:	2c00      	cmp	r4, #0
 8009ec2:	d052      	beq.n	8009f6a <_malloc_r+0xea>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	0028      	movs	r0, r5
 8009ec8:	18e3      	adds	r3, r4, r3
 8009eca:	9900      	ldr	r1, [sp, #0]
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f000 fb53 	bl	800a578 <_sbrk_r>
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	4283      	cmp	r3, r0
 8009ed6:	d148      	bne.n	8009f6a <_malloc_r+0xea>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	0028      	movs	r0, r5
 8009edc:	1aff      	subs	r7, r7, r3
 8009ede:	0039      	movs	r1, r7
 8009ee0:	f7ff ffac 	bl	8009e3c <sbrk_aligned>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d040      	beq.n	8009f6a <_malloc_r+0xea>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	19db      	adds	r3, r3, r7
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	6833      	ldr	r3, [r6, #0]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	d133      	bne.n	8009f5e <_malloc_r+0xde>
 8009ef6:	9b00      	ldr	r3, [sp, #0]
 8009ef8:	6033      	str	r3, [r6, #0]
 8009efa:	e019      	b.n	8009f30 <_malloc_r+0xb0>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dac9      	bge.n	8009e94 <_malloc_r+0x14>
 8009f00:	230c      	movs	r3, #12
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	2000      	movs	r0, #0
 8009f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f08:	6821      	ldr	r1, [r4, #0]
 8009f0a:	1bc9      	subs	r1, r1, r7
 8009f0c:	d420      	bmi.n	8009f50 <_malloc_r+0xd0>
 8009f0e:	290b      	cmp	r1, #11
 8009f10:	d90a      	bls.n	8009f28 <_malloc_r+0xa8>
 8009f12:	19e2      	adds	r2, r4, r7
 8009f14:	6027      	str	r7, [r4, #0]
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	d104      	bne.n	8009f24 <_malloc_r+0xa4>
 8009f1a:	6032      	str	r2, [r6, #0]
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	6011      	str	r1, [r2, #0]
 8009f20:	6053      	str	r3, [r2, #4]
 8009f22:	e005      	b.n	8009f30 <_malloc_r+0xb0>
 8009f24:	605a      	str	r2, [r3, #4]
 8009f26:	e7f9      	b.n	8009f1c <_malloc_r+0x9c>
 8009f28:	6862      	ldr	r2, [r4, #4]
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	d10e      	bne.n	8009f4c <_malloc_r+0xcc>
 8009f2e:	6032      	str	r2, [r6, #0]
 8009f30:	0028      	movs	r0, r5
 8009f32:	f000 f82d 	bl	8009f90 <__malloc_unlock>
 8009f36:	0020      	movs	r0, r4
 8009f38:	2207      	movs	r2, #7
 8009f3a:	300b      	adds	r0, #11
 8009f3c:	1d23      	adds	r3, r4, #4
 8009f3e:	4390      	bics	r0, r2
 8009f40:	1ac2      	subs	r2, r0, r3
 8009f42:	4298      	cmp	r0, r3
 8009f44:	d0df      	beq.n	8009f06 <_malloc_r+0x86>
 8009f46:	1a1b      	subs	r3, r3, r0
 8009f48:	50a3      	str	r3, [r4, r2]
 8009f4a:	e7dc      	b.n	8009f06 <_malloc_r+0x86>
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	e7ef      	b.n	8009f30 <_malloc_r+0xb0>
 8009f50:	0023      	movs	r3, r4
 8009f52:	6864      	ldr	r4, [r4, #4]
 8009f54:	e7a6      	b.n	8009ea4 <_malloc_r+0x24>
 8009f56:	9c00      	ldr	r4, [sp, #0]
 8009f58:	6863      	ldr	r3, [r4, #4]
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	e7ad      	b.n	8009eba <_malloc_r+0x3a>
 8009f5e:	001a      	movs	r2, r3
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	d1fb      	bne.n	8009f5e <_malloc_r+0xde>
 8009f66:	2300      	movs	r3, #0
 8009f68:	e7da      	b.n	8009f20 <_malloc_r+0xa0>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	0028      	movs	r0, r5
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f000 f80e 	bl	8009f90 <__malloc_unlock>
 8009f74:	e7c6      	b.n	8009f04 <_malloc_r+0x84>
 8009f76:	6007      	str	r7, [r0, #0]
 8009f78:	e7da      	b.n	8009f30 <_malloc_r+0xb0>
 8009f7a:	46c0      	nop			@ (mov r8, r8)
 8009f7c:	200031f8 	.word	0x200031f8

08009f80 <__malloc_lock>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	4802      	ldr	r0, [pc, #8]	@ (8009f8c <__malloc_lock+0xc>)
 8009f84:	f7ff ff04 	bl	8009d90 <__retarget_lock_acquire_recursive>
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	46c0      	nop			@ (mov r8, r8)
 8009f8c:	200031f0 	.word	0x200031f0

08009f90 <__malloc_unlock>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	4802      	ldr	r0, [pc, #8]	@ (8009f9c <__malloc_unlock+0xc>)
 8009f94:	f7ff fefd 	bl	8009d92 <__retarget_lock_release_recursive>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	200031f0 	.word	0x200031f0

08009fa0 <__ssputs_r>:
 8009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa2:	688e      	ldr	r6, [r1, #8]
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	001f      	movs	r7, r3
 8009fa8:	000c      	movs	r4, r1
 8009faa:	680b      	ldr	r3, [r1, #0]
 8009fac:	9002      	str	r0, [sp, #8]
 8009fae:	9203      	str	r2, [sp, #12]
 8009fb0:	42be      	cmp	r6, r7
 8009fb2:	d830      	bhi.n	800a016 <__ssputs_r+0x76>
 8009fb4:	210c      	movs	r1, #12
 8009fb6:	5e62      	ldrsh	r2, [r4, r1]
 8009fb8:	2190      	movs	r1, #144	@ 0x90
 8009fba:	00c9      	lsls	r1, r1, #3
 8009fbc:	420a      	tst	r2, r1
 8009fbe:	d028      	beq.n	800a012 <__ssputs_r+0x72>
 8009fc0:	2003      	movs	r0, #3
 8009fc2:	6921      	ldr	r1, [r4, #16]
 8009fc4:	1a5b      	subs	r3, r3, r1
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	6963      	ldr	r3, [r4, #20]
 8009fca:	4343      	muls	r3, r0
 8009fcc:	9801      	ldr	r0, [sp, #4]
 8009fce:	0fdd      	lsrs	r5, r3, #31
 8009fd0:	18ed      	adds	r5, r5, r3
 8009fd2:	1c7b      	adds	r3, r7, #1
 8009fd4:	181b      	adds	r3, r3, r0
 8009fd6:	106d      	asrs	r5, r5, #1
 8009fd8:	42ab      	cmp	r3, r5
 8009fda:	d900      	bls.n	8009fde <__ssputs_r+0x3e>
 8009fdc:	001d      	movs	r5, r3
 8009fde:	0552      	lsls	r2, r2, #21
 8009fe0:	d528      	bpl.n	800a034 <__ssputs_r+0x94>
 8009fe2:	0029      	movs	r1, r5
 8009fe4:	9802      	ldr	r0, [sp, #8]
 8009fe6:	f7ff ff4b 	bl	8009e80 <_malloc_r>
 8009fea:	1e06      	subs	r6, r0, #0
 8009fec:	d02c      	beq.n	800a048 <__ssputs_r+0xa8>
 8009fee:	9a01      	ldr	r2, [sp, #4]
 8009ff0:	6921      	ldr	r1, [r4, #16]
 8009ff2:	f7ff fecf 	bl	8009d94 <memcpy>
 8009ff6:	89a2      	ldrh	r2, [r4, #12]
 8009ff8:	4b18      	ldr	r3, [pc, #96]	@ (800a05c <__ssputs_r+0xbc>)
 8009ffa:	401a      	ands	r2, r3
 8009ffc:	2380      	movs	r3, #128	@ 0x80
 8009ffe:	4313      	orrs	r3, r2
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	9b01      	ldr	r3, [sp, #4]
 800a004:	6126      	str	r6, [r4, #16]
 800a006:	18f6      	adds	r6, r6, r3
 800a008:	6026      	str	r6, [r4, #0]
 800a00a:	003e      	movs	r6, r7
 800a00c:	6165      	str	r5, [r4, #20]
 800a00e:	1aed      	subs	r5, r5, r3
 800a010:	60a5      	str	r5, [r4, #8]
 800a012:	42be      	cmp	r6, r7
 800a014:	d900      	bls.n	800a018 <__ssputs_r+0x78>
 800a016:	003e      	movs	r6, r7
 800a018:	0032      	movs	r2, r6
 800a01a:	9903      	ldr	r1, [sp, #12]
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	f000 fa99 	bl	800a554 <memmove>
 800a022:	2000      	movs	r0, #0
 800a024:	68a3      	ldr	r3, [r4, #8]
 800a026:	1b9b      	subs	r3, r3, r6
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	199b      	adds	r3, r3, r6
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	b005      	add	sp, #20
 800a032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a034:	002a      	movs	r2, r5
 800a036:	9802      	ldr	r0, [sp, #8]
 800a038:	f000 fabb 	bl	800a5b2 <_realloc_r>
 800a03c:	1e06      	subs	r6, r0, #0
 800a03e:	d1e0      	bne.n	800a002 <__ssputs_r+0x62>
 800a040:	6921      	ldr	r1, [r4, #16]
 800a042:	9802      	ldr	r0, [sp, #8]
 800a044:	f7ff feb0 	bl	8009da8 <_free_r>
 800a048:	230c      	movs	r3, #12
 800a04a:	2001      	movs	r0, #1
 800a04c:	9a02      	ldr	r2, [sp, #8]
 800a04e:	4240      	negs	r0, r0
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	89a2      	ldrh	r2, [r4, #12]
 800a054:	3334      	adds	r3, #52	@ 0x34
 800a056:	4313      	orrs	r3, r2
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	e7e9      	b.n	800a030 <__ssputs_r+0x90>
 800a05c:	fffffb7f 	.word	0xfffffb7f

0800a060 <_svfiprintf_r>:
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	b0a1      	sub	sp, #132	@ 0x84
 800a064:	9003      	str	r0, [sp, #12]
 800a066:	001d      	movs	r5, r3
 800a068:	898b      	ldrh	r3, [r1, #12]
 800a06a:	000f      	movs	r7, r1
 800a06c:	0016      	movs	r6, r2
 800a06e:	061b      	lsls	r3, r3, #24
 800a070:	d511      	bpl.n	800a096 <_svfiprintf_r+0x36>
 800a072:	690b      	ldr	r3, [r1, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10e      	bne.n	800a096 <_svfiprintf_r+0x36>
 800a078:	2140      	movs	r1, #64	@ 0x40
 800a07a:	f7ff ff01 	bl	8009e80 <_malloc_r>
 800a07e:	6038      	str	r0, [r7, #0]
 800a080:	6138      	str	r0, [r7, #16]
 800a082:	2800      	cmp	r0, #0
 800a084:	d105      	bne.n	800a092 <_svfiprintf_r+0x32>
 800a086:	230c      	movs	r3, #12
 800a088:	9a03      	ldr	r2, [sp, #12]
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	2001      	movs	r0, #1
 800a08e:	4240      	negs	r0, r0
 800a090:	e0cf      	b.n	800a232 <_svfiprintf_r+0x1d2>
 800a092:	2340      	movs	r3, #64	@ 0x40
 800a094:	617b      	str	r3, [r7, #20]
 800a096:	2300      	movs	r3, #0
 800a098:	ac08      	add	r4, sp, #32
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	3320      	adds	r3, #32
 800a09e:	7663      	strb	r3, [r4, #25]
 800a0a0:	3310      	adds	r3, #16
 800a0a2:	76a3      	strb	r3, [r4, #26]
 800a0a4:	9507      	str	r5, [sp, #28]
 800a0a6:	0035      	movs	r5, r6
 800a0a8:	782b      	ldrb	r3, [r5, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <_svfiprintf_r+0x52>
 800a0ae:	2b25      	cmp	r3, #37	@ 0x25
 800a0b0:	d148      	bne.n	800a144 <_svfiprintf_r+0xe4>
 800a0b2:	1bab      	subs	r3, r5, r6
 800a0b4:	9305      	str	r3, [sp, #20]
 800a0b6:	42b5      	cmp	r5, r6
 800a0b8:	d00b      	beq.n	800a0d2 <_svfiprintf_r+0x72>
 800a0ba:	0032      	movs	r2, r6
 800a0bc:	0039      	movs	r1, r7
 800a0be:	9803      	ldr	r0, [sp, #12]
 800a0c0:	f7ff ff6e 	bl	8009fa0 <__ssputs_r>
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d100      	bne.n	800a0ca <_svfiprintf_r+0x6a>
 800a0c8:	e0ae      	b.n	800a228 <_svfiprintf_r+0x1c8>
 800a0ca:	6963      	ldr	r3, [r4, #20]
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	6163      	str	r3, [r4, #20]
 800a0d2:	782b      	ldrb	r3, [r5, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d100      	bne.n	800a0da <_svfiprintf_r+0x7a>
 800a0d8:	e0a6      	b.n	800a228 <_svfiprintf_r+0x1c8>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4252      	negs	r2, r2
 800a0e0:	6062      	str	r2, [r4, #4]
 800a0e2:	a904      	add	r1, sp, #16
 800a0e4:	3254      	adds	r2, #84	@ 0x54
 800a0e6:	1852      	adds	r2, r2, r1
 800a0e8:	1c6e      	adds	r6, r5, #1
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	60e3      	str	r3, [r4, #12]
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	7013      	strb	r3, [r2, #0]
 800a0f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a0f4:	4b54      	ldr	r3, [pc, #336]	@ (800a248 <_svfiprintf_r+0x1e8>)
 800a0f6:	2205      	movs	r2, #5
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	7831      	ldrb	r1, [r6, #0]
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	f000 fa4d 	bl	800a59c <memchr>
 800a102:	1c75      	adds	r5, r6, #1
 800a104:	2800      	cmp	r0, #0
 800a106:	d11f      	bne.n	800a148 <_svfiprintf_r+0xe8>
 800a108:	6822      	ldr	r2, [r4, #0]
 800a10a:	06d3      	lsls	r3, r2, #27
 800a10c:	d504      	bpl.n	800a118 <_svfiprintf_r+0xb8>
 800a10e:	2353      	movs	r3, #83	@ 0x53
 800a110:	a904      	add	r1, sp, #16
 800a112:	185b      	adds	r3, r3, r1
 800a114:	2120      	movs	r1, #32
 800a116:	7019      	strb	r1, [r3, #0]
 800a118:	0713      	lsls	r3, r2, #28
 800a11a:	d504      	bpl.n	800a126 <_svfiprintf_r+0xc6>
 800a11c:	2353      	movs	r3, #83	@ 0x53
 800a11e:	a904      	add	r1, sp, #16
 800a120:	185b      	adds	r3, r3, r1
 800a122:	212b      	movs	r1, #43	@ 0x2b
 800a124:	7019      	strb	r1, [r3, #0]
 800a126:	7833      	ldrb	r3, [r6, #0]
 800a128:	2b2a      	cmp	r3, #42	@ 0x2a
 800a12a:	d016      	beq.n	800a15a <_svfiprintf_r+0xfa>
 800a12c:	0035      	movs	r5, r6
 800a12e:	2100      	movs	r1, #0
 800a130:	200a      	movs	r0, #10
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	782a      	ldrb	r2, [r5, #0]
 800a136:	1c6e      	adds	r6, r5, #1
 800a138:	3a30      	subs	r2, #48	@ 0x30
 800a13a:	2a09      	cmp	r2, #9
 800a13c:	d950      	bls.n	800a1e0 <_svfiprintf_r+0x180>
 800a13e:	2900      	cmp	r1, #0
 800a140:	d111      	bne.n	800a166 <_svfiprintf_r+0x106>
 800a142:	e017      	b.n	800a174 <_svfiprintf_r+0x114>
 800a144:	3501      	adds	r5, #1
 800a146:	e7af      	b.n	800a0a8 <_svfiprintf_r+0x48>
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	1ac0      	subs	r0, r0, r3
 800a14e:	2301      	movs	r3, #1
 800a150:	4083      	lsls	r3, r0
 800a152:	4313      	orrs	r3, r2
 800a154:	002e      	movs	r6, r5
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	e7cc      	b.n	800a0f4 <_svfiprintf_r+0x94>
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	1d19      	adds	r1, r3, #4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	9107      	str	r1, [sp, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	db01      	blt.n	800a16a <_svfiprintf_r+0x10a>
 800a166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a168:	e004      	b.n	800a174 <_svfiprintf_r+0x114>
 800a16a:	425b      	negs	r3, r3
 800a16c:	60e3      	str	r3, [r4, #12]
 800a16e:	2302      	movs	r3, #2
 800a170:	4313      	orrs	r3, r2
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	782b      	ldrb	r3, [r5, #0]
 800a176:	2b2e      	cmp	r3, #46	@ 0x2e
 800a178:	d10c      	bne.n	800a194 <_svfiprintf_r+0x134>
 800a17a:	786b      	ldrb	r3, [r5, #1]
 800a17c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a17e:	d134      	bne.n	800a1ea <_svfiprintf_r+0x18a>
 800a180:	9b07      	ldr	r3, [sp, #28]
 800a182:	3502      	adds	r5, #2
 800a184:	1d1a      	adds	r2, r3, #4
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	9207      	str	r2, [sp, #28]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	da01      	bge.n	800a192 <_svfiprintf_r+0x132>
 800a18e:	2301      	movs	r3, #1
 800a190:	425b      	negs	r3, r3
 800a192:	9309      	str	r3, [sp, #36]	@ 0x24
 800a194:	4e2d      	ldr	r6, [pc, #180]	@ (800a24c <_svfiprintf_r+0x1ec>)
 800a196:	2203      	movs	r2, #3
 800a198:	0030      	movs	r0, r6
 800a19a:	7829      	ldrb	r1, [r5, #0]
 800a19c:	f000 f9fe 	bl	800a59c <memchr>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d006      	beq.n	800a1b2 <_svfiprintf_r+0x152>
 800a1a4:	2340      	movs	r3, #64	@ 0x40
 800a1a6:	1b80      	subs	r0, r0, r6
 800a1a8:	4083      	lsls	r3, r0
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	3501      	adds	r5, #1
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	7829      	ldrb	r1, [r5, #0]
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	4826      	ldr	r0, [pc, #152]	@ (800a250 <_svfiprintf_r+0x1f0>)
 800a1b8:	1c6e      	adds	r6, r5, #1
 800a1ba:	7621      	strb	r1, [r4, #24]
 800a1bc:	f000 f9ee 	bl	800a59c <memchr>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d038      	beq.n	800a236 <_svfiprintf_r+0x1d6>
 800a1c4:	4b23      	ldr	r3, [pc, #140]	@ (800a254 <_svfiprintf_r+0x1f4>)
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d122      	bne.n	800a210 <_svfiprintf_r+0x1b0>
 800a1ca:	2207      	movs	r2, #7
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	3307      	adds	r3, #7
 800a1d0:	4393      	bics	r3, r2
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9307      	str	r3, [sp, #28]
 800a1d6:	6963      	ldr	r3, [r4, #20]
 800a1d8:	9a04      	ldr	r2, [sp, #16]
 800a1da:	189b      	adds	r3, r3, r2
 800a1dc:	6163      	str	r3, [r4, #20]
 800a1de:	e762      	b.n	800a0a6 <_svfiprintf_r+0x46>
 800a1e0:	4343      	muls	r3, r0
 800a1e2:	0035      	movs	r5, r6
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	189b      	adds	r3, r3, r2
 800a1e8:	e7a4      	b.n	800a134 <_svfiprintf_r+0xd4>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	200a      	movs	r0, #10
 800a1ee:	0019      	movs	r1, r3
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	782a      	ldrb	r2, [r5, #0]
 800a1f6:	1c6e      	adds	r6, r5, #1
 800a1f8:	3a30      	subs	r2, #48	@ 0x30
 800a1fa:	2a09      	cmp	r2, #9
 800a1fc:	d903      	bls.n	800a206 <_svfiprintf_r+0x1a6>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0c8      	beq.n	800a194 <_svfiprintf_r+0x134>
 800a202:	9109      	str	r1, [sp, #36]	@ 0x24
 800a204:	e7c6      	b.n	800a194 <_svfiprintf_r+0x134>
 800a206:	4341      	muls	r1, r0
 800a208:	0035      	movs	r5, r6
 800a20a:	2301      	movs	r3, #1
 800a20c:	1889      	adds	r1, r1, r2
 800a20e:	e7f1      	b.n	800a1f4 <_svfiprintf_r+0x194>
 800a210:	aa07      	add	r2, sp, #28
 800a212:	9200      	str	r2, [sp, #0]
 800a214:	0021      	movs	r1, r4
 800a216:	003a      	movs	r2, r7
 800a218:	4b0f      	ldr	r3, [pc, #60]	@ (800a258 <_svfiprintf_r+0x1f8>)
 800a21a:	9803      	ldr	r0, [sp, #12]
 800a21c:	e000      	b.n	800a220 <_svfiprintf_r+0x1c0>
 800a21e:	bf00      	nop
 800a220:	9004      	str	r0, [sp, #16]
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	3301      	adds	r3, #1
 800a226:	d1d6      	bne.n	800a1d6 <_svfiprintf_r+0x176>
 800a228:	89bb      	ldrh	r3, [r7, #12]
 800a22a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a22c:	065b      	lsls	r3, r3, #25
 800a22e:	d500      	bpl.n	800a232 <_svfiprintf_r+0x1d2>
 800a230:	e72c      	b.n	800a08c <_svfiprintf_r+0x2c>
 800a232:	b021      	add	sp, #132	@ 0x84
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	aa07      	add	r2, sp, #28
 800a238:	9200      	str	r2, [sp, #0]
 800a23a:	0021      	movs	r1, r4
 800a23c:	003a      	movs	r2, r7
 800a23e:	4b06      	ldr	r3, [pc, #24]	@ (800a258 <_svfiprintf_r+0x1f8>)
 800a240:	9803      	ldr	r0, [sp, #12]
 800a242:	f000 f87b 	bl	800a33c <_printf_i>
 800a246:	e7eb      	b.n	800a220 <_svfiprintf_r+0x1c0>
 800a248:	0800a82c 	.word	0x0800a82c
 800a24c:	0800a832 	.word	0x0800a832
 800a250:	0800a836 	.word	0x0800a836
 800a254:	00000000 	.word	0x00000000
 800a258:	08009fa1 	.word	0x08009fa1

0800a25c <_printf_common>:
 800a25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a25e:	0016      	movs	r6, r2
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	688a      	ldr	r2, [r1, #8]
 800a264:	690b      	ldr	r3, [r1, #16]
 800a266:	000c      	movs	r4, r1
 800a268:	9000      	str	r0, [sp, #0]
 800a26a:	4293      	cmp	r3, r2
 800a26c:	da00      	bge.n	800a270 <_printf_common+0x14>
 800a26e:	0013      	movs	r3, r2
 800a270:	0022      	movs	r2, r4
 800a272:	6033      	str	r3, [r6, #0]
 800a274:	3243      	adds	r2, #67	@ 0x43
 800a276:	7812      	ldrb	r2, [r2, #0]
 800a278:	2a00      	cmp	r2, #0
 800a27a:	d001      	beq.n	800a280 <_printf_common+0x24>
 800a27c:	3301      	adds	r3, #1
 800a27e:	6033      	str	r3, [r6, #0]
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	069b      	lsls	r3, r3, #26
 800a284:	d502      	bpl.n	800a28c <_printf_common+0x30>
 800a286:	6833      	ldr	r3, [r6, #0]
 800a288:	3302      	adds	r3, #2
 800a28a:	6033      	str	r3, [r6, #0]
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	2306      	movs	r3, #6
 800a290:	0015      	movs	r5, r2
 800a292:	401d      	ands	r5, r3
 800a294:	421a      	tst	r2, r3
 800a296:	d027      	beq.n	800a2e8 <_printf_common+0x8c>
 800a298:	0023      	movs	r3, r4
 800a29a:	3343      	adds	r3, #67	@ 0x43
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	1e5a      	subs	r2, r3, #1
 800a2a0:	4193      	sbcs	r3, r2
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	0692      	lsls	r2, r2, #26
 800a2a6:	d430      	bmi.n	800a30a <_printf_common+0xae>
 800a2a8:	0022      	movs	r2, r4
 800a2aa:	9901      	ldr	r1, [sp, #4]
 800a2ac:	9800      	ldr	r0, [sp, #0]
 800a2ae:	9d08      	ldr	r5, [sp, #32]
 800a2b0:	3243      	adds	r2, #67	@ 0x43
 800a2b2:	47a8      	blx	r5
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d025      	beq.n	800a304 <_printf_common+0xa8>
 800a2b8:	2206      	movs	r2, #6
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	2500      	movs	r5, #0
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d105      	bne.n	800a2d0 <_printf_common+0x74>
 800a2c4:	6833      	ldr	r3, [r6, #0]
 800a2c6:	68e5      	ldr	r5, [r4, #12]
 800a2c8:	1aed      	subs	r5, r5, r3
 800a2ca:	43eb      	mvns	r3, r5
 800a2cc:	17db      	asrs	r3, r3, #31
 800a2ce:	401d      	ands	r5, r3
 800a2d0:	68a3      	ldr	r3, [r4, #8]
 800a2d2:	6922      	ldr	r2, [r4, #16]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	dd01      	ble.n	800a2dc <_printf_common+0x80>
 800a2d8:	1a9b      	subs	r3, r3, r2
 800a2da:	18ed      	adds	r5, r5, r3
 800a2dc:	2600      	movs	r6, #0
 800a2de:	42b5      	cmp	r5, r6
 800a2e0:	d120      	bne.n	800a324 <_printf_common+0xc8>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	e010      	b.n	800a308 <_printf_common+0xac>
 800a2e6:	3501      	adds	r5, #1
 800a2e8:	68e3      	ldr	r3, [r4, #12]
 800a2ea:	6832      	ldr	r2, [r6, #0]
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	42ab      	cmp	r3, r5
 800a2f0:	ddd2      	ble.n	800a298 <_printf_common+0x3c>
 800a2f2:	0022      	movs	r2, r4
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	9901      	ldr	r1, [sp, #4]
 800a2f8:	9800      	ldr	r0, [sp, #0]
 800a2fa:	9f08      	ldr	r7, [sp, #32]
 800a2fc:	3219      	adds	r2, #25
 800a2fe:	47b8      	blx	r7
 800a300:	3001      	adds	r0, #1
 800a302:	d1f0      	bne.n	800a2e6 <_printf_common+0x8a>
 800a304:	2001      	movs	r0, #1
 800a306:	4240      	negs	r0, r0
 800a308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a30a:	2030      	movs	r0, #48	@ 0x30
 800a30c:	18e1      	adds	r1, r4, r3
 800a30e:	3143      	adds	r1, #67	@ 0x43
 800a310:	7008      	strb	r0, [r1, #0]
 800a312:	0021      	movs	r1, r4
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	3145      	adds	r1, #69	@ 0x45
 800a318:	7809      	ldrb	r1, [r1, #0]
 800a31a:	18a2      	adds	r2, r4, r2
 800a31c:	3243      	adds	r2, #67	@ 0x43
 800a31e:	3302      	adds	r3, #2
 800a320:	7011      	strb	r1, [r2, #0]
 800a322:	e7c1      	b.n	800a2a8 <_printf_common+0x4c>
 800a324:	0022      	movs	r2, r4
 800a326:	2301      	movs	r3, #1
 800a328:	9901      	ldr	r1, [sp, #4]
 800a32a:	9800      	ldr	r0, [sp, #0]
 800a32c:	9f08      	ldr	r7, [sp, #32]
 800a32e:	321a      	adds	r2, #26
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	d0e6      	beq.n	800a304 <_printf_common+0xa8>
 800a336:	3601      	adds	r6, #1
 800a338:	e7d1      	b.n	800a2de <_printf_common+0x82>
	...

0800a33c <_printf_i>:
 800a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33e:	b08b      	sub	sp, #44	@ 0x2c
 800a340:	9206      	str	r2, [sp, #24]
 800a342:	000a      	movs	r2, r1
 800a344:	3243      	adds	r2, #67	@ 0x43
 800a346:	9307      	str	r3, [sp, #28]
 800a348:	9005      	str	r0, [sp, #20]
 800a34a:	9203      	str	r2, [sp, #12]
 800a34c:	7e0a      	ldrb	r2, [r1, #24]
 800a34e:	000c      	movs	r4, r1
 800a350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a352:	2a78      	cmp	r2, #120	@ 0x78
 800a354:	d809      	bhi.n	800a36a <_printf_i+0x2e>
 800a356:	2a62      	cmp	r2, #98	@ 0x62
 800a358:	d80b      	bhi.n	800a372 <_printf_i+0x36>
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d100      	bne.n	800a360 <_printf_i+0x24>
 800a35e:	e0ba      	b.n	800a4d6 <_printf_i+0x19a>
 800a360:	497a      	ldr	r1, [pc, #488]	@ (800a54c <_printf_i+0x210>)
 800a362:	9104      	str	r1, [sp, #16]
 800a364:	2a58      	cmp	r2, #88	@ 0x58
 800a366:	d100      	bne.n	800a36a <_printf_i+0x2e>
 800a368:	e08e      	b.n	800a488 <_printf_i+0x14c>
 800a36a:	0025      	movs	r5, r4
 800a36c:	3542      	adds	r5, #66	@ 0x42
 800a36e:	702a      	strb	r2, [r5, #0]
 800a370:	e022      	b.n	800a3b8 <_printf_i+0x7c>
 800a372:	0010      	movs	r0, r2
 800a374:	3863      	subs	r0, #99	@ 0x63
 800a376:	2815      	cmp	r0, #21
 800a378:	d8f7      	bhi.n	800a36a <_printf_i+0x2e>
 800a37a:	f7f5 fecd 	bl	8000118 <__gnu_thumb1_case_shi>
 800a37e:	0016      	.short	0x0016
 800a380:	fff6001f 	.word	0xfff6001f
 800a384:	fff6fff6 	.word	0xfff6fff6
 800a388:	001ffff6 	.word	0x001ffff6
 800a38c:	fff6fff6 	.word	0xfff6fff6
 800a390:	fff6fff6 	.word	0xfff6fff6
 800a394:	0036009f 	.word	0x0036009f
 800a398:	fff6007e 	.word	0xfff6007e
 800a39c:	00b0fff6 	.word	0x00b0fff6
 800a3a0:	0036fff6 	.word	0x0036fff6
 800a3a4:	fff6fff6 	.word	0xfff6fff6
 800a3a8:	0082      	.short	0x0082
 800a3aa:	0025      	movs	r5, r4
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	3542      	adds	r5, #66	@ 0x42
 800a3b0:	1d11      	adds	r1, r2, #4
 800a3b2:	6019      	str	r1, [r3, #0]
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	702b      	strb	r3, [r5, #0]
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e09e      	b.n	800a4fa <_printf_i+0x1be>
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	6809      	ldr	r1, [r1, #0]
 800a3c0:	1d02      	adds	r2, r0, #4
 800a3c2:	060d      	lsls	r5, r1, #24
 800a3c4:	d50b      	bpl.n	800a3de <_printf_i+0xa2>
 800a3c6:	6806      	ldr	r6, [r0, #0]
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	da03      	bge.n	800a3d6 <_printf_i+0x9a>
 800a3ce:	232d      	movs	r3, #45	@ 0x2d
 800a3d0:	9a03      	ldr	r2, [sp, #12]
 800a3d2:	4276      	negs	r6, r6
 800a3d4:	7013      	strb	r3, [r2, #0]
 800a3d6:	4b5d      	ldr	r3, [pc, #372]	@ (800a54c <_printf_i+0x210>)
 800a3d8:	270a      	movs	r7, #10
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	e018      	b.n	800a410 <_printf_i+0xd4>
 800a3de:	6806      	ldr	r6, [r0, #0]
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	0649      	lsls	r1, r1, #25
 800a3e4:	d5f1      	bpl.n	800a3ca <_printf_i+0x8e>
 800a3e6:	b236      	sxth	r6, r6
 800a3e8:	e7ef      	b.n	800a3ca <_printf_i+0x8e>
 800a3ea:	6808      	ldr	r0, [r1, #0]
 800a3ec:	6819      	ldr	r1, [r3, #0]
 800a3ee:	c940      	ldmia	r1!, {r6}
 800a3f0:	0605      	lsls	r5, r0, #24
 800a3f2:	d402      	bmi.n	800a3fa <_printf_i+0xbe>
 800a3f4:	0640      	lsls	r0, r0, #25
 800a3f6:	d500      	bpl.n	800a3fa <_printf_i+0xbe>
 800a3f8:	b2b6      	uxth	r6, r6
 800a3fa:	6019      	str	r1, [r3, #0]
 800a3fc:	4b53      	ldr	r3, [pc, #332]	@ (800a54c <_printf_i+0x210>)
 800a3fe:	270a      	movs	r7, #10
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	2a6f      	cmp	r2, #111	@ 0x6f
 800a404:	d100      	bne.n	800a408 <_printf_i+0xcc>
 800a406:	3f02      	subs	r7, #2
 800a408:	0023      	movs	r3, r4
 800a40a:	2200      	movs	r2, #0
 800a40c:	3343      	adds	r3, #67	@ 0x43
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	60a3      	str	r3, [r4, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	db06      	blt.n	800a426 <_printf_i+0xea>
 800a418:	2104      	movs	r1, #4
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	9d03      	ldr	r5, [sp, #12]
 800a41e:	438a      	bics	r2, r1
 800a420:	6022      	str	r2, [r4, #0]
 800a422:	4333      	orrs	r3, r6
 800a424:	d00c      	beq.n	800a440 <_printf_i+0x104>
 800a426:	9d03      	ldr	r5, [sp, #12]
 800a428:	0030      	movs	r0, r6
 800a42a:	0039      	movs	r1, r7
 800a42c:	f7f5 ff04 	bl	8000238 <__aeabi_uidivmod>
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	3d01      	subs	r5, #1
 800a434:	5c5b      	ldrb	r3, [r3, r1]
 800a436:	702b      	strb	r3, [r5, #0]
 800a438:	0033      	movs	r3, r6
 800a43a:	0006      	movs	r6, r0
 800a43c:	429f      	cmp	r7, r3
 800a43e:	d9f3      	bls.n	800a428 <_printf_i+0xec>
 800a440:	2f08      	cmp	r7, #8
 800a442:	d109      	bne.n	800a458 <_printf_i+0x11c>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	07db      	lsls	r3, r3, #31
 800a448:	d506      	bpl.n	800a458 <_printf_i+0x11c>
 800a44a:	6862      	ldr	r2, [r4, #4]
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	429a      	cmp	r2, r3
 800a450:	dc02      	bgt.n	800a458 <_printf_i+0x11c>
 800a452:	2330      	movs	r3, #48	@ 0x30
 800a454:	3d01      	subs	r5, #1
 800a456:	702b      	strb	r3, [r5, #0]
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	1b5b      	subs	r3, r3, r5
 800a45c:	6123      	str	r3, [r4, #16]
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	0021      	movs	r1, r4
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	9805      	ldr	r0, [sp, #20]
 800a466:	9b06      	ldr	r3, [sp, #24]
 800a468:	aa09      	add	r2, sp, #36	@ 0x24
 800a46a:	f7ff fef7 	bl	800a25c <_printf_common>
 800a46e:	3001      	adds	r0, #1
 800a470:	d148      	bne.n	800a504 <_printf_i+0x1c8>
 800a472:	2001      	movs	r0, #1
 800a474:	4240      	negs	r0, r0
 800a476:	b00b      	add	sp, #44	@ 0x2c
 800a478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47a:	2220      	movs	r2, #32
 800a47c:	6809      	ldr	r1, [r1, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	6022      	str	r2, [r4, #0]
 800a482:	2278      	movs	r2, #120	@ 0x78
 800a484:	4932      	ldr	r1, [pc, #200]	@ (800a550 <_printf_i+0x214>)
 800a486:	9104      	str	r1, [sp, #16]
 800a488:	0021      	movs	r1, r4
 800a48a:	3145      	adds	r1, #69	@ 0x45
 800a48c:	700a      	strb	r2, [r1, #0]
 800a48e:	6819      	ldr	r1, [r3, #0]
 800a490:	6822      	ldr	r2, [r4, #0]
 800a492:	c940      	ldmia	r1!, {r6}
 800a494:	0610      	lsls	r0, r2, #24
 800a496:	d402      	bmi.n	800a49e <_printf_i+0x162>
 800a498:	0650      	lsls	r0, r2, #25
 800a49a:	d500      	bpl.n	800a49e <_printf_i+0x162>
 800a49c:	b2b6      	uxth	r6, r6
 800a49e:	6019      	str	r1, [r3, #0]
 800a4a0:	07d3      	lsls	r3, r2, #31
 800a4a2:	d502      	bpl.n	800a4aa <_printf_i+0x16e>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	d001      	beq.n	800a4b2 <_printf_i+0x176>
 800a4ae:	2710      	movs	r7, #16
 800a4b0:	e7aa      	b.n	800a408 <_printf_i+0xcc>
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	4393      	bics	r3, r2
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	e7f8      	b.n	800a4ae <_printf_i+0x172>
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	680d      	ldr	r5, [r1, #0]
 800a4c0:	1d10      	adds	r0, r2, #4
 800a4c2:	6949      	ldr	r1, [r1, #20]
 800a4c4:	6018      	str	r0, [r3, #0]
 800a4c6:	6813      	ldr	r3, [r2, #0]
 800a4c8:	062e      	lsls	r6, r5, #24
 800a4ca:	d501      	bpl.n	800a4d0 <_printf_i+0x194>
 800a4cc:	6019      	str	r1, [r3, #0]
 800a4ce:	e002      	b.n	800a4d6 <_printf_i+0x19a>
 800a4d0:	066d      	lsls	r5, r5, #25
 800a4d2:	d5fb      	bpl.n	800a4cc <_printf_i+0x190>
 800a4d4:	8019      	strh	r1, [r3, #0]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9d03      	ldr	r5, [sp, #12]
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	e7bf      	b.n	800a45e <_printf_i+0x122>
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	1d11      	adds	r1, r2, #4
 800a4e2:	6019      	str	r1, [r3, #0]
 800a4e4:	6815      	ldr	r5, [r2, #0]
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	0028      	movs	r0, r5
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	f000 f856 	bl	800a59c <memchr>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d001      	beq.n	800a4f8 <_printf_i+0x1bc>
 800a4f4:	1b40      	subs	r0, r0, r5
 800a4f6:	6060      	str	r0, [r4, #4]
 800a4f8:	6863      	ldr	r3, [r4, #4]
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9a03      	ldr	r2, [sp, #12]
 800a500:	7013      	strb	r3, [r2, #0]
 800a502:	e7ac      	b.n	800a45e <_printf_i+0x122>
 800a504:	002a      	movs	r2, r5
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	9906      	ldr	r1, [sp, #24]
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	9d07      	ldr	r5, [sp, #28]
 800a50e:	47a8      	blx	r5
 800a510:	3001      	adds	r0, #1
 800a512:	d0ae      	beq.n	800a472 <_printf_i+0x136>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	079b      	lsls	r3, r3, #30
 800a518:	d415      	bmi.n	800a546 <_printf_i+0x20a>
 800a51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51c:	68e0      	ldr	r0, [r4, #12]
 800a51e:	4298      	cmp	r0, r3
 800a520:	daa9      	bge.n	800a476 <_printf_i+0x13a>
 800a522:	0018      	movs	r0, r3
 800a524:	e7a7      	b.n	800a476 <_printf_i+0x13a>
 800a526:	0022      	movs	r2, r4
 800a528:	2301      	movs	r3, #1
 800a52a:	9906      	ldr	r1, [sp, #24]
 800a52c:	9805      	ldr	r0, [sp, #20]
 800a52e:	9e07      	ldr	r6, [sp, #28]
 800a530:	3219      	adds	r2, #25
 800a532:	47b0      	blx	r6
 800a534:	3001      	adds	r0, #1
 800a536:	d09c      	beq.n	800a472 <_printf_i+0x136>
 800a538:	3501      	adds	r5, #1
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	42ab      	cmp	r3, r5
 800a542:	dcf0      	bgt.n	800a526 <_printf_i+0x1ea>
 800a544:	e7e9      	b.n	800a51a <_printf_i+0x1de>
 800a546:	2500      	movs	r5, #0
 800a548:	e7f7      	b.n	800a53a <_printf_i+0x1fe>
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	0800a83d 	.word	0x0800a83d
 800a550:	0800a84e 	.word	0x0800a84e

0800a554 <memmove>:
 800a554:	b510      	push	{r4, lr}
 800a556:	4288      	cmp	r0, r1
 800a558:	d902      	bls.n	800a560 <memmove+0xc>
 800a55a:	188b      	adds	r3, r1, r2
 800a55c:	4298      	cmp	r0, r3
 800a55e:	d308      	bcc.n	800a572 <memmove+0x1e>
 800a560:	2300      	movs	r3, #0
 800a562:	429a      	cmp	r2, r3
 800a564:	d007      	beq.n	800a576 <memmove+0x22>
 800a566:	5ccc      	ldrb	r4, [r1, r3]
 800a568:	54c4      	strb	r4, [r0, r3]
 800a56a:	3301      	adds	r3, #1
 800a56c:	e7f9      	b.n	800a562 <memmove+0xe>
 800a56e:	5c8b      	ldrb	r3, [r1, r2]
 800a570:	5483      	strb	r3, [r0, r2]
 800a572:	3a01      	subs	r2, #1
 800a574:	d2fb      	bcs.n	800a56e <memmove+0x1a>
 800a576:	bd10      	pop	{r4, pc}

0800a578 <_sbrk_r>:
 800a578:	2300      	movs	r3, #0
 800a57a:	b570      	push	{r4, r5, r6, lr}
 800a57c:	4d06      	ldr	r5, [pc, #24]	@ (800a598 <_sbrk_r+0x20>)
 800a57e:	0004      	movs	r4, r0
 800a580:	0008      	movs	r0, r1
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7f7 f8f6 	bl	8001774 <_sbrk>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d103      	bne.n	800a594 <_sbrk_r+0x1c>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d000      	beq.n	800a594 <_sbrk_r+0x1c>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd70      	pop	{r4, r5, r6, pc}
 800a596:	46c0      	nop			@ (mov r8, r8)
 800a598:	200031ec 	.word	0x200031ec

0800a59c <memchr>:
 800a59c:	b2c9      	uxtb	r1, r1
 800a59e:	1882      	adds	r2, r0, r2
 800a5a0:	4290      	cmp	r0, r2
 800a5a2:	d101      	bne.n	800a5a8 <memchr+0xc>
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	4770      	bx	lr
 800a5a8:	7803      	ldrb	r3, [r0, #0]
 800a5aa:	428b      	cmp	r3, r1
 800a5ac:	d0fb      	beq.n	800a5a6 <memchr+0xa>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	e7f6      	b.n	800a5a0 <memchr+0x4>

0800a5b2 <_realloc_r>:
 800a5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b4:	0006      	movs	r6, r0
 800a5b6:	000c      	movs	r4, r1
 800a5b8:	0015      	movs	r5, r2
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	d105      	bne.n	800a5ca <_realloc_r+0x18>
 800a5be:	0011      	movs	r1, r2
 800a5c0:	f7ff fc5e 	bl	8009e80 <_malloc_r>
 800a5c4:	0004      	movs	r4, r0
 800a5c6:	0020      	movs	r0, r4
 800a5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	d103      	bne.n	800a5d6 <_realloc_r+0x24>
 800a5ce:	f7ff fbeb 	bl	8009da8 <_free_r>
 800a5d2:	002c      	movs	r4, r5
 800a5d4:	e7f7      	b.n	800a5c6 <_realloc_r+0x14>
 800a5d6:	f000 f81c 	bl	800a612 <_malloc_usable_size_r>
 800a5da:	0007      	movs	r7, r0
 800a5dc:	4285      	cmp	r5, r0
 800a5de:	d802      	bhi.n	800a5e6 <_realloc_r+0x34>
 800a5e0:	0843      	lsrs	r3, r0, #1
 800a5e2:	42ab      	cmp	r3, r5
 800a5e4:	d3ef      	bcc.n	800a5c6 <_realloc_r+0x14>
 800a5e6:	0029      	movs	r1, r5
 800a5e8:	0030      	movs	r0, r6
 800a5ea:	f7ff fc49 	bl	8009e80 <_malloc_r>
 800a5ee:	9001      	str	r0, [sp, #4]
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d101      	bne.n	800a5f8 <_realloc_r+0x46>
 800a5f4:	9c01      	ldr	r4, [sp, #4]
 800a5f6:	e7e6      	b.n	800a5c6 <_realloc_r+0x14>
 800a5f8:	002a      	movs	r2, r5
 800a5fa:	42bd      	cmp	r5, r7
 800a5fc:	d900      	bls.n	800a600 <_realloc_r+0x4e>
 800a5fe:	003a      	movs	r2, r7
 800a600:	0021      	movs	r1, r4
 800a602:	9801      	ldr	r0, [sp, #4]
 800a604:	f7ff fbc6 	bl	8009d94 <memcpy>
 800a608:	0021      	movs	r1, r4
 800a60a:	0030      	movs	r0, r6
 800a60c:	f7ff fbcc 	bl	8009da8 <_free_r>
 800a610:	e7f0      	b.n	800a5f4 <_realloc_r+0x42>

0800a612 <_malloc_usable_size_r>:
 800a612:	1f0b      	subs	r3, r1, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	1f18      	subs	r0, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	da01      	bge.n	800a620 <_malloc_usable_size_r+0xe>
 800a61c:	580b      	ldr	r3, [r1, r0]
 800a61e:	18c0      	adds	r0, r0, r3
 800a620:	4770      	bx	lr
	...

0800a624 <_init>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr

0800a630 <_fini>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a636:	bc08      	pop	{r3}
 800a638:	469e      	mov	lr, r3
 800a63a:	4770      	bx	lr
